 
//syntax with no explicit lhs
 
1
 ans  =
 
    1.  
 
-1
 ans  =
 
  - 1.  
 
1+1
 ans  =
 
    2.  
 
1==2
 ans  =
 
  F  
 
[1 2 3]
 ans  =
 
!   1.    2.    3. !
 
ans(1)
 ans  =
 
    1.  
 
[sin(3) 2 3]
 ans  =
 
!   0.1411200    2.    3. !
 
sin(3)
 ans  =
 
    0.1411200  
 
ans
 ans  =
 
    0.1411200  
 
ans==1
 ans  =
 
  F  
 
what

 Internal Functions: 

bdiag	deff	diary	disp	exec	
execstr	file	getenv	getf	getpid	
host	lib	oldload	load	print	
rat	read	readb	oldsave	save	
unix	writb	write	read4b	write4b	
mgetl	fileinfo	getio	setenv	xls_open	
xls_read	abs	atan	asin	acos	
ceil	clean	conj	cos	cumprod	
cumsum	diag	dsearch	exp	expm	
eye	floor	imag	imult	int	
kron	log	log1p	matrix	max	
maxi	min	mini	number_properties	nearfloat	
ones	prod	rand	real	round	
sign	sin	size	sort	sqrt	
sum	tan	tril	triu	testmatrix	
isreal	frexp	zeros	isequal	spones	
champ	champ1	oldcontour	driver	fec	
geom3d	grayplot	Matplot	Matplot1	contour2di	
gsort	param3d	param3d1	xstringb	plot2d	
plot2d1	plot2d2	plot2d3	plot2d4	plot3d	
plot3d1	move	glue	unglue	drawnow	
drawlater	draw	addcb	copy	delete	
get	set	winsid	xarc	xarcs	
xarrows	drawaxis	xchange	xclea	oldxclear	
xclick	xdel	xend	xfarc	xfarcs	
xfpoly	xfpolys	xfrect	xg2ps	xget	
xgetech	xgetmouse	xgrid	xinfo	xinit	
xlfont	xload	xpause	xpoly	xpolys	
xrect	xrects	xs2fig	xsave	xsegs	
xselect	xset	xsetech	xstring	xstringl	
xtape	xtitle	xgraduate	xname	xaxis	
seteventhandler	handle	help_gtk	xs2gif	xs2ppm	
xs2ps	tohome	set_posfig_dim	show_window	xsnative	
zoom_rect	unzoom	xs2bmp	xs2emf	UImenu	
ereduc	fstair	ricc_old	freq	ltitr	
ppol	rtitr	tr_zer	fsolve	lsqrsolve	
optim	qld	qpqpqp	semidef	ode	
debug	lines	argn	comp	fort	
call	mode	type	error	format	
isdef	exists	errcatch	errclear	iserror	
predef	newfun	clearfun	funptr	macr2lst	
setbpt	delbpt	dispbpt	funcprot	whereis	
where	timer	havewindow	stacksize	mtlb_mode	
link	ulink	c_link	addinter	sciargs	
chdir	getcwd	ieee	typename	global	
clearglobal	isglobal	gstacksize	getdate	intppty	
lasterror	getversion	loadhistory	savehistory	gethistory	
resethistory	macr2tree	sleep	getos	banner	
fromjava	Calendar	getmemory	user	m6loadg	
m6saveg	m6prevn2p	m6ns2p	m6p2ns	m6edge2st	
m6prevn2st	m6compc	m6concom	m6compfc	m6sconcom	
m6pcchna	m6fordfulk	m6johns	m6dijkst	m6frang	
m6chcm	m6transc	m6dfs	m6umtree	m6umtree1	
m6dmtree	m6tconex	m6flomax	m6kilter	m6busack	
m6floqua	m6relax	m6findiso	m6ta2lpd	m6ta2lpu	
m6lp2tad	m6lp2tau	m6dfs2	m6diam	m6cent	
m6hullcvex	m6clique	m6clique1	m6hamil	m6visitor	
m6bmatch	m6knapsk	m6prfmatch	m6permuto	m6mesh2b	
m6deumesh	m6bandred	m6meshmesh	m6ford	bezout	
coeff	degree	poly	pppdiv	roots	
sfact	simp	simp_mode	varn	glist	
list	lsslist	rlist	tlist	lstcat	
mlist	definedfields	lstsize	amell	corr	
delip	fft	remez	rpem	syredi	
splin	lsq_splin	interp	linear_interpn	splin2d	
interp2d	cshep2d	eval_cshep2d	splin3d	interp3d	
bsplin3val	arl2_ius	ldiv	residu	code2str	
convstr	emptystr	length	part	str2code	
strcat	strindex	string	strsubst	ascii	
grep	tokens	addf	ldivf	mulf	
rdivf	subf	find	bool2s	or	
and	addmenu	delmenu	setmenu	unsetmenu	
x_choose	x_dialog	x_mdialog	x_message	x_message_modeless	
xchoicesi	xgetfile	x_print_dialog	dasrt	dassl	
impl	full	ludel	lufact	luget	
lusolve	nnz	sparse	spget	spchol	
readmps	fadj2sp	spcompack	ordmmd	blkfc1i	
blkslvi	inpnvi	sfinit	symfcti	bfinit	
mtlb_sparse	%msp_spget	%msp_full	scicosim	sctree	
sci_tree2	sci_tree3	sci_tree4	realtimeinit	realtime	
scicos_debug	scicos_debug_count	odedc	intg	int2d	
int3d	feval	bvode	loadwave	mclose	
meof	mget	mgetstr	mopen	mput	
mputstr	mseek	mtell	mclearerr	savewave	
mprintf	mfprintf	msprintf	mscanf	mfscanf	
msscanf	fscanfMat	fprintfMat	NumTokens	PlaySound	
beep	curblock	getblocklabel	getscicosvars	setscicosvars	
var2vec	vec2var	oldbesseli	oldbesselj	oldbesselk	
oldbessely	gamma	gammaln	dlgamma	calerf	
cdfbet	cdfbin	cdfchi	cdfchn	cdff	
cdffnc	cdfgam	cdfnbn	cdfnor	cdfpoi	
cdft	grand	legendre	beta	besseli	
besselj	besselk	bessely	besselh	TCL_DoOneEvent	
TCL_EvalFile	TCL_EvalStr	TCL_GetVar	TCL_SetVar	opentk	
close	findobj	%s_set	%s_get	TCL_gcf	
TCL_scf	TCL_GetVersion	TCL_UnsetVar	TCL_ExistVar	TCL_UpVar	
getfield	setfield	pvm_joingroup	pvm_lvgroup	pvm_gsize	
pvm_gettid	pvm_getinst	pvm_barrier	pvm_bcast	pvm_tasks	
pvm_config	pvm_addhosts	pvm_delhosts	pvm_parent	pvm_tidtohost	
pvm_set_timer	pvm_get_timer	pvm_mytid	pvm_exit	pvm_kill	
pvm_spawn	pvm_spawn_independent	pvm_recv	pvm_send	pvm_recv_var	
pvm_send_var	pvm_reduce	pvm_start	pvm_halt	pvm_error	
pvm_sci2f77	pvm_f772sci	pvm_probe	pvm_bufinfo	pvm_error_mode	
int32	int16	int8	inttype	double	
uint32	uint16	uint8	mgeti	%i_mput	
%i_abs	%i_diag	%i_triu	%i_tril	%i_sum	
%i_cumsum	%i_max	%i_min	%i_maxi	%i_mini	
readxbm	%i_p	iconvert	%i_matrix	qr	
svd	lsq	spec	inv	rcond	
chol	lu	slash	backslash	schur	
hess	det	balanc	sident	sorder	
findBD	rankqr	contr	mucomp	ricc	
hinf	dhinf	linmeq	dsaupd	dnaupd	
znaupd	dseupd	dneupd	zneupd	scicos_time	
duplicate	diffobjs	pointer_xproperty	phase_simulation	set_xproperty	
scicos_cpass2	set_blockerror	ctree2	ctree3	ctree4	
winopen	winqueryreg	getlongpathname	getshortpathname	ddeopen	
ddeclose	ddeexec	ddepoke	ddereq	ddeisopen	
ClipBoard	hidetoolbar	toolbar	setlanguagemenu	console	
about	mcisendstring	oemtochar	chartooem	printsetupbox	
toprint	settextcolor	

 Commands: 

if	else	for	while	end	
select	case	quit	exit	return	
help	what	who	pause	clear	
resume	then	do	apropos	abort	
break	elseif	pwd	function	endfunction	
clc	continue	
 
:
 ans  =
 
eye *
 
    1.  
 
[
]
 ans  =
 
     []
 
 
[ans
]
 ans  =
 
     []
 
 
'xxxxx'
 ans  =
 
 xxxxx   
 
'xx=xxx'
 ans  =
 
 xx=xxx   
 
 
disp xxx
 
 xxx   
 
//syntax with simple lhs
 
a=1
 a  =
 
    1.  
 
a=[1 2 3]
 a  =
 
!   1.    2.    3. !
 
a=[1 2 3
   4 5 6]
 a  =
 
!   1.    2.    3. !
!   4.    5.    6. !
 
a(2)=44
 a  =
 
!   1.     2.    3. !
!   44.    5.    6. !
 
 
clear c;c(5)=9
 c  =
 
!   0. !
!   0. !
!   0. !
!   0. !
!   9. !
 
 
[m,k]=max(1:3)
 k  =
 
    3.  
 m  =
 
    3.  
 
[d1f d2f d3f d4f] = (1,2,3,4)
 d4f  =
 
    4.  
 d3f  =
 
    3.  
 d2f  =
 
    2.  
 d1f  =
 
    1.  
 
 
if 10<>3 then x=disp('abcd'),end
 
 abcd   
 
if 10<>3 then disp('abcd'),end
 
 abcd   
 
if 10<>3  x=disp('abcd'),end//matlab syntax
 
 abcd   
 
if 10<>3  disp('abcd'),end//matlab syntax
 
 abcd   
 
 
 
if (1==1) then 'ok',end
 ans  =
 
 ok   
 
 
for k=1:2,disp(k),end
 
    1.  
 
    2.  
 
function foo(k),disp(k),endfunction;
 
for k=1:2,foo(k),end
 
    1.  
 
    2.  
 
 
for k=1:2,(1+1),end
 ans  =
 
    2.  
 ans  =
 
    2.  
 
 
for k=1:2,[m,k]=max(1:k),end
 k  =
 
    1.  
 m  =
 
    1.  
 k  =
 
    2.  
 m  =
 
    2.  
 
for k=1:2,[1,2],end
 ans  =
 
!   1.    2. !
 ans  =
 
!   1.    2. !
 
 
 
for k=1:3 k,end //matlab syntax
 k  =
 
    1.  
 k  =
 
    2.  
 k  =
 
    3.  
 
 
//nouvelles syntaxes
 
 
[a(1),b(2)]=(3,4)
 b  =
 
!   0. !
!   4. !
 a  =
 
!   3.     2.    3. !
!   44.    5.    6. !
 
 
[a(1),x,b(2)]=(3,4,5)
 b  =
 
!   0. !
!   5. !
 x  =
 
    4.  
 a  =
 
!   3.     2.    3. !
!   44.    5.    6. !
 
[a(1),b(1,2),x]=(3,4,5)
 x  =
 
    5.  
 b  =
 
!   0.    4. !
!   5.    0. !
 a  =
 
!   3.     2.    3. !
!   44.    5.    6. !
 
 
I1=list(2,3);I2=list(1,2);
 
clear x y;[x,y(I2(:))]=(11,12)
 y  =
 
!   0.    12. !
 x  =
 
    11.  
 
clear x y;[x(I1(:)),y]=(11,12)
 y  =
 
    12.  
 x  =
 
!   0.    0.    0.  !
!   0.    0.    11. !
 
clear x y;[x(I1(:)),y(I2(:))]=(11,12)
 y  =
 
!   0.    12. !
 x  =
 
!   0.    0.    0.  !
!   0.    0.    11. !
 
 
 
str_l=list();str_l(1)=1;str_l(1)
 ans  =
 
    1.  
 
 
l=list(1,2,3);l(3)=null()
 l  =
 
 
       l(1)
 
    1.  
 
       l(2)
 
    2.  
 
 
function []=foo()
  [noeuds,triang]=resume(1,2)
endfunction
Warning :redefining function: foo                     
 
 
foo();disp([noeuds,triang])
 
!   1.    2. !
 
 
 
function [a]=foo(x)
  a=33
  [noeuds,triang]=resume(45,sin(2))
endfunction
Warning :redefining function: foo                     
 
 
foo(%t)
 ans  =
 
    33.  
 
 
function [a]=foo(x)
  a=33
if x,  return,end
endfunction
Warning :redefining function: foo                     
 
 
foo(%t)
 ans  =
 
    33.  
 
 
foo();disp([noeuds,triang])
 
!   45.    0.9092974 !
 
 
deff('t1=foo()','t1(2)= 1','n');foo()
Warning :redefining function: foo                     
 
 ans  =
 
!   0. !
!   1. !
 
deff('t1=foo()','t1(2)= 1');foo()
Warning :redefining function: foo                     
 
 ans  =
 
!   0. !
!   1. !
 
 
deff('t1=foo()','t1=list();t1(1)= 44;','n');foo()
Warning :redefining function: foo                     
 
 ans  =
 
 
       ans(1)
 
    44.  
 
deff('t1=foo()','t1=list();t1(1)= 44;');foo()
Warning :redefining function: foo                     
 
 ans  =
 
 
       ans(1)
 
    44.  
 
 
deff('[a,b,x]=foo()','[a(1),b(1,2),x]=(3,4,5);','n');[a,b,x]=foo()
Warning :redefining function: foo                     
 
 x  =
 
    5.  
 b  =
 
!   0.    4. !
 a  =
 
    3.  
 
deff('[a,b,x]=foo()','[a(1),b(1,2),x]=(3,4,5);');[a,b,x]=foo()
Warning :redefining function: foo                     
 
 x  =
 
    5.  
 b  =
 
!   0.    4. !
 a  =
 
    3.  
 
 
 
 
function [a,b,x]=foo(),u=5;[a(1),b(1,2),x]=(3,4,u),a(2)=44,endfunction
Warning :redefining function: foo                     
 
 
[a,b,x]=foo()
 x  =
 
    5.  
 b  =
 
!   0.    4. !
 a  =
 
!   3.  !
!   44. !
 
 
function [a,b,x]=foo(),[a,b,x]=(3,4,5),endfunction
Warning :redefining function: foo                     
 
 
[a,b,x]=foo()
 x  =
 
    5.  
 b  =
 
    4.  
 a  =
 
    3.  
 
 
 
 
function x=foo(),INDX=list(2,3); x(INDX(:))=11; endfunction
Warning :redefining function: foo                     
 
 
foo()
 ans  =
 
!   0.    0.    0.  !
!   0.    0.    11. !
 
 
I1=list(2,3);I2=list(1,2);
 
function foo(),[x(I1(:)),y(I2(:))]=(11,12);disp(x,y), endfunction
Warning :redefining function: foo                     
 
 
foo()
 
!   0.    12. !
 
!   0.    0.    0.  !
!   0.    0.    11. !
 
 
 
function l=foo(),l=list(1,2,3);l(3)=null();endfunction
Warning :redefining function: foo                     
 
 
foo()
 ans  =
 
 
       ans(1)
 
    1.  
 
       ans(2)
 
    2.  
 
 
 
 
