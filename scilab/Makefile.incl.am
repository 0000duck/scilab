##########
### Sylvestre Ledru <sylvestre.ledru@inria.fr>
### INRIA - Scilab 2006/2007
### 
### Makefile included stuff
### Target, variable, suffixes which are supposed to be usefull in every makefile.am
##########

# Where all the Scilab stuff is installed (macros, help, ...)
mydatadir=$(pkgdatadir)/modules/$(modulename)


#SUFFIXES = .xml .sci .htm
SUFFIXES = .sci 
#.java .class .jar


# This target enables tests for Scilab
check-local: $(top_builddir)/scilab-bin
	@for check in $(MODULE_CHECKS) ; do \
		TESTS="$$TESTS'$$check';"; \
	done; \
	if test -f build.xml; then \
		$(ANT) checkstyle; \
	fi;\
	if test ! -z "$(MODULE_CHECKS)"; then \
		COMMAND="myTests=[$$TESTS];launchtest(pwd(),myTests);quit";\
		$(top_builddir)/bin/scilab -nwni -nb -e "$$COMMAND"; \
	fi

########################### JAVA ######################################
#### We had to create those rules because autotools does NOT provide
#### a kind of mechanism like C or Fortran sources :
#### libsciboolean_la_SOURCES = plop.c plip.f 
####
#### It is why those rules exist.
#######################################################################



# TODO : Renamed this variable
if GUI

build-java:
	@if test -f build.xml; then \
		$(ANT) jar; \
	fi

clean-java: 
	@if test -f build.xml; then \
		$(ANT) clean; \
	fi

endif


TARGETS_ALL=
if GUI
TARGETS_ALL+=build-java
endif

if SWIG
TARGETS_ALL+=build-swig
endif

if GIWS
TARGETS_ALL+=build-giws
endif

all-local: $(TARGETS_ALL)

# If the user request for the SWIG generation of the wrappers Java => C/C++ 
# We call the target swig-build on the variable SWIG_WRAPPERS

## build Swig Java => C wrappers
build-swig: $(SWIG_WRAPPERS)
	@SWIG_PACKAGENAME=org.scilab.modules.$(modulename); \
	SWIG_OUTDIR=src/java/org/scilab/modules/$(modulename)/; \
	if test ! -z "$(SWIG_WRAPPERS)"; then \
		for file in $(SWIG_WRAPPERS) ; do \
			echo "Swig process of $$file ..."; \
			$(SWIG_BIN) $(SWIG_JAVA) -package $$SWIG_PACKAGENAME  -outdir $$SWIG_OUTDIR $$file; \
		done; \
	fi


# If the user request for the SWIG generation of the wrappers Java => C/C++ 
# We call the target swig-build on the variable SWIG_WRAPPERS

## build Swig Java => C wrappers
build-giws: $(GIWS_WRAPPERS)
	@GIWS_OUTPUTDIR=src/jni/;\
	if test ! -z "$(GIWS_WRAPPERS)"; then \
		for file in $(GIWS_WRAPPERS) ; do \
			echo "Giws process of $$file ..."; \
			$(GIWS_BIN) --output-dir $$GIWS_OUTPUTDIR -s --description-file $$file; \
		done; \
	fi

################ MACROS ######################"
# Rule to build a macro
.sci.bin:
	-@( if test ! -x $(top_builddir)/scilab-bin; then \
	echo "Error : Cannot build $< : Scilab has not been build"; \
	else \
	echo "Creating $@"; \
	$(top_builddir)/bin/scilab -ns -nwni -e "exec('$(abs_srcdir)/$<');save('$(abs_srcdir)/$@');exit;"; \
	fi )

## Test purpose
macrossly:
	@( if test ! -x $(top_builddir)/scilab-bin; then \
	echo "Error : Cannot build $< : Scilab has not been build"; \
	else \
	LD_LIBRARY_PATH="$(JAVA_HOME)/jre/lib/i386/:$(JAVA_HOME)/jre/lib/i386/server/:$(JAVA_HOME)/jre/lib/i386/native_threads/:$LD_LIBRARY_PATH"; 	export LD_LIBRARY_PATH; \
	SCI=`cd $(top_builddir); pwd;`; export SCI; \
	echo $$SCI/modules/functions/macros/genlib.bin; \
	if test ! -f $$SCI/modules/functions/macros/genlib.bin; then \
	(cd $$SCI; $$SCI/scilab-bin -ns -nwni -f $$SCI/modules/functions/scripts/buildmacros/buildmacros.sce;) \
	fi; \
	echo $(top_builddir)/scilab-bin -ns -nwni -f macros/buildmacros.sce; \
	$(top_builddir)/scilab-bin -nwni -f macros/buildmacros.sce; \
	fi )


########### INSTALL DOCUMENTATION ###################
# Install HTML files into the right target
# We do not use the automake mechanism (libxxxx_la_help_fr_DATA) because
# automake needs the html files to be present which is not the case when
# we are building Scilab

# Where it should be installed
pkgdocdir = $(mydatadir)
# Which directories we have to install
DOCDIRS = help/fr_FR help/en_US
# What is the mask of the help output
DOCMASK = *.htm
# What is the mask of the help source
DOCMASKXML = *.xml
install-html-local:
	$(mkinstalldirs) $(DESTDIR)$(pkgdocdir)
	@for dir in $(DOCDIRS) ; do \
	 if test -d $$dir; then \
	  $(mkinstalldirs) $(DESTDIR)$(pkgdocdir)/$$dir && \
		if ls -lLd $(srcdir)/$$dir/$(DOCMASK) >/dev/null 2>&1; then \
		  for file in $(srcdir)/$$dir/$(DOCMASK) ; do \
		    echo "$(INSTALL_DATA) $$file $(DESTDIR)$(pkgdocdir)/$$dir" ; \
	    	$(INSTALL_DATA) "$$file" $(DESTDIR)$(pkgdocdir)/$$dir ; \
		  done ; \
		fi; \
	 fi; \
	done
if INSTALL_HELP_XML 
# If the user wants the help sources to be installed
	@for dir in $(DOCDIRS) ; do \
	 if test -d $$dir; then \
	  $(mkinstalldirs) $(DESTDIR)$(pkgdocdir)/$$dir && \
		if ls -lLd $(srcdir)/$$dir/$(DOCMASKXML) >/dev/null 2>&1; then \
		  for file in $(srcdir)/$$dir/$(DOCMASKXML) ; do \
		    echo "$(INSTALL_DATA) $$file $(DESTDIR)$(pkgdocdir)/$$dir" ; \
	    	$(INSTALL_DATA) "$$file" $(DESTDIR)$(pkgdocdir)/$$dir ; \
		  done ; \
		fi; \
	 fi; \
	done
endif

########### INSTALL DATA ###################
# Install macros
# Where it should be installed
pkgmacrosdir = $(mydatadir)
# Which directory we process
MACRODIRS = macros/
# Mask of the Scilab sources macros
MACROMASK = *.sci
# Mask of the Scilab executable sources macros
MACROBUILDMASK = *.sce
# Mask of the Scilab compiled macros
MACROBINMASK = *.bin
# List of the function of a module
FUNCTION_NAMES=macros/names
# Localisation directory name
LOCALISATIONDIRS=locales/fr_FR/ locales/en_US/
# Chapter file 
HELP_CHAPTERDIR=help/en_US/
HELP_CHAPTERFILE=addchapter.sce
# Where to export JAVA files (.jar)
JARDIR=jar/
# JAR files
JARMASK=*.jar
install-data-local:
	@if test -f $(FUNCTION_NAMES); then \
		echo $(mkinstalldirs) $(DESTDIR)$(pkgmacrosdir); \
		$(mkinstalldirs) $(DESTDIR)$(pkgmacrosdir); \
		echo $(mkinstalldirs) $(DESTDIR)$(pkgmacrosdir)/$(MACRODIRS); \
		$(mkinstalldirs) $(DESTDIR)$(pkgmacrosdir)/$(MACRODIRS); \
		echo "$(INSTALL_DATA) $(FUNCTION_NAMES) $(DESTDIR)$(pkgmacrosdir)/macros/"; \
		$(INSTALL_DATA) $(FUNCTION_NAMES) $(DESTDIR)$(pkgmacrosdir)/$(MACRODIRS); \
	fi
# Install the help chapter
	@HELPFILE=$(HELP_CHAPTERDIR)$(HELP_CHAPTERFILE); \
	if test -f $$HELPFILE; then \
		echo $(mkinstalldirs) $(DESTDIR)$(pkgdocdir)/$(HELP_CHAPTERDIR); \
		$(mkinstalldirs) $(DESTDIR)$(pkgdocdir)/$(HELP_CHAPTERDIR); \
		echo $(INSTALL_DATA) $$HELPFILE $(DESTDIR)$(pkgdocdir)/$$HELPFILE; \
		$(INSTALL_DATA) $$HELPFILE $(DESTDIR)$(pkgdocdir)/$$HELPFILE; \
	fi
# Install the macros
	@for dir in $(MACRODIRS) $(MACROSDIRSEXT) ; do \
	  $(mkinstalldirs) $(DESTDIR)$(pkgmacrosdir)/$$dir && \
		if test -d $(srcdir)/$$dir/; then \
		  for file in `ls -1 $(srcdir)/$$dir/$(MACROMASK) $(srcdir)/$$dir/$(MACROBINMASK) $(srcdir)/$$dir/$(MACROBUILDMASK) $(srcdir)/$$dir/lib 2>/dev/null`; do \
		    echo "$(INSTALL_DATA) $$file $(DESTDIR)$(pkgmacrosdir)/$$dir" ; \
	    	$(INSTALL_DATA) "$$file" $(DESTDIR)$(pkgmacrosdir)/$$dir ; \
		  done; \
		fi; \
	done
# Install java files (.jar)
	@if ls -lLd $(srcdir)/$(JARDIR)$(JARMASK) >/dev/null 2>&1; then \
    $(mkinstalldirs) $(DESTDIR)$(pkgdocdir)/$(JARDIR); \
	  for file in $(srcdir)/$(JARDIR)$(JARMASK); do\
		    echo "$(INSTALL_DATA) $$file $(DESTDIR)$(pkgdocdir)/$(JARDIR)" ; \
	    	$(INSTALL_DATA) "$$file" $(DESTDIR)$(pkgdocdir)/$(JARDIR) ; \
	  done ; \
	fi


########### CLEAN ###################
# Clean macros and help (generated automatically by Scilab)
if GUI
clean-local: clean-java
else
clean-local:
endif
# Removes macros (*.bin generated from .sci)
	@for dir in $(MACRODIRS) $(MACROSDIRSEXT) ; do \
		echo "rm -f $(srcdir)/$$dir/$(MACROBINMASK)"; \
		rm -f $(srcdir)/$$dir/$(MACROBINMASK); \
	done
# Removes documentation (*.htm generated from .xml) 
	@for dir in $(DOCDIRS) ; do \
		 if test -d $$dir; then \
			echo "rm -f $(srcdir)/$$dir/$(DOCMASK)"; \
			rm -f $(srcdir)/$$dir/$(DOCMASK); \
		fi; \
	done

build-macros: $(top_builddir)/scilab-bin $(top_builddir)/bin/scilab $(srcdir)/$(MACRODIRS)/$(MACROMASK)
	-@( 	$(top_builddir)/bin/scilab -ns -nwni -e "exec('macros/buildmacros.sce');quit;";\
	)
