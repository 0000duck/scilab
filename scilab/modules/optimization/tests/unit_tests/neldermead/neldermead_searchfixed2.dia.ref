// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2008-2009 - INRIA - Michael Baudin
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
//
// assert_close --
//   Returns 1 if the two real matrices computed and expected are close,
//   i.e. if the relative distance between computed and expected is lesser than epsilon.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
function flag = assert_close ( computed, expected, epsilon )
  if expected==0.0 then
    shift = norm(computed-expected);
  else
    shift = norm(computed-expected)/norm(expected);
  end
  if shift < epsilon then
    flag = 1;
  else
    flag = 0;
  end
  if flag <> 1 then bugmes();quit;end
endfunction
//
// assert_equal --
//   Returns 1 if the two real matrices computed and expected are equal.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
function flag = assert_equal ( computed , expected )
  if computed==expected then
    flag = 1;
  else
    flag = 0;
  end
  if flag <> 1 then bugmes();quit;end
endfunction
function y = rosenbrock (x)
  y = 100*(x(2)-x(1)^2)^2 + (1-x(1))^2;
endfunction
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",200);
nm = neldermead_configure(nm,"-maxfunevals",200);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","fixed");
//nm = neldermead_configure(nm,"-verbose",1);
nm = neldermead_configure(nm,"-verbosetermination",0);
nm = neldermead_search(nm);
// With fixed-size simplices, one cannot lead the 
// simplex to the optimum.
// Check optimum point
xopt = neldermead_get(nm,"-xopt");
assert_close ( xopt , [1.0;1.0], 1e1 );
// Check optimum point value
fopt = neldermead_get(nm,"-fopt");
assert_close ( fopt , 0.0 , 1e1 );
// Check status
status = neldermead_get(nm,"-status");
assert_equal ( status , "maxfuneval" );
// Cleanup
nm = neldermead_destroy(nm);
// Check that the verbose mode is functionnal
// Few iterations are necessary to check this
// Many iterations costs a lot more in time.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",5);
nm = neldermead_configure(nm,"-maxfunevals",200);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-verbose",1);
nm = neldermead_configure(nm,"-verbosetermination",0);
nm = neldermead_search(nm);
Function Evaluation #1 is [24.2] at [-1.2 1]

Function Evaluation #2 is [93.6] at [-0.2 1]

Function Evaluation #3 is [36.2] at [-1.2 2]

Sort

=================================================================

Iteration #1 (total = 1)

Function Eval #3

Xopt : -1.2 1

Fopt : 2.420000e+001

DeltaFv : 6.940000e+001

Center : -0.8666667 1.3333333

Size : 1.000000e+000

Vertex #1/3 : fv=24.200000, x=-1.200000 1.000000

Vertex #2/3 : fv=36.200000, x=-1.200000 2.000000

Vertex #3/3 : fv=93.600000, x=-0.200000 1.000000

Reflect

xbar=-1.2 1.5

Function Evaluation #4 is [816.8] at [-2.2 2]

xr=-2.2 2, f(xr)=816.800000

  > Perform Shrink

Function Evaluation #5 is [5.2] at [-1.2 1.5]

Function Evaluation #6 is [28.9] at [-0.7 1]

=================================================================

Iteration #2 (total = 2)

Function Eval #6

Xopt : -1.2 1.5

Fopt : 5.200000e+000

DeltaFv : 2.370000e+001

Center : -1.0333333 1.1666667

Size : 7.071068e-001

Vertex #1/3 : fv=5.200000, x=-1.200000 1.500000

Vertex #2/3 : fv=24.200000, x=-1.200000 1.000000

Vertex #3/3 : fv=28.900000, x=-0.700000 1.000000

Reflect

xbar=-1.2 1.25

Function Evaluation #7 is [200.5] at [-1.7 1.5]

xr=-1.7 1.5, f(xr)=200.500000

  > Perform Shrink

Function Evaluation #8 is [8.45] at [-1.2 1.25]

Function Evaluation #9 is [15.878125] at [-0.95 1.25]

=================================================================

Iteration #3 (total = 3)

Function Eval #9

Xopt : -1.2 1.5

Fopt : 5.200000e+000

DeltaFv : 1.067813e+001

Center : -1.1166667 1.3333333

Size : 3.535534e-001

Vertex #1/3 : fv=5.200000, x=-1.200000 1.500000

Vertex #2/3 : fv=8.450000, x=-1.200000 1.250000

Vertex #3/3 : fv=15.878125, x=-0.950000 1.250000

Reflect

xbar=-1.2 1.375

Function Evaluation #10 is [42.303125] at [-1.45 1.5]

xr=-1.45 1.5, f(xr)=42.303125

  > Perform Shrink

Function Evaluation #11 is [5.2625] at [-1.2 1.375]

Function Evaluation #12 is [9.1181641] at [-1.075 1.375]

=================================================================

Iteration #4 (total = 4)

Function Eval #12

Xopt : -1.2 1.5

Fopt : 5.200000e+000

DeltaFv : 3.918164e+000

Center : -1.1583333 1.4166667

Size : 1.767767e-001

Vertex #1/3 : fv=5.200000, x=-1.200000 1.500000

Vertex #2/3 : fv=5.262500, x=-1.200000 1.375000

Vertex #3/3 : fv=9.118164, x=-1.075000 1.375000

Reflect

xbar=-1.2 1.4375

Function Evaluation #13 is [11.940039] at [-1.325 1.5]

xr=-1.325 1.5, f(xr)=11.940039

  > Perform Shrink

Function Evaluation #14 is [4.840625] at [-1.2 1.4375]

Function Evaluation #15 is [6.6308228] at [-1.1375 1.4375]

=================================================================

Iteration #5 (total = 5)

Function Eval #15

Xopt : -1.2 1.4375

Fopt : 4.840625e+000

DeltaFv : 1.790198e+000

Center : -1.1791667 1.4583333

Size : 6.250000e-002

Vertex #1/3 : fv=4.840625, x=-1.200000 1.437500

Vertex #2/3 : fv=5.200000, x=-1.200000 1.500000

Vertex #3/3 : fv=6.630823, x=-1.137500 1.437500

Terminate with status : maxiter

status = neldermead_get(nm,"-status");
assert_equal ( status , "maxiter" );
nm = neldermead_destroy(nm);
