<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2007-2008 - INRIA
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<!DOCTYPE MAN SYSTEM "../../../../modules/helptools/help.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>

  <TITLE>mlist</TITLE>

  <TYPE>Scilab Function</TYPE>

  <DATE>$LastChangedDate$</DATE>

  <SHORT_DESCRIPTION name="mlist">Scilab object, matrix oriented typed list
  definition.</SHORT_DESCRIPTION>

  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>mlist(typ,a1,....an )</CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>

  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>typ</PARAM_NAME>

        <PARAM_DESCRIPTION>
          <SP>: vector of character strings</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
        <PARAM_NAME>ai</PARAM_NAME>

        <PARAM_DESCRIPTION>
          <SP>: any Scilab object (<VERB>matrix, list,string...</VERB>).</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>

  <DESCRIPTION>
    <SP><VERB>mlist</VERB> object are very similar to <LINK>tlist</LINK> objects.
    The only difference concerns the <LINK>extraction</LINK>  and <LINK>insertion</LINK>   syntax:
    if <VERB>M</VERB> is an mlist, for any index <VERB>i</VERB> which is
    not a field name, <VERB>M(i)</VERB> is no more the <VERB>i</VERB>th
    field of the list.</SP>
    <P> The semantic of the extraction and insertion syntax should be given by
    an <LINK>overloading</LINK> functions.</P>

    <P>The overloading function for extraction syntax <VERB>b=a(i1,...,in)</VERB>
    has the following calling sequence: <VERB>b=%&lt;type_of_a&gt;_e_(i1,...,in,a)</VERB> </P>
    <P>and the syntax
    <VERB>[x1,..,xm]=a(i1,...,in)</VERB> has the following calling sequence:
    <VERB>[x1,..,xm]=%&lt;type_of_a&gt;_e_(i1,...,in,a)</VERB></P>
    <P></P>
    <P> The overloading function associated to the insertion syntax
    <VERB>a(i1,...,in)=b</VERB>  has the following calling sequence:
    <VERB>a=%&lt;type_of_b&gt;_i_&lt;type_of_a&gt;(i1,...,in,b,a)</VERB>. </P>
    <P></P>
    <P>mlist fields must then be designed by their names. They can also be
    handled using the <VERB>getfield</VERB> and <VERB>setfield</VERB>
    functions.</P>


  </DESCRIPTION>

  <EXAMPLE><![CDATA[

M=mlist(['V','name','value'],['a','b';'c' 'd'],[1 2; 3 4]);
//define display
function %V_p(M),disp(M.name+':'+string(M.value)),endfunction

//define extraction operation
function r=%V_e(varargin)
   M=varargin($)
   r=mlist(['V','name','value'],M.name(varargin(1:$-1)),M.value(varargin(1:$-1)))
endfunction
M(2,:) // the second row of  M
M.value

//define insertion operations
function M=%V_i_V(varargin)
   M=varargin($)
   N=varargin($-1)
   M.value(varargin(1:$-2))=N.value
   M.name(varargin(1:$-2))=N.name
endfunction
M(1,1)=M(2,2)

function M=%s_i_V(varargin) //insertion of a regular matrix into a V matrix
   M=varargin($)
   N=varargin($-1)
   M.value(varargin(1:$-2))=N
   M.name(varargin(1:$-2))=emptystr(N)
endfunction
M(1,1)=44



//tlist case
M=tlist(['V','name','value'],['a','b';'c' 'd'],[1 2; 3 4]);
M(2)
M(2)='a'+string([1 2;3 4])


M('name')




  ]]></EXAMPLE>

  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>tlist</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>list</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>overloading</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>getfield</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>setfield</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
