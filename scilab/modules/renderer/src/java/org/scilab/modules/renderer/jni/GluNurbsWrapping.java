/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.scilab.modules.renderer.jni;


 /** 
  * Test array calling
  * @author Jean-Baptiste Silvy
  * @copyright INRIA 2007 
  */
public class GluNurbsWrapping {

 /**
  * Constructor. Should not be called.
  */
 protected GluNurbsWrapping() {
	throw new UnsupportedOperationException();
 }
  
 /**
  * Wrapping of gluNewNurbsRenderer()
  * @return new nurbs renderer
  */
public static SWIGTYPE_p_GLUnurbsObj gluNewNurbsRendererWrapping() {
    long cPtr = GluNurbsWrappingJNI.gluNewNurbsRendererWrapping();
    return (cPtr == 0) ? null : new SWIGTYPE_p_GLUnurbsObj(cPtr, false);
  }

  
 /**
  * Wrapping of gluDeleteNurbsRenderer(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to destroy
  */
public static void gluDeleteNurbsRendererWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluDeleteNurbsRendererWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluBeginCurve(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluBeginCurveWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluBeginCurveWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluEndCurve(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluEndCurveWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluEndCurveWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluNurbsCurve( GLUnurbsObj *, GLint, GLfloat *, GLint, GLfloat *, GLint, GLenum)
  * @param nurbsObj nurbs renderer to use
  * @param nknots number of nots
  * @param knot array of knot
  * @param stride offset
  * @param ctlarray array of control points
  * @param order order of the nurbs curve
  * @param type attribute of the curve
  */
public static void gluNurbsCurveWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, int nknots, float[] knot, int stride, float[] ctlarray, int order, int type) {
    GluNurbsWrappingJNI.gluNurbsCurveWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), nknots, knot, stride, ctlarray, order, type);
  }

  
 /**
  * Wrapping of gluBeginSurface(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluBeginSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluBeginSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluEndSurface(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluEndSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluEndSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluNubrsCurve( GLUnurbsObj *, GLint, GLfloat *, GLint, GLfloat *, GLint, GLint, GLfloat, GLint, GLint GLenum)
  * @param nurbsObj    nurbs renderer to use
  * @param sknot_count number of knot in first dimension
  * @param sknot       knot values for first dimension
  * @param tknot_count number of knot in second dimension
  * @param tknot       knot values for second dimension
  * @param s_stride    offest for first dimension
  * @param t_stride    offset for second dimension
  * @param ctlarray    array of control points
  * @param sorder      order for first dimension
  * @param torder      order for second dimension
  * @param type        attribute of the curve
  */
public static void gluNurbsSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, int sknot_count, float[] sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int type) {
    GluNurbsWrappingJNI.gluNurbsSurfaceWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, type);
  }

  
 /**
  * Wrapping of gluBeginTrim(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluBeginTrimWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluBeginTrimWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluEndTrim(GLUnurbsObj *)
  * @param nurbsObj nurbs renderer to use
  */
public static void gluEndTrimWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj) {
    GluNurbsWrappingJNI.gluEndTrimWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj));
  }

  
 /**
  * Wrapping of gluPwlCurve(GLUnurbsObj *, GLint, GLfloat *, GLint, GLenum)
  * @param nurbsObj nurbs renderer to use
  * @param count number of points on the curve
  * @param array array containing curve points
  * @param stride offset between values and curve points
  * @param type type of triming region
  */
public static void gluPwlCurveWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, int count, float[] array, int stride, int type) {
    GluNurbsWrappingJNI.gluPwlCurveWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), count, array, stride, type);
  }

  
 /**
  * Wrapping of gluNurbsProperty(GLUnurbsObj *, GLenum, GLfloat)
  * @param nurbsObj nurbs renderer to use
  * @param property type of property to modify
  * @param value new value to set
  */
public static void gluNurbsPropertyWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, int property, float value) {
    GluNurbsWrappingJNI.gluNurbsPropertyWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), property, value);
  }

  
 /**
  * Wrapping of gluGetNurbsProperty(GLUnurbsObj *, GLenum, GLfloat *)
  * @param nurbsObj nurbs renderer to use
  * @param property type of property to get
  * @return queried value
  */
public static float gluGetNurbsPropertyWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, int property) {
    return GluNurbsWrappingJNI.gluGetNurbsPropertyWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), property);
  }

  
 /**
  * Wrapping of gluLoadSamplingMatrices(GLUnurbsObj *, const GLfloat[16], const GLfloat[16], const GLint[4])
  * @param nurbsObj nurbs renderer to use
  * @param modelMatrix model view Matrix (4x4)
  * @param projMatrix projection Matrix (4x4).
  * @param viewPort current viewport (x,y,w,h)
  */
public static void gluLoadSamplingMatricesWrapping(SWIGTYPE_p_GLUnurbsObj nurbsObj, float[] modelMatrix, float[] projMatrix, int[] viewPort) {
    GluNurbsWrappingJNI.gluLoadSamplingMatricesWrapping(SWIGTYPE_p_GLUnurbsObj.getCPtr(nurbsObj), modelMatrix, projMatrix, viewPort);
  }

}
