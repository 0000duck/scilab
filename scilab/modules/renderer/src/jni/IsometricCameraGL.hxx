/* Generated by GIWS (version 0.9.4) */
/*

Copyright 2007 INRIA

Author : Sylvestre Ledru

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/


#ifndef __ORG_SCILAB_MODULES_RENDERER_SUBWINDRAWING_ISOMETRICCAMERAGL__
#define __ORG_SCILAB_MODULES_RENDERER_SUBWINDRAWING_ISOMETRICCAMERAGL__
#include <string>
#include <iostream>
#include <stdlib.h>
#include <jni.h>

namespace org_scilab_modules_renderer_subwinDrawing {

class IsometricCameraGL {
private:
JavaVM * jvm;
jobject instance;

jclass instanceClass; // cache class
jmethodID voiddisplayID; // cache method id
jmethodID voidinitializeDrawingjintID; // cache method id
jmethodID voidendDrawingID; // cache method id
jmethodID voidshowjintID; // cache method id
jmethodID voiddestroyjintID; // cache method id
jmethodID voidsetFigureIndexjintID; // cache method id
jmethodID voidsetViewingAreajdoublejdoublejdoublejdoubleID; // cache method id
jmethodID voidsetNormalizationParametersjdoublejdoublejdoublejdoublejdoublejdoubleID; // cache method id
jmethodID voidsetAxesRotationParametersjdoublejdoublejdoublejdoublejdoubleID; // cache method id
jmethodID voidsetFittingScalejdoublejdoublejdoubleID; // cache method id
jmethodID voidplaceCameraID; // cache method id
jmethodID voidreplaceCameraID; // cache method id
jmethodID voidrevertXAxisID; // cache method id
jmethodID voidrevertYAxisID; // cache method id
jmethodID voidrevertZAxisID; // cache method id
jmethodID jintArraygetPixelCoordinatesjdoublejdoublejdoubleID; // cache method id
jmethodID jintArrayget2dViewPixelCoordinatesjdoublejdoublejdoubleID; // cache method id


/**
* Get the environment matching to the current thread.
*/
JNIEnv * getCurrentEnv();

public:
// Constructor
/**
* Create a wrapping of the object from a JNIEnv.
* It will call the default constructor
* @param JEnv_ the Java Env
*/
IsometricCameraGL(JavaVM * jvm_);
/**
* Create a wrapping of an already existing object from a JNIEnv.
* The object must have already been instantiated
* @param JEnv_ the Java Env
* @param JObj the object
*/
IsometricCameraGL(JavaVM * jvm_, jobject JObj);

// Destructor
~IsometricCameraGL();

// Generic method
// Synchronization methods
/**
* Enter monitor associated with the object.
* Equivalent of creating a "synchronized(obj)" scope in Java.
*/
void synchronize();

/**
* Exit monitor associated with the object.
* Equivalent of ending a "synchronized(obj)" scope.
*/
void endSynchronize();

// Methods
void display();

void initializeDrawing(long figureIndex);

void endDrawing();

void show(long figureIndex);

void destroy(long parentFigureIndex);

void setFigureIndex(long figureIndex);

void setViewingArea(double transX, double transY, double scaleX, double scaleY);

void setNormalizationParameters(double normalizeScaleX, double normalizeScaleY, double normalizeScaleZ, double transX, double transY, double transZ);

void setAxesRotationParameters(double centerX, double centerY, double centerZ, double alpha, double theta);

void setFittingScale(double scaleX, double scaleY, double scaleZ);

void placeCamera();

void replaceCamera();

void revertXAxis();

void revertYAxis();

void revertZAxis();

long * getPixelCoordinates(double userCoordX, double userCoordY, double userCoordZ);

long * get2dViewPixelCoordinates(double userCoordX, double userCoordY, double userCoordZ);


};


}
#endif
