#include "TicksDrawerGL.hxx"
/* Generated by GIWS (version 1.0) */
/*

Copyright 2007 INRIA

Author : Sylvestre Ledru

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_renderer_subwinDrawing {

// Returns the current env

JNIEnv * TicksDrawerGL::getCurrentEnv() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);
return curEnv;
}
// Destructor

TicksDrawerGL::~TicksDrawerGL() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
curEnv->DeleteGlobalRef(this->stringArrayClass);}
// Constructors

TicksDrawerGL::TicksDrawerGL(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
std::cerr << "Could not get the Class " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass) ;
if (this->instanceClass == NULL) {
std::cerr << "Could not create a Global Ref of " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
std::cerr << "Could not retrieve the constructor of the class " << this->className() << " with the profile : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
std::cerr << "Could not instantiate the object " << this->className() << " with the constructor : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
std::cerr << "Could not create a new global ref of " << this->className() << std::endl;
exit(EXIT_FAILURE);
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
voiddisplayID=NULL; 
voidinitializeDrawingjintID=NULL; 
voidendDrawingID=NULL; 
voidshowjintID=NULL; 
voiddestroyjintID=NULL; 
voidsetFigureIndexjintID=NULL; 
jbooleancheckTicksjdoubleArrayjobjectArrayID=NULL; 

jclass localStringArrayClass = curEnv->FindClass("Ljava/lang/String;");
stringArrayClass = (jclass) curEnv->NewGlobalRef(localStringArrayClass);
curEnv->DeleteLocalRef(localStringArrayClass);
jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID=NULL; 
jbooleancheckTicksID=NULL; 
jdoubledrawTicksID=NULL; 
voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID=NULL; 
voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID=NULL; 
voidsetTicksLabelsjobjectArrayID=NULL; 
voidsetTicksLabelsjobjectArrayjobjectArrayID=NULL; 
voidsetTicksDirectionjdoublejdoublejdoubleID=NULL; 
voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID=NULL; 
voidsetAxisParametersjintjfloatjintjintjdoublejintID=NULL; 


}

TicksDrawerGL::TicksDrawerGL(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass);
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
               std::cerr << "Could not create a Global Ref of " << this->instanceClass <<  std::endl;
               exit(EXIT_FAILURE);
   
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
               std::cerr << "Could not create a new global ref of " << this->instanceClass << std::endl;
               exit(EXIT_FAILURE);
        }
        /* Methods ID set to NULL */
        voiddisplayID=NULL; 
voidinitializeDrawingjintID=NULL; 
voidendDrawingID=NULL; 
voidshowjintID=NULL; 
voiddestroyjintID=NULL; 
voidsetFigureIndexjintID=NULL; 
jbooleancheckTicksjdoubleArrayjobjectArrayID=NULL; 

jclass localStringArrayClass = curEnv->FindClass("Ljava/lang/String;");
stringArrayClass = (jclass) curEnv->NewGlobalRef(localStringArrayClass);
curEnv->DeleteLocalRef(localStringArrayClass);
jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID=NULL; 
jbooleancheckTicksID=NULL; 
jdoubledrawTicksID=NULL; 
voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID=NULL; 
voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID=NULL; 
voidsetTicksLabelsjobjectArrayID=NULL; 
voidsetTicksLabelsjobjectArrayjobjectArrayID=NULL; 
voidsetTicksDirectionjdoublejdoublejdoubleID=NULL; 
voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID=NULL; 
voidsetAxisParametersjintjfloatjintjintjdoublejintID=NULL; 


}

// Generic methods


void TicksDrawerGL::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
std::cerr << "Fail to enter monitor." << std::endl;
exit(EXIT_FAILURE);
}
}


void TicksDrawerGL::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
std::cerr << "Fail to exit monitor." << std::endl;
exit(EXIT_FAILURE);
}
}

// Method(s)

void TicksDrawerGL::display (){

JNIEnv * curEnv = getCurrentEnv();

if (voiddisplayID==NULL) { /* Use the cache Luke */ voiddisplayID = curEnv->GetMethodID(this->instanceClass, "display", "()V" ) ;
if (voiddisplayID == NULL) {
std::cerr << "Could not access to the method " << "display" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voiddisplayID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::initializeDrawing (long figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voidinitializeDrawingjintID==NULL) { /* Use the cache Luke */ voidinitializeDrawingjintID = curEnv->GetMethodID(this->instanceClass, "initializeDrawing", "(I)V" ) ;
if (voidinitializeDrawingjintID == NULL) {
std::cerr << "Could not access to the method " << "initializeDrawing" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidinitializeDrawingjintID ,figureIndex);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::endDrawing (){

JNIEnv * curEnv = getCurrentEnv();

if (voidendDrawingID==NULL) { /* Use the cache Luke */ voidendDrawingID = curEnv->GetMethodID(this->instanceClass, "endDrawing", "()V" ) ;
if (voidendDrawingID == NULL) {
std::cerr << "Could not access to the method " << "endDrawing" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidendDrawingID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::show (long figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voidshowjintID==NULL) { /* Use the cache Luke */ voidshowjintID = curEnv->GetMethodID(this->instanceClass, "show", "(I)V" ) ;
if (voidshowjintID == NULL) {
std::cerr << "Could not access to the method " << "show" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidshowjintID ,figureIndex);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::destroy (long figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voiddestroyjintID==NULL) { /* Use the cache Luke */ voiddestroyjintID = curEnv->GetMethodID(this->instanceClass, "destroy", "(I)V" ) ;
if (voiddestroyjintID == NULL) {
std::cerr << "Could not access to the method " << "destroy" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voiddestroyjintID ,figureIndex);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::setFigureIndex (long figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetFigureIndexjintID==NULL) { /* Use the cache Luke */ voidsetFigureIndexjintID = curEnv->GetMethodID(this->instanceClass, "setFigureIndex", "(I)V" ) ;
if (voidsetFigureIndexjintID == NULL) {
std::cerr << "Could not access to the method " << "setFigureIndex" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidsetFigureIndexjintID ,figureIndex);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

bool TicksDrawerGL::checkTicks (double * ticksPositions, int ticksPositionsSize, char ** ticksLabels, int ticksLabelsSize){

JNIEnv * curEnv = getCurrentEnv();

if (jbooleancheckTicksjdoubleArrayjobjectArrayID==NULL) { /* Use the cache Luke */ jbooleancheckTicksjdoubleArrayjobjectArrayID = curEnv->GetMethodID(this->instanceClass, "checkTicks", "([D[Ljava/lang/String;)Z" ) ;
if (jbooleancheckTicksjdoubleArrayjobjectArrayID == NULL) {
std::cerr << "Could not access to the method " << "checkTicks" << std::endl;
exit(EXIT_FAILURE);
}
}
jdoubleArray ticksPositions_ = curEnv->NewDoubleArray( ticksPositionsSize ) ;
curEnv->SetDoubleArrayRegion( ticksPositions_, 0, ticksPositionsSize, (jdouble*) ticksPositions ) ;
jclass stringArrayClass = curEnv->FindClass("Ljava/lang/String;");

// create java array of strings.
jobjectArray ticksLabels_ = curEnv->NewObjectArray( ticksLabelsSize, stringArrayClass, NULL);
if (ticksLabels_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < ticksLabelsSize; i++)
{
jstring TempString = curEnv->NewStringUTF( ticksLabels[i] );
if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( ticksLabels_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
                        jboolean res =  (jboolean) curEnv->CallBooleanMethod( this->instance, jbooleancheckTicksjdoubleArrayjobjectArrayID ,ticksPositions_, ticksLabels_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(ticksPositions_);
curEnv->DeleteLocalRef(ticksLabels_);

return (res == JNI_TRUE);

}

double TicksDrawerGL::drawTicks (double * ticksPositions, int ticksPositionsSize, char ** ticksLabels, int ticksLabelsSize, double * subticksPositions, int subticksPositionsSize){

JNIEnv * curEnv = getCurrentEnv();

if (jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID==NULL) { /* Use the cache Luke */ jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID = curEnv->GetMethodID(this->instanceClass, "drawTicks", "([D[Ljava/lang/String;[D)D" ) ;
if (jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID == NULL) {
std::cerr << "Could not access to the method " << "drawTicks" << std::endl;
exit(EXIT_FAILURE);
}
}
jdoubleArray ticksPositions_ = curEnv->NewDoubleArray( ticksPositionsSize ) ;
curEnv->SetDoubleArrayRegion( ticksPositions_, 0, ticksPositionsSize, (jdouble*) ticksPositions ) ;
jclass stringArrayClass = curEnv->FindClass("Ljava/lang/String;");

// create java array of strings.
jobjectArray ticksLabels_ = curEnv->NewObjectArray( ticksLabelsSize, stringArrayClass, NULL);
if (ticksLabels_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < ticksLabelsSize; i++)
{
jstring TempString = curEnv->NewStringUTF( ticksLabels[i] );
if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( ticksLabels_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
jdoubleArray subticksPositions_ = curEnv->NewDoubleArray( subticksPositionsSize ) ;
curEnv->SetDoubleArrayRegion( subticksPositions_, 0, subticksPositionsSize, (jdouble*) subticksPositions ) ;

                        jdouble res =  (jdouble) curEnv->CallDoubleMethod( this->instance, jdoubledrawTicksjdoubleArrayjobjectArrayjdoubleArrayID ,ticksPositions_, ticksLabels_, subticksPositions_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(ticksPositions_);
curEnv->DeleteLocalRef(ticksLabels_);
curEnv->DeleteLocalRef(subticksPositions_);

return res;

}

bool TicksDrawerGL::checkTicks (){

JNIEnv * curEnv = getCurrentEnv();

if (jbooleancheckTicksID==NULL) { /* Use the cache Luke */ jbooleancheckTicksID = curEnv->GetMethodID(this->instanceClass, "checkTicks", "()Z" ) ;
if (jbooleancheckTicksID == NULL) {
std::cerr << "Could not access to the method " << "checkTicks" << std::endl;
exit(EXIT_FAILURE);
}
}
                        jboolean res =  (jboolean) curEnv->CallBooleanMethod( this->instance, jbooleancheckTicksID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return (res == JNI_TRUE);

}

double TicksDrawerGL::drawTicks (){

JNIEnv * curEnv = getCurrentEnv();

if (jdoubledrawTicksID==NULL) { /* Use the cache Luke */ jdoubledrawTicksID = curEnv->GetMethodID(this->instanceClass, "drawTicks", "()D" ) ;
if (jdoubledrawTicksID == NULL) {
std::cerr << "Could not access to the method " << "drawTicks" << std::endl;
exit(EXIT_FAILURE);
}
}
                        jdouble res =  (jdouble) curEnv->CallDoubleMethod( this->instance, jdoubledrawTicksID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void TicksDrawerGL::setTicksPosition (double * ticksPosX, int ticksPosXSize, double * ticksPosY, int ticksPosYSize, double * ticksPosZ, int ticksPosZSize){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID==NULL) { /* Use the cache Luke */ voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID = curEnv->GetMethodID(this->instanceClass, "setTicksPosition", "([D[D[D)V" ) ;
if (voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID == NULL) {
std::cerr << "Could not access to the method " << "setTicksPosition" << std::endl;
exit(EXIT_FAILURE);
}
}
jdoubleArray ticksPosX_ = curEnv->NewDoubleArray( ticksPosXSize ) ;
curEnv->SetDoubleArrayRegion( ticksPosX_, 0, ticksPosXSize, (jdouble*) ticksPosX ) ;

jdoubleArray ticksPosY_ = curEnv->NewDoubleArray( ticksPosYSize ) ;
curEnv->SetDoubleArrayRegion( ticksPosY_, 0, ticksPosYSize, (jdouble*) ticksPosY ) ;

jdoubleArray ticksPosZ_ = curEnv->NewDoubleArray( ticksPosZSize ) ;
curEnv->SetDoubleArrayRegion( ticksPosZ_, 0, ticksPosZSize, (jdouble*) ticksPosZ ) ;

                         curEnv->CallVoidMethod( this->instance, voidsetTicksPositionjdoubleArrayjdoubleArrayjdoubleArrayID ,ticksPosX_, ticksPosY_, ticksPosZ_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(ticksPosX_);
curEnv->DeleteLocalRef(ticksPosY_);
curEnv->DeleteLocalRef(ticksPosZ_);

}

void TicksDrawerGL::setSubticksPosition (double * subticksPosX, int subticksPosXSize, double * subTicksPosY, int subTicksPosYSize, double * subTicksPosZ, int subTicksPosZSize){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID==NULL) { /* Use the cache Luke */ voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID = curEnv->GetMethodID(this->instanceClass, "setSubticksPosition", "([D[D[D)V" ) ;
if (voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID == NULL) {
std::cerr << "Could not access to the method " << "setSubticksPosition" << std::endl;
exit(EXIT_FAILURE);
}
}
jdoubleArray subticksPosX_ = curEnv->NewDoubleArray( subticksPosXSize ) ;
curEnv->SetDoubleArrayRegion( subticksPosX_, 0, subticksPosXSize, (jdouble*) subticksPosX ) ;

jdoubleArray subTicksPosY_ = curEnv->NewDoubleArray( subTicksPosYSize ) ;
curEnv->SetDoubleArrayRegion( subTicksPosY_, 0, subTicksPosYSize, (jdouble*) subTicksPosY ) ;

jdoubleArray subTicksPosZ_ = curEnv->NewDoubleArray( subTicksPosZSize ) ;
curEnv->SetDoubleArrayRegion( subTicksPosZ_, 0, subTicksPosZSize, (jdouble*) subTicksPosZ ) ;

                         curEnv->CallVoidMethod( this->instance, voidsetSubticksPositionjdoubleArrayjdoubleArrayjdoubleArrayID ,subticksPosX_, subTicksPosY_, subTicksPosZ_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(subticksPosX_);
curEnv->DeleteLocalRef(subTicksPosY_);
curEnv->DeleteLocalRef(subTicksPosZ_);

}

void TicksDrawerGL::setTicksLabels (char ** labels, int labelsSize){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetTicksLabelsjobjectArrayID==NULL) { /* Use the cache Luke */ voidsetTicksLabelsjobjectArrayID = curEnv->GetMethodID(this->instanceClass, "setTicksLabels", "([Ljava/lang/String;)V" ) ;
if (voidsetTicksLabelsjobjectArrayID == NULL) {
std::cerr << "Could not access to the method " << "setTicksLabels" << std::endl;
exit(EXIT_FAILURE);
}
}jclass stringArrayClass = curEnv->FindClass("Ljava/lang/String;");

// create java array of strings.
jobjectArray labels_ = curEnv->NewObjectArray( labelsSize, stringArrayClass, NULL);
if (labels_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < labelsSize; i++)
{
jstring TempString = curEnv->NewStringUTF( labels[i] );
if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( labels_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
                         curEnv->CallVoidMethod( this->instance, voidsetTicksLabelsjobjectArrayID ,labels_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(labels_);

}

void TicksDrawerGL::setTicksLabels (char ** labels, int labelsSize, char ** exponents, int exponentsSize){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetTicksLabelsjobjectArrayjobjectArrayID==NULL) { /* Use the cache Luke */ voidsetTicksLabelsjobjectArrayjobjectArrayID = curEnv->GetMethodID(this->instanceClass, "setTicksLabels", "([Ljava/lang/String;[Ljava/lang/String;)V" ) ;
if (voidsetTicksLabelsjobjectArrayjobjectArrayID == NULL) {
std::cerr << "Could not access to the method " << "setTicksLabels" << std::endl;
exit(EXIT_FAILURE);
}
}jclass stringArrayClass = curEnv->FindClass("Ljava/lang/String;");

// create java array of strings.
jobjectArray labels_ = curEnv->NewObjectArray( labelsSize, stringArrayClass, NULL);
if (labels_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < labelsSize; i++)
{
jstring TempString = curEnv->NewStringUTF( labels[i] );
if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( labels_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}

// create java array of strings.
jobjectArray exponents_ = curEnv->NewObjectArray( exponentsSize, stringArrayClass, NULL);
if (exponents_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < exponentsSize; i++)
{
jstring TempString = curEnv->NewStringUTF( exponents[i] );
if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( exponents_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
                         curEnv->CallVoidMethod( this->instance, voidsetTicksLabelsjobjectArrayjobjectArrayID ,labels_, exponents_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(labels_);
curEnv->DeleteLocalRef(exponents_);

}

void TicksDrawerGL::setTicksDirection (double ticksDirX, double ticksDirY, double ticksDirZ){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetTicksDirectionjdoublejdoublejdoubleID==NULL) { /* Use the cache Luke */ voidsetTicksDirectionjdoublejdoublejdoubleID = curEnv->GetMethodID(this->instanceClass, "setTicksDirection", "(DDD)V" ) ;
if (voidsetTicksDirectionjdoublejdoublejdoubleID == NULL) {
std::cerr << "Could not access to the method " << "setTicksDirection" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidsetTicksDirectionjdoublejdoublejdoubleID ,ticksDirX, ticksDirY, ticksDirZ);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::setAxisBounds (double axesStartX, double axesStartY, double axesStartZ, double axesEndX, double axesEndY, double axesEndZ){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID==NULL) { /* Use the cache Luke */ voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID = curEnv->GetMethodID(this->instanceClass, "setAxisBounds", "(DDDDDD)V" ) ;
if (voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID == NULL) {
std::cerr << "Could not access to the method " << "setAxisBounds" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidsetAxisBoundsjdoublejdoublejdoublejdoublejdoublejdoubleID ,axesStartX, axesStartY, axesStartZ, axesEndX, axesEndY, axesEndZ);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void TicksDrawerGL::setAxisParameters (long lineStyle, float lineWidth, long lineColor, long fontType, double fontSize, long fontColor){

JNIEnv * curEnv = getCurrentEnv();

if (voidsetAxisParametersjintjfloatjintjintjdoublejintID==NULL) { /* Use the cache Luke */ voidsetAxisParametersjintjfloatjintjintjdoublejintID = curEnv->GetMethodID(this->instanceClass, "setAxisParameters", "(IFIIDI)V" ) ;
if (voidsetAxisParametersjintjfloatjintjintjdoublejintID == NULL) {
std::cerr << "Could not access to the method " << "setAxisParameters" << std::endl;
exit(EXIT_FAILURE);
}
}
                         curEnv->CallVoidMethod( this->instance, voidsetAxisParametersjintjfloatjintjintjdoublejintID ,lineStyle, lineWidth, lineColor, fontType, fontSize, fontColor);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

}
