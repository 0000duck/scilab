/**
 * Function calling mpi_send
 * @author Sylvestre LEDRU INRIA
 * @date 2007
 */
#include "gw_mpi.h"
#include "sci_mpi.h"
#include "s_mpi_send.h"
#include "stackTypeVariable.h"

/******************************************
 * SCILAB function : mpi_send, fin = 1
 ******************************************/

int C2F(sci_mpi_send) _PARAMS((char *fname,unsigned long fname_len))
{
	int nopt,iopos,m1,n1,l1,m2,n2,l2,m3,n3,l3,m4,n4,l4,un=1,l5;
	static rhs_opts opts[]={
		{-1,"comm","i",0,0,0},
		{-1,NULL,NULL,NULL,0,0}};
	static int xcomm_world[]= {MPI_COMM_WORLD}, *comm_world = xcomm_world;
	nopt=NumOpt();
	CheckRhs(1,1);	
	CheckLhs(1,1);

	/*
	CheckRhs(3,3+nopt);
	CheckLhs(1,1);
	/*  checking variable buff */
	GetRhsVar(1,MATRIX_OF_DOUBLE_DATATYPE,&m1,&n1,&l1);
	/*  checking variable dest */
	GetRhsVar(2,MATRIX_OF_INTEGER_DATATYPE,&m2,&n2,&l2);
	CheckScalar(2,m2,n2);
	/*  checking variable tag */
	GetRhsVar(3,MATRIX_OF_INTEGER_DATATYPE,&m3,&n3,&l3);
	CheckScalar(3,m3,n3);
	iopos=Rhs;
	if ( get_optionals(fname,opts) == 0) return 0;
	/* default value to optional argument comm */
	if ( opts[0].position == -1 ){
		iopos++ ; 
		opts[0].position = iopos;
		opts[0].m = 1;
		opts[0].n = 1;
		CreateVarFromPtr(opts[0].position,opts[0].type,&opts[0].m,&opts[0].n,&xcomm_world);
		opts[0].l = VarPtr(opts[0].position);
	}
	else { 
		GetRhsVar(4,MATRIX_OF_INTEGER_DATATYPE,&m4,&n4,&l4);
		CheckScalar(4,m4,n4);
	} 
	/* cross variable size checking */
	CreateVar(5,MATRIX_OF_INTEGER_DATATYPE,&un,&un,&l5);/* named: res */
	C2F(s_mpi_send)(stk(l1),&m1,&n1,istk(l2),istk(l3),istk(opts[0].l),istk(l5));
	LhsVar(1)= 5;
	*/
	return 0;
}
