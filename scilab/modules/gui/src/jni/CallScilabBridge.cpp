#include "CallScilabBridge.hxx"
/* Generated by GIWS (version 0.9.6) */
/*

Copyright 2007 INRIA

Author : Sylvestre Ledru

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_gui_bridge {

// Returns the current env

JNIEnv * CallScilabBridge::getCurrentEnv() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);
return curEnv;
}
// Destructor

CallScilabBridge::~CallScilabBridge() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
}

// Constructors

CallScilabBridge::CallScilabBridge(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
std::cerr << "Could not get the Class " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass) ;
if (this->instanceClass == NULL) {
std::cerr << "Could not create a Global Ref of " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
std::cerr << "Could not retrieve the constructor of the class " << this->className() << " with the profile : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
std::cerr << "Could not instantiate the object " << this->className() << " with the constructor : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
std::cerr << "Could not create a new global ref of " << this->className() << std::endl;
exit(EXIT_FAILURE);
}
                /* Methods ID set to NULL */
jintnewWindowID=NULL; 
jintnewMenuBarID=NULL; 
jintnewMenuID=NULL; 
jintnewPushButtonID=NULL; 
voidsetFigureAsParentjintjintID=NULL; 
voidsetMenuAsParentjintjintID=NULL; 
voidsetRootAsParentjintID=NULL; 
voidsetParentjintjintID=NULL; 
voidsetPushButtonParentjintjintID=NULL; 
voidsetMenuTextjintjstringID=NULL; 
voidsetPushButtonTextjintjstringID=NULL; 
jstringgetMenuTextjintID=NULL; 
jstringgetPushButtonTextjintID=NULL; 
voidsetPushButtonBackgroundColorjintjintjintjintID=NULL; 
voidsetMenuCallbackjintjstringID=NULL; 
voidsetRootMenuEnabledjstringjbooleanID=NULL; 
voidsetFigureMenuEnabledjintjstringjbooleanID=NULL; 
voidremoveRootMenujstringID=NULL; 
voidremoveFigureMenujintjstringID=NULL; 
jintnewFileChooserID=NULL; 
voidsetFileChooserTitlejintjstringID=NULL; 
voidsetFileChooserInitialDirectoryjintjstringID=NULL; 
voidsetFileChooserMaskjintjstringID=NULL; 
voidfileChooserDisplayAndWaitjintID=NULL; 
jintgetFileChooserSelectionSizejintID=NULL; 
jobjectArraygetFileChooserSelectionjintID=NULL; 
voidsetFileChooserDirectorySelectionOnlyjintID=NULL; 
voidsetFileChooserFileSelectionOnlyjintID=NULL; 


}

CallScilabBridge::CallScilabBridge(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

        this->instanceClass = (jclass) curEnv->NewGlobalRef(curEnv->GetObjectClass(JObj));
        if (this->instanceClass == NULL) {
               std::cerr << "Could not create a Global Ref of " << this->instanceClass <<  std::endl;
               exit(EXIT_FAILURE);
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
               std::cerr << "Could not create a new global ref of " << this->instanceClass << std::endl;
               exit(EXIT_FAILURE);
        }
        /* Methods ID set to NULL */
        jintnewWindowID=NULL; 
jintnewMenuBarID=NULL; 
jintnewMenuID=NULL; 
jintnewPushButtonID=NULL; 
voidsetFigureAsParentjintjintID=NULL; 
voidsetMenuAsParentjintjintID=NULL; 
voidsetRootAsParentjintID=NULL; 
voidsetParentjintjintID=NULL; 
voidsetPushButtonParentjintjintID=NULL; 
voidsetMenuTextjintjstringID=NULL; 
voidsetPushButtonTextjintjstringID=NULL; 
jstringgetMenuTextjintID=NULL; 
jstringgetPushButtonTextjintID=NULL; 
voidsetPushButtonBackgroundColorjintjintjintjintID=NULL; 
voidsetMenuCallbackjintjstringID=NULL; 
voidsetRootMenuEnabledjstringjbooleanID=NULL; 
voidsetFigureMenuEnabledjintjstringjbooleanID=NULL; 
voidremoveRootMenujstringID=NULL; 
voidremoveFigureMenujintjstringID=NULL; 
jintnewFileChooserID=NULL; 
voidsetFileChooserTitlejintjstringID=NULL; 
voidsetFileChooserInitialDirectoryjintjstringID=NULL; 
voidsetFileChooserMaskjintjstringID=NULL; 
voidfileChooserDisplayAndWaitjintID=NULL; 
jintgetFileChooserSelectionSizejintID=NULL; 
jobjectArraygetFileChooserSelectionjintID=NULL; 
voidsetFileChooserDirectorySelectionOnlyjintID=NULL; 
voidsetFileChooserFileSelectionOnlyjintID=NULL; 


}

// Generic methods


void CallScilabBridge::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
std::cerr << "Fail to enter monitor." << std::endl;
exit(EXIT_FAILURE);
}
}


void CallScilabBridge::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
std::cerr << "Fail to exit monitor." << std::endl;
exit(EXIT_FAILURE);
}
}

// Method(s)

long CallScilabBridge::newWindow (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewWindowID = curEnv->GetStaticMethodID(cls, "newWindow", "()I" ) ;
if (jintnewWindowID == NULL) {
std::cerr << "Could not access to the method " << "newWindow" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewWindowID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newMenuBar (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewMenuBarID = curEnv->GetStaticMethodID(cls, "newMenuBar", "()I" ) ;
if (jintnewMenuBarID == NULL) {
std::cerr << "Could not access to the method " << "newMenuBar" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewMenuBarID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newMenu (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewMenuID = curEnv->GetStaticMethodID(cls, "newMenu", "()I" ) ;
if (jintnewMenuID == NULL) {
std::cerr << "Could not access to the method " << "newMenu" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewMenuID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newPushButton (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewPushButtonID = curEnv->GetStaticMethodID(cls, "newPushButton", "()I" ) ;
if (jintnewPushButtonID == NULL) {
std::cerr << "Could not access to the method " << "newPushButton" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewPushButtonID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setFigureAsParent (JavaVM * jvm_, long figureID, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFigureAsParentjintjintID = curEnv->GetStaticMethodID(cls, "setFigureAsParent", "(II)V" ) ;
if (voidsetFigureAsParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFigureAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFigureAsParentjintjintID ,figureID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setMenuAsParent (JavaVM * jvm_, long menuID, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetMenuAsParentjintjintID = curEnv->GetStaticMethodID(cls, "setMenuAsParent", "(II)V" ) ;
if (voidsetMenuAsParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setMenuAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetMenuAsParentjintjintID ,menuID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setRootAsParent (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRootAsParentjintID = curEnv->GetStaticMethodID(cls, "setRootAsParent", "(I)V" ) ;
if (voidsetRootAsParentjintID == NULL) {
std::cerr << "Could not access to the method " << "setRootAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetRootAsParentjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetParentjintjintID = curEnv->GetStaticMethodID(cls, "setParent", "(II)V" ) ;
if (voidsetParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setPushButtonParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetPushButtonParentjintjintID = curEnv->GetStaticMethodID(cls, "setPushButtonParent", "(II)V" ) ;
if (voidsetPushButtonParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setPushButtonParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetPushButtonParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setMenuText (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetMenuTextjintjstringID = curEnv->GetStaticMethodID(cls, "setMenuText", "(ILjava/lang/String;)V" ) ;
if (voidsetMenuTextjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setMenuText" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetMenuTextjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setPushButtonText (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetPushButtonTextjintjstringID = curEnv->GetStaticMethodID(cls, "setPushButtonText", "(ILjava/lang/String;)V" ) ;
if (voidsetPushButtonTextjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setPushButtonText" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetPushButtonTextjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

char * CallScilabBridge::getMenuText (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetMenuTextjintID = curEnv->GetStaticMethodID(cls, "getMenuText", "(I)Ljava/lang/String;" ) ;
if (jstringgetMenuTextjintID == NULL) {
std::cerr << "Could not access to the method " << "getMenuText" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetMenuTextjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

char * CallScilabBridge::getPushButtonText (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetPushButtonTextjintID = curEnv->GetStaticMethodID(cls, "getPushButtonText", "(I)Ljava/lang/String;" ) ;
if (jstringgetPushButtonTextjintID == NULL) {
std::cerr << "Could not access to the method " << "getPushButtonText" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetPushButtonTextjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

void CallScilabBridge::setPushButtonBackgroundColor (JavaVM * jvm_, long objID, long red, long green, long blue){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetPushButtonBackgroundColorjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setPushButtonBackgroundColor", "(IIII)V" ) ;
if (voidsetPushButtonBackgroundColorjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setPushButtonBackgroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetPushButtonBackgroundColorjintjintjintjintID ,objID, red, green, blue);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setMenuCallback (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetMenuCallbackjintjstringID = curEnv->GetStaticMethodID(cls, "setMenuCallback", "(ILjava/lang/String;)V" ) ;
if (voidsetMenuCallbackjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setMenuCallback" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetMenuCallbackjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setRootMenuEnabled (JavaVM * jvm_, char * menuName, bool status){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRootMenuEnabledjstringjbooleanID = curEnv->GetStaticMethodID(cls, "setRootMenuEnabled", "(Ljava/lang/String;Z)V" ) ;
if (voidsetRootMenuEnabledjstringjbooleanID == NULL) {
std::cerr << "Could not access to the method " << "setRootMenuEnabled" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidsetRootMenuEnabledjstringjbooleanID ,menuName_, status);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFigureMenuEnabled (JavaVM * jvm_, long figureID, char * menuName, bool status){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFigureMenuEnabledjintjstringjbooleanID = curEnv->GetStaticMethodID(cls, "setFigureMenuEnabled", "(ILjava/lang/String;Z)V" ) ;
if (voidsetFigureMenuEnabledjintjstringjbooleanID == NULL) {
std::cerr << "Could not access to the method " << "setFigureMenuEnabled" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidsetFigureMenuEnabledjintjstringjbooleanID ,figureID, menuName_, status);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::removeRootMenu (JavaVM * jvm_, char * menuName){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidremoveRootMenujstringID = curEnv->GetStaticMethodID(cls, "removeRootMenu", "(Ljava/lang/String;)V" ) ;
if (voidremoveRootMenujstringID == NULL) {
std::cerr << "Could not access to the method " << "removeRootMenu" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidremoveRootMenujstringID ,menuName_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::removeFigureMenu (JavaVM * jvm_, long figureID, char * menuName){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidremoveFigureMenujintjstringID = curEnv->GetStaticMethodID(cls, "removeFigureMenu", "(ILjava/lang/String;)V" ) ;
if (voidremoveFigureMenujintjstringID == NULL) {
std::cerr << "Could not access to the method " << "removeFigureMenu" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidremoveFigureMenujintjstringID ,figureID, menuName_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::newFileChooser (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewFileChooserID = curEnv->GetStaticMethodID(cls, "newFileChooser", "()I" ) ;
if (jintnewFileChooserID == NULL) {
std::cerr << "Could not access to the method " << "newFileChooser" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewFileChooserID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setFileChooserTitle (JavaVM * jvm_, long id, char * title){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserTitlejintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserTitle", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserTitlejintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserTitle" << std::endl;
exit(EXIT_FAILURE);
}

jstring title_ = curEnv->NewStringUTF( title );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserTitlejintjstringID ,id, title_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserInitialDirectory (JavaVM * jvm_, long id, char * path){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserInitialDirectoryjintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserInitialDirectory", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserInitialDirectoryjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserInitialDirectory" << std::endl;
exit(EXIT_FAILURE);
}

jstring path_ = curEnv->NewStringUTF( path );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserInitialDirectoryjintjstringID ,id, path_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserMask (JavaVM * jvm_, long id, char * mask){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserMaskjintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserMask", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserMaskjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserMask" << std::endl;
exit(EXIT_FAILURE);
}

jstring mask_ = curEnv->NewStringUTF( mask );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserMaskjintjstringID ,id, mask_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::fileChooserDisplayAndWait (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidfileChooserDisplayAndWaitjintID = curEnv->GetStaticMethodID(cls, "fileChooserDisplayAndWait", "(I)V" ) ;
if (voidfileChooserDisplayAndWaitjintID == NULL) {
std::cerr << "Could not access to the method " << "fileChooserDisplayAndWait" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidfileChooserDisplayAndWaitjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::getFileChooserSelectionSize (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetFileChooserSelectionSizejintID = curEnv->GetStaticMethodID(cls, "getFileChooserSelectionSize", "(I)I" ) ;
if (jintgetFileChooserSelectionSizejintID == NULL) {
std::cerr << "Could not access to the method " << "getFileChooserSelectionSize" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetFileChooserSelectionSizejintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

char ** CallScilabBridge::getFileChooserSelection (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jobjectArraygetFileChooserSelectionjintID = curEnv->GetStaticMethodID(cls, "getFileChooserSelection", "(I)[Ljava/lang/String;" ) ;
if (jobjectArraygetFileChooserSelectionjintID == NULL) {
std::cerr << "Could not access to the method " << "getFileChooserSelection" << std::endl;
exit(EXIT_FAILURE);
}

                        jobjectArray res =  (jobjectArray) curEnv->CallObjectMethod(cls, jobjectArraygetFileChooserSelectionjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
char **arrayOfString;
                        arrayOfString= (char**)malloc ((len+1)*sizeof(char*));
for (jsize i = 0; i < len; i++){
jstring resString = (jstring)curEnv->GetObjectArrayElement(res, i);
const char *tempString = curEnv->GetStringUTFChars(resString, 0);
arrayOfString[i]= (char*)malloc ((strlen(tempString)+1)*sizeof(char));
strcpy(arrayOfString[i], tempString);
curEnv->ReleaseStringUTFChars(resString, tempString);
}

return arrayOfString;

}

void CallScilabBridge::setFileChooserDirectorySelectionOnly (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserDirectorySelectionOnlyjintID = curEnv->GetStaticMethodID(cls, "setFileChooserDirectorySelectionOnly", "(I)V" ) ;
if (voidsetFileChooserDirectorySelectionOnlyjintID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserDirectorySelectionOnly" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserDirectorySelectionOnlyjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserFileSelectionOnly (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
                jvm_->AttachCurrentThread((void **) &curEnv, NULL);
                jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserFileSelectionOnlyjintID = curEnv->GetStaticMethodID(cls, "setFileChooserFileSelectionOnly", "(I)V" ) ;
if (voidsetFileChooserFileSelectionOnlyjintID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserFileSelectionOnly" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserFileSelectionOnlyjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

}
