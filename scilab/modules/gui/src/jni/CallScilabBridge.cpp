#include "CallScilabBridge.hxx"
/* Generated by GIWS (version 0.9.7) */
/*

Copyright 2007 INRIA

Author : Sylvestre Ledru

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_gui_bridge {

// Returns the current env

JNIEnv * CallScilabBridge::getCurrentEnv() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);
return curEnv;
}
// Destructor

CallScilabBridge::~CallScilabBridge() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
}

// Constructors

CallScilabBridge::CallScilabBridge(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
std::cerr << "Could not get the Class " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass) ;
if (this->instanceClass == NULL) {
std::cerr << "Could not create a Global Ref of " << this->className() <<  std::endl;
exit(EXIT_FAILURE);
}

constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
std::cerr << "Could not retrieve the constructor of the class " << this->className() << " with the profile : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
std::cerr << "Could not instantiate the object " << this->className() << " with the constructor : " << construct << param << std::endl;
exit(EXIT_FAILURE);
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
std::cerr << "Could not create a new global ref of " << this->className() << std::endl;
exit(EXIT_FAILURE);
}
                /* Methods ID set to NULL */
jintnewWindowID=NULL; 
jintnewMenuBarID=NULL; 
jintnewMenuID=NULL; 
jintnewPushButtonID=NULL; 
jintnewEditBoxID=NULL; 
jintnewLabelID=NULL; 
jintnewCheckBoxID=NULL; 
jintnewRadioButtonID=NULL; 
jintnewSliderID=NULL; 
jintnewPopupMenuID=NULL; 
jintnewListBoxID=NULL; 
jintnewFrameID=NULL; 
voidsetFigureAsParentjintjintID=NULL; 
voidsetMenuAsParentjintjintID=NULL; 
voidsetRootAsParentjintID=NULL; 
voidsetParentjintjintID=NULL; 
voidsetPushButtonParentjintjintID=NULL; 
voidsetEditBoxParentjintjintID=NULL; 
voidsetLabelParentjintjintID=NULL; 
voidsetCheckBoxParentjintjintID=NULL; 
voidsetRadioButtonParentjintjintID=NULL; 
voidsetSliderParentjintjintID=NULL; 
voidsetPopupMenuParentjintjintID=NULL; 
voidsetListBoxParentjintjintID=NULL; 
voidsetFrameParentjintjintID=NULL; 
voidsetWidgetTextjintjstringID=NULL; 
jstringgetWidgetTextjintID=NULL; 
voidsetFrameTextjintjstringID=NULL; 
jstringgetFrameTextjintID=NULL; 
voidsetWidgetBackgroundColorjintjintjintjintID=NULL; 
jintArraygetWidgetBackgroundColorjintID=NULL; 
voidsetWidgetForegroundColorjintjintjintjintID=NULL; 
jintArraygetWidgetForegroundColorjintID=NULL; 
voidsetFrameBackgroundColorjintjintjintjintID=NULL; 
jintArraygetFrameBackgroundColorjintID=NULL; 
voidsetFrameForegroundColorjintjintjintjintID=NULL; 
jintArraygetFrameForegroundColorjintID=NULL; 
voidsetWidgetFontWeightjintjstringID=NULL; 
voidsetWidgetFontSizejintjintID=NULL; 
jintgetWidgetFontSizejintID=NULL; 
voidsetWidgetFontAnglejintjstringID=NULL; 
voidsetFrameFontWeightjintjstringID=NULL; 
voidsetFrameFontSizejintjintID=NULL; 
jintgetFrameFontSizejintID=NULL; 
voidsetFrameFontAnglejintjstringID=NULL; 
voidsetWidgetPositionjintjintjintjintjintID=NULL; 
jintArraygetWidgetPositionjintID=NULL; 
voidsetFramePositionjintjintjintjintjintID=NULL; 
jintArraygetFramePositionjintID=NULL; 
voidsetWidgetCallbackjintjstringID=NULL; 
jstringgetWidgetCallbackjintID=NULL; 
voidsetFrameCallbackjintjstringID=NULL; 
jstringgetFrameCallbackjintID=NULL; 
voidsetWidgetHorizontalAlignmentjintjstringID=NULL; 
voidsetWidgetVerticalAlignmentjintjstringID=NULL; 
voidsetSliderMinorTickSpacingjintjintID=NULL; 
voidsetSliderMajorTickSpacingjintjintID=NULL; 
voidsetSliderMinValuejintjintID=NULL; 
voidsetSliderMaxValuejintjintID=NULL; 
voidsetListBoxMultipleSelectionEnabledjintjbooleanID=NULL; 
voidsetRootMenuEnabledjstringjbooleanID=NULL; 
voidsetFigureMenuEnabledjintjstringjbooleanID=NULL; 
voidremoveRootMenujstringID=NULL; 
voidremoveFigureMenujintjstringID=NULL; 
jintnewFileChooserID=NULL; 
voidsetFileChooserTitlejintjstringID=NULL; 
voidsetFileChooserInitialDirectoryjintjstringID=NULL; 
voidsetFileChooserMaskjintjstringID=NULL; 
voidfileChooserDisplayAndWaitjintID=NULL; 
jintgetFileChooserSelectionSizejintID=NULL; 
jobjectArraygetFileChooserSelectionjintID=NULL; 
voidsetFileChooserDirectorySelectionOnlyjintID=NULL; 
voidsetFileChooserFileSelectionOnlyjintID=NULL; 


}

CallScilabBridge::CallScilabBridge(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

        this->instanceClass = (jclass) curEnv->NewGlobalRef(curEnv->GetObjectClass(JObj));
        if (this->instanceClass == NULL) {
               std::cerr << "Could not create a Global Ref of " << this->instanceClass <<  std::endl;
               exit(EXIT_FAILURE);
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
               std::cerr << "Could not create a new global ref of " << this->instanceClass << std::endl;
               exit(EXIT_FAILURE);
        }
        /* Methods ID set to NULL */
        jintnewWindowID=NULL; 
jintnewMenuBarID=NULL; 
jintnewMenuID=NULL; 
jintnewPushButtonID=NULL; 
jintnewEditBoxID=NULL; 
jintnewLabelID=NULL; 
jintnewCheckBoxID=NULL; 
jintnewRadioButtonID=NULL; 
jintnewSliderID=NULL; 
jintnewPopupMenuID=NULL; 
jintnewListBoxID=NULL; 
jintnewFrameID=NULL; 
voidsetFigureAsParentjintjintID=NULL; 
voidsetMenuAsParentjintjintID=NULL; 
voidsetRootAsParentjintID=NULL; 
voidsetParentjintjintID=NULL; 
voidsetPushButtonParentjintjintID=NULL; 
voidsetEditBoxParentjintjintID=NULL; 
voidsetLabelParentjintjintID=NULL; 
voidsetCheckBoxParentjintjintID=NULL; 
voidsetRadioButtonParentjintjintID=NULL; 
voidsetSliderParentjintjintID=NULL; 
voidsetPopupMenuParentjintjintID=NULL; 
voidsetListBoxParentjintjintID=NULL; 
voidsetFrameParentjintjintID=NULL; 
voidsetWidgetTextjintjstringID=NULL; 
jstringgetWidgetTextjintID=NULL; 
voidsetFrameTextjintjstringID=NULL; 
jstringgetFrameTextjintID=NULL; 
voidsetWidgetBackgroundColorjintjintjintjintID=NULL; 
jintArraygetWidgetBackgroundColorjintID=NULL; 
voidsetWidgetForegroundColorjintjintjintjintID=NULL; 
jintArraygetWidgetForegroundColorjintID=NULL; 
voidsetFrameBackgroundColorjintjintjintjintID=NULL; 
jintArraygetFrameBackgroundColorjintID=NULL; 
voidsetFrameForegroundColorjintjintjintjintID=NULL; 
jintArraygetFrameForegroundColorjintID=NULL; 
voidsetWidgetFontWeightjintjstringID=NULL; 
voidsetWidgetFontSizejintjintID=NULL; 
jintgetWidgetFontSizejintID=NULL; 
voidsetWidgetFontAnglejintjstringID=NULL; 
voidsetFrameFontWeightjintjstringID=NULL; 
voidsetFrameFontSizejintjintID=NULL; 
jintgetFrameFontSizejintID=NULL; 
voidsetFrameFontAnglejintjstringID=NULL; 
voidsetWidgetPositionjintjintjintjintjintID=NULL; 
jintArraygetWidgetPositionjintID=NULL; 
voidsetFramePositionjintjintjintjintjintID=NULL; 
jintArraygetFramePositionjintID=NULL; 
voidsetWidgetCallbackjintjstringID=NULL; 
jstringgetWidgetCallbackjintID=NULL; 
voidsetFrameCallbackjintjstringID=NULL; 
jstringgetFrameCallbackjintID=NULL; 
voidsetWidgetHorizontalAlignmentjintjstringID=NULL; 
voidsetWidgetVerticalAlignmentjintjstringID=NULL; 
voidsetSliderMinorTickSpacingjintjintID=NULL; 
voidsetSliderMajorTickSpacingjintjintID=NULL; 
voidsetSliderMinValuejintjintID=NULL; 
voidsetSliderMaxValuejintjintID=NULL; 
voidsetListBoxMultipleSelectionEnabledjintjbooleanID=NULL; 
voidsetRootMenuEnabledjstringjbooleanID=NULL; 
voidsetFigureMenuEnabledjintjstringjbooleanID=NULL; 
voidremoveRootMenujstringID=NULL; 
voidremoveFigureMenujintjstringID=NULL; 
jintnewFileChooserID=NULL; 
voidsetFileChooserTitlejintjstringID=NULL; 
voidsetFileChooserInitialDirectoryjintjstringID=NULL; 
voidsetFileChooserMaskjintjstringID=NULL; 
voidfileChooserDisplayAndWaitjintID=NULL; 
jintgetFileChooserSelectionSizejintID=NULL; 
jobjectArraygetFileChooserSelectionjintID=NULL; 
voidsetFileChooserDirectorySelectionOnlyjintID=NULL; 
voidsetFileChooserFileSelectionOnlyjintID=NULL; 


}

// Generic methods


void CallScilabBridge::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
std::cerr << "Fail to enter monitor." << std::endl;
exit(EXIT_FAILURE);
}
}


void CallScilabBridge::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
std::cerr << "Fail to exit monitor." << std::endl;
exit(EXIT_FAILURE);
}
}

// Method(s)

long CallScilabBridge::newWindow (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewWindowID = curEnv->GetStaticMethodID(cls, "newWindow", "()I" ) ;
if (jintnewWindowID == NULL) {
std::cerr << "Could not access to the method " << "newWindow" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewWindowID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newMenuBar (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewMenuBarID = curEnv->GetStaticMethodID(cls, "newMenuBar", "()I" ) ;
if (jintnewMenuBarID == NULL) {
std::cerr << "Could not access to the method " << "newMenuBar" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewMenuBarID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newMenu (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewMenuID = curEnv->GetStaticMethodID(cls, "newMenu", "()I" ) ;
if (jintnewMenuID == NULL) {
std::cerr << "Could not access to the method " << "newMenu" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewMenuID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newPushButton (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewPushButtonID = curEnv->GetStaticMethodID(cls, "newPushButton", "()I" ) ;
if (jintnewPushButtonID == NULL) {
std::cerr << "Could not access to the method " << "newPushButton" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewPushButtonID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newEditBox (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewEditBoxID = curEnv->GetStaticMethodID(cls, "newEditBox", "()I" ) ;
if (jintnewEditBoxID == NULL) {
std::cerr << "Could not access to the method " << "newEditBox" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewEditBoxID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newLabel (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewLabelID = curEnv->GetStaticMethodID(cls, "newLabel", "()I" ) ;
if (jintnewLabelID == NULL) {
std::cerr << "Could not access to the method " << "newLabel" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewLabelID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newCheckBox (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewCheckBoxID = curEnv->GetStaticMethodID(cls, "newCheckBox", "()I" ) ;
if (jintnewCheckBoxID == NULL) {
std::cerr << "Could not access to the method " << "newCheckBox" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewCheckBoxID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newRadioButton (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewRadioButtonID = curEnv->GetStaticMethodID(cls, "newRadioButton", "()I" ) ;
if (jintnewRadioButtonID == NULL) {
std::cerr << "Could not access to the method " << "newRadioButton" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewRadioButtonID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newSlider (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewSliderID = curEnv->GetStaticMethodID(cls, "newSlider", "()I" ) ;
if (jintnewSliderID == NULL) {
std::cerr << "Could not access to the method " << "newSlider" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewSliderID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newPopupMenu (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewPopupMenuID = curEnv->GetStaticMethodID(cls, "newPopupMenu", "()I" ) ;
if (jintnewPopupMenuID == NULL) {
std::cerr << "Could not access to the method " << "newPopupMenu" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewPopupMenuID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newListBox (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewListBoxID = curEnv->GetStaticMethodID(cls, "newListBox", "()I" ) ;
if (jintnewListBoxID == NULL) {
std::cerr << "Could not access to the method " << "newListBox" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewListBoxID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

long CallScilabBridge::newFrame (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewFrameID = curEnv->GetStaticMethodID(cls, "newFrame", "()I" ) ;
if (jintnewFrameID == NULL) {
std::cerr << "Could not access to the method " << "newFrame" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewFrameID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setFigureAsParent (JavaVM * jvm_, long figureID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFigureAsParentjintjintID = curEnv->GetStaticMethodID(cls, "setFigureAsParent", "(II)V" ) ;
if (voidsetFigureAsParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFigureAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFigureAsParentjintjintID ,figureID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setMenuAsParent (JavaVM * jvm_, long menuID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetMenuAsParentjintjintID = curEnv->GetStaticMethodID(cls, "setMenuAsParent", "(II)V" ) ;
if (voidsetMenuAsParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setMenuAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetMenuAsParentjintjintID ,menuID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setRootAsParent (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRootAsParentjintID = curEnv->GetStaticMethodID(cls, "setRootAsParent", "(I)V" ) ;
if (voidsetRootAsParentjintID == NULL) {
std::cerr << "Could not access to the method " << "setRootAsParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetRootAsParentjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetParentjintjintID = curEnv->GetStaticMethodID(cls, "setParent", "(II)V" ) ;
if (voidsetParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setPushButtonParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetPushButtonParentjintjintID = curEnv->GetStaticMethodID(cls, "setPushButtonParent", "(II)V" ) ;
if (voidsetPushButtonParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setPushButtonParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetPushButtonParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setEditBoxParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetEditBoxParentjintjintID = curEnv->GetStaticMethodID(cls, "setEditBoxParent", "(II)V" ) ;
if (voidsetEditBoxParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setEditBoxParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetEditBoxParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setLabelParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetLabelParentjintjintID = curEnv->GetStaticMethodID(cls, "setLabelParent", "(II)V" ) ;
if (voidsetLabelParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setLabelParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetLabelParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setCheckBoxParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetCheckBoxParentjintjintID = curEnv->GetStaticMethodID(cls, "setCheckBoxParent", "(II)V" ) ;
if (voidsetCheckBoxParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setCheckBoxParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetCheckBoxParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setRadioButtonParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRadioButtonParentjintjintID = curEnv->GetStaticMethodID(cls, "setRadioButtonParent", "(II)V" ) ;
if (voidsetRadioButtonParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setRadioButtonParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetRadioButtonParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setSliderParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetSliderParentjintjintID = curEnv->GetStaticMethodID(cls, "setSliderParent", "(II)V" ) ;
if (voidsetSliderParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setSliderParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetSliderParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setPopupMenuParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetPopupMenuParentjintjintID = curEnv->GetStaticMethodID(cls, "setPopupMenuParent", "(II)V" ) ;
if (voidsetPopupMenuParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setPopupMenuParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetPopupMenuParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setListBoxParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetListBoxParentjintjintID = curEnv->GetStaticMethodID(cls, "setListBoxParent", "(II)V" ) ;
if (voidsetListBoxParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setListBoxParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetListBoxParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFrameParent (JavaVM * jvm_, long parentID, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameParentjintjintID = curEnv->GetStaticMethodID(cls, "setFrameParent", "(II)V" ) ;
if (voidsetFrameParentjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFrameParent" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameParentjintjintID ,parentID, objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setWidgetText (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetTextjintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetText", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetTextjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetText" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetTextjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

char * CallScilabBridge::getWidgetText (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetWidgetTextjintID = curEnv->GetStaticMethodID(cls, "getWidgetText", "(I)Ljava/lang/String;" ) ;
if (jstringgetWidgetTextjintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetText" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetWidgetTextjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

void CallScilabBridge::setFrameText (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameTextjintjstringID = curEnv->GetStaticMethodID(cls, "setFrameText", "(ILjava/lang/String;)V" ) ;
if (voidsetFrameTextjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFrameText" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameTextjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

char * CallScilabBridge::getFrameText (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetFrameTextjintID = curEnv->GetStaticMethodID(cls, "getFrameText", "(I)Ljava/lang/String;" ) ;
if (jstringgetFrameTextjintID == NULL) {
std::cerr << "Could not access to the method " << "getFrameText" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetFrameTextjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

void CallScilabBridge::setWidgetBackgroundColor (JavaVM * jvm_, long objID, long red, long green, long blue){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetBackgroundColorjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setWidgetBackgroundColor", "(IIII)V" ) ;
if (voidsetWidgetBackgroundColorjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetBackgroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetBackgroundColorjintjintjintjintID ,objID, red, green, blue);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getWidgetBackgroundColor (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetWidgetBackgroundColorjintID = curEnv->GetStaticMethodID(cls, "getWidgetBackgroundColor", "(I)[I" ) ;
if (jintArraygetWidgetBackgroundColorjintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetBackgroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetWidgetBackgroundColorjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setWidgetForegroundColor (JavaVM * jvm_, long objID, long red, long green, long blue){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetForegroundColorjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setWidgetForegroundColor", "(IIII)V" ) ;
if (voidsetWidgetForegroundColorjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetForegroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetForegroundColorjintjintjintjintID ,objID, red, green, blue);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getWidgetForegroundColor (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetWidgetForegroundColorjintID = curEnv->GetStaticMethodID(cls, "getWidgetForegroundColor", "(I)[I" ) ;
if (jintArraygetWidgetForegroundColorjintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetForegroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetWidgetForegroundColorjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setFrameBackgroundColor (JavaVM * jvm_, long objID, long red, long green, long blue){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameBackgroundColorjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setFrameBackgroundColor", "(IIII)V" ) ;
if (voidsetFrameBackgroundColorjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFrameBackgroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameBackgroundColorjintjintjintjintID ,objID, red, green, blue);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getFrameBackgroundColor (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetFrameBackgroundColorjintID = curEnv->GetStaticMethodID(cls, "getFrameBackgroundColor", "(I)[I" ) ;
if (jintArraygetFrameBackgroundColorjintID == NULL) {
std::cerr << "Could not access to the method " << "getFrameBackgroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetFrameBackgroundColorjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setFrameForegroundColor (JavaVM * jvm_, long objID, long red, long green, long blue){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameForegroundColorjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setFrameForegroundColor", "(IIII)V" ) ;
if (voidsetFrameForegroundColorjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFrameForegroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameForegroundColorjintjintjintjintID ,objID, red, green, blue);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getFrameForegroundColor (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetFrameForegroundColorjintID = curEnv->GetStaticMethodID(cls, "getFrameForegroundColor", "(I)[I" ) ;
if (jintArraygetFrameForegroundColorjintID == NULL) {
std::cerr << "Could not access to the method " << "getFrameForegroundColor" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetFrameForegroundColorjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setWidgetFontWeight (JavaVM * jvm_, long objID, char * weight){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetFontWeightjintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetFontWeight", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetFontWeightjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetFontWeight" << std::endl;
exit(EXIT_FAILURE);
}

jstring weight_ = curEnv->NewStringUTF( weight );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetFontWeightjintjstringID ,objID, weight_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setWidgetFontSize (JavaVM * jvm_, long objID, long size){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetFontSizejintjintID = curEnv->GetStaticMethodID(cls, "setWidgetFontSize", "(II)V" ) ;
if (voidsetWidgetFontSizejintjintID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetFontSize" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetFontSizejintjintID ,objID, size);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::getWidgetFontSize (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetWidgetFontSizejintID = curEnv->GetStaticMethodID(cls, "getWidgetFontSize", "(I)I" ) ;
if (jintgetWidgetFontSizejintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetFontSize" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetWidgetFontSizejintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setWidgetFontAngle (JavaVM * jvm_, long objID, char * angle){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetFontAnglejintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetFontAngle", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetFontAnglejintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetFontAngle" << std::endl;
exit(EXIT_FAILURE);
}

jstring angle_ = curEnv->NewStringUTF( angle );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetFontAnglejintjstringID ,objID, angle_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFrameFontWeight (JavaVM * jvm_, long objID, char * weight){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameFontWeightjintjstringID = curEnv->GetStaticMethodID(cls, "setFrameFontWeight", "(ILjava/lang/String;)V" ) ;
if (voidsetFrameFontWeightjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFrameFontWeight" << std::endl;
exit(EXIT_FAILURE);
}

jstring weight_ = curEnv->NewStringUTF( weight );

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameFontWeightjintjstringID ,objID, weight_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFrameFontSize (JavaVM * jvm_, long objID, long size){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameFontSizejintjintID = curEnv->GetStaticMethodID(cls, "setFrameFontSize", "(II)V" ) ;
if (voidsetFrameFontSizejintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFrameFontSize" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameFontSizejintjintID ,objID, size);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::getFrameFontSize (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetFrameFontSizejintID = curEnv->GetStaticMethodID(cls, "getFrameFontSize", "(I)I" ) ;
if (jintgetFrameFontSizejintID == NULL) {
std::cerr << "Could not access to the method " << "getFrameFontSize" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetFrameFontSizejintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setFrameFontAngle (JavaVM * jvm_, long objID, char * angle){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameFontAnglejintjstringID = curEnv->GetStaticMethodID(cls, "setFrameFontAngle", "(ILjava/lang/String;)V" ) ;
if (voidsetFrameFontAnglejintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFrameFontAngle" << std::endl;
exit(EXIT_FAILURE);
}

jstring angle_ = curEnv->NewStringUTF( angle );

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameFontAnglejintjstringID ,objID, angle_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setWidgetPosition (JavaVM * jvm_, long objID, long x, long y, long width, long height){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetPositionjintjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setWidgetPosition", "(IIIII)V" ) ;
if (voidsetWidgetPositionjintjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetPosition" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetPositionjintjintjintjintjintID ,objID, x, y, width, height);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getWidgetPosition (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetWidgetPositionjintID = curEnv->GetStaticMethodID(cls, "getWidgetPosition", "(I)[I" ) ;
if (jintArraygetWidgetPositionjintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetPosition" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetWidgetPositionjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setFramePosition (JavaVM * jvm_, long objID, long x, long y, long width, long height){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFramePositionjintjintjintjintjintID = curEnv->GetStaticMethodID(cls, "setFramePosition", "(IIIII)V" ) ;
if (voidsetFramePositionjintjintjintjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setFramePosition" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFramePositionjintjintjintjintjintID ,objID, x, y, width, height);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long * CallScilabBridge::getFramePosition (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetFramePositionjintID = curEnv->GetStaticMethodID(cls, "getFramePosition", "(I)[I" ) ;
if (jintArraygetFramePositionjintID == NULL) {
std::cerr << "Could not access to the method " << "getFramePosition" << std::endl;
exit(EXIT_FAILURE);
}

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetFramePositionjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
long * myArray= new long[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

return myArray;

}

void CallScilabBridge::setWidgetCallback (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetCallbackjintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetCallback", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetCallbackjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetCallback" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetCallbackjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

char * CallScilabBridge::getWidgetCallback (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetWidgetCallbackjintID = curEnv->GetStaticMethodID(cls, "getWidgetCallback", "(I)Ljava/lang/String;" ) ;
if (jstringgetWidgetCallbackjintID == NULL) {
std::cerr << "Could not access to the method " << "getWidgetCallback" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetWidgetCallbackjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

void CallScilabBridge::setFrameCallback (JavaVM * jvm_, long objID, char * text){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFrameCallbackjintjstringID = curEnv->GetStaticMethodID(cls, "setFrameCallback", "(ILjava/lang/String;)V" ) ;
if (voidsetFrameCallbackjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFrameCallback" << std::endl;
exit(EXIT_FAILURE);
}

jstring text_ = curEnv->NewStringUTF( text );

                         curEnv->CallStaticVoidMethod(cls, voidsetFrameCallbackjintjstringID ,objID, text_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

char * CallScilabBridge::getFrameCallback (JavaVM * jvm_, long objID){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetFrameCallbackjintID = curEnv->GetStaticMethodID(cls, "getFrameCallback", "(I)Ljava/lang/String;" ) ;
if (jstringgetFrameCallbackjintID == NULL) {
std::cerr << "Could not access to the method " << "getFrameCallback" << std::endl;
exit(EXIT_FAILURE);
}

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetFrameCallbackjintID ,objID);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer= (char*)malloc (strlen(tempString)*sizeof(char)+1);
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);

return myStringBuffer;

}

void CallScilabBridge::setWidgetHorizontalAlignment (JavaVM * jvm_, long objID, char * alignment){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetHorizontalAlignmentjintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetHorizontalAlignment", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetHorizontalAlignmentjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetHorizontalAlignment" << std::endl;
exit(EXIT_FAILURE);
}

jstring alignment_ = curEnv->NewStringUTF( alignment );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetHorizontalAlignmentjintjstringID ,objID, alignment_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setWidgetVerticalAlignment (JavaVM * jvm_, long objID, char * alignment){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetWidgetVerticalAlignmentjintjstringID = curEnv->GetStaticMethodID(cls, "setWidgetVerticalAlignment", "(ILjava/lang/String;)V" ) ;
if (voidsetWidgetVerticalAlignmentjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setWidgetVerticalAlignment" << std::endl;
exit(EXIT_FAILURE);
}

jstring alignment_ = curEnv->NewStringUTF( alignment );

                         curEnv->CallStaticVoidMethod(cls, voidsetWidgetVerticalAlignmentjintjstringID ,objID, alignment_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setSliderMinorTickSpacing (JavaVM * jvm_, long objID, long space){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetSliderMinorTickSpacingjintjintID = curEnv->GetStaticMethodID(cls, "setSliderMinorTickSpacing", "(II)V" ) ;
if (voidsetSliderMinorTickSpacingjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setSliderMinorTickSpacing" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetSliderMinorTickSpacingjintjintID ,objID, space);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setSliderMajorTickSpacing (JavaVM * jvm_, long objID, long space){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetSliderMajorTickSpacingjintjintID = curEnv->GetStaticMethodID(cls, "setSliderMajorTickSpacing", "(II)V" ) ;
if (voidsetSliderMajorTickSpacingjintjintID == NULL) {
std::cerr << "Could not access to the method " << "setSliderMajorTickSpacing" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetSliderMajorTickSpacingjintjintID ,objID, space);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setSliderMinValue (JavaVM * jvm_, long objID, long value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetSliderMinValuejintjintID = curEnv->GetStaticMethodID(cls, "setSliderMinValue", "(II)V" ) ;
if (voidsetSliderMinValuejintjintID == NULL) {
std::cerr << "Could not access to the method " << "setSliderMinValue" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetSliderMinValuejintjintID ,objID, value);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setSliderMaxValue (JavaVM * jvm_, long objID, long value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetSliderMaxValuejintjintID = curEnv->GetStaticMethodID(cls, "setSliderMaxValue", "(II)V" ) ;
if (voidsetSliderMaxValuejintjintID == NULL) {
std::cerr << "Could not access to the method " << "setSliderMaxValue" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetSliderMaxValuejintjintID ,objID, value);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setListBoxMultipleSelectionEnabled (JavaVM * jvm_, long objID, bool status){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetListBoxMultipleSelectionEnabledjintjbooleanID = curEnv->GetStaticMethodID(cls, "setListBoxMultipleSelectionEnabled", "(IZ)V" ) ;
if (voidsetListBoxMultipleSelectionEnabledjintjbooleanID == NULL) {
std::cerr << "Could not access to the method " << "setListBoxMultipleSelectionEnabled" << std::endl;
exit(EXIT_FAILURE);
}

jboolean status_ = ((bool) status ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsetListBoxMultipleSelectionEnabledjintjbooleanID ,objID, status_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setRootMenuEnabled (JavaVM * jvm_, char * menuName, bool status){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRootMenuEnabledjstringjbooleanID = curEnv->GetStaticMethodID(cls, "setRootMenuEnabled", "(Ljava/lang/String;Z)V" ) ;
if (voidsetRootMenuEnabledjstringjbooleanID == NULL) {
std::cerr << "Could not access to the method " << "setRootMenuEnabled" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

jboolean status_ = ((bool) status ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsetRootMenuEnabledjstringjbooleanID ,menuName_, status_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFigureMenuEnabled (JavaVM * jvm_, long figureID, char * menuName, bool status){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFigureMenuEnabledjintjstringjbooleanID = curEnv->GetStaticMethodID(cls, "setFigureMenuEnabled", "(ILjava/lang/String;Z)V" ) ;
if (voidsetFigureMenuEnabledjintjstringjbooleanID == NULL) {
std::cerr << "Could not access to the method " << "setFigureMenuEnabled" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

jboolean status_ = ((bool) status ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsetFigureMenuEnabledjintjstringjbooleanID ,figureID, menuName_, status_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::removeRootMenu (JavaVM * jvm_, char * menuName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidremoveRootMenujstringID = curEnv->GetStaticMethodID(cls, "removeRootMenu", "(Ljava/lang/String;)V" ) ;
if (voidremoveRootMenujstringID == NULL) {
std::cerr << "Could not access to the method " << "removeRootMenu" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidremoveRootMenujstringID ,menuName_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::removeFigureMenu (JavaVM * jvm_, long figureID, char * menuName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidremoveFigureMenujintjstringID = curEnv->GetStaticMethodID(cls, "removeFigureMenu", "(ILjava/lang/String;)V" ) ;
if (voidremoveFigureMenujintjstringID == NULL) {
std::cerr << "Could not access to the method " << "removeFigureMenu" << std::endl;
exit(EXIT_FAILURE);
}

jstring menuName_ = curEnv->NewStringUTF( menuName );

                         curEnv->CallStaticVoidMethod(cls, voidremoveFigureMenujintjstringID ,figureID, menuName_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::newFileChooser (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintnewFileChooserID = curEnv->GetStaticMethodID(cls, "newFileChooser", "()I" ) ;
if (jintnewFileChooserID == NULL) {
std::cerr << "Could not access to the method " << "newFileChooser" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintnewFileChooserID );
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

void CallScilabBridge::setFileChooserTitle (JavaVM * jvm_, long id, char * title){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserTitlejintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserTitle", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserTitlejintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserTitle" << std::endl;
exit(EXIT_FAILURE);
}

jstring title_ = curEnv->NewStringUTF( title );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserTitlejintjstringID ,id, title_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserInitialDirectory (JavaVM * jvm_, long id, char * path){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserInitialDirectoryjintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserInitialDirectory", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserInitialDirectoryjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserInitialDirectory" << std::endl;
exit(EXIT_FAILURE);
}

jstring path_ = curEnv->NewStringUTF( path );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserInitialDirectoryjintjstringID ,id, path_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserMask (JavaVM * jvm_, long id, char * mask){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserMaskjintjstringID = curEnv->GetStaticMethodID(cls, "setFileChooserMask", "(ILjava/lang/String;)V" ) ;
if (voidsetFileChooserMaskjintjstringID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserMask" << std::endl;
exit(EXIT_FAILURE);
}

jstring mask_ = curEnv->NewStringUTF( mask );

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserMaskjintjstringID ,id, mask_);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::fileChooserDisplayAndWait (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidfileChooserDisplayAndWaitjintID = curEnv->GetStaticMethodID(cls, "fileChooserDisplayAndWait", "(I)V" ) ;
if (voidfileChooserDisplayAndWaitjintID == NULL) {
std::cerr << "Could not access to the method " << "fileChooserDisplayAndWait" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidfileChooserDisplayAndWaitjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

long CallScilabBridge::getFileChooserSelectionSize (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetFileChooserSelectionSizejintID = curEnv->GetStaticMethodID(cls, "getFileChooserSelectionSize", "(I)I" ) ;
if (jintgetFileChooserSelectionSizejintID == NULL) {
std::cerr << "Could not access to the method " << "getFileChooserSelectionSize" << std::endl;
exit(EXIT_FAILURE);
}

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetFileChooserSelectionSizejintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
return res;

}

char ** CallScilabBridge::getFileChooserSelection (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jobjectArraygetFileChooserSelectionjintID = curEnv->GetStaticMethodID(cls, "getFileChooserSelection", "(I)[Ljava/lang/String;" ) ;
if (jobjectArraygetFileChooserSelectionjintID == NULL) {
std::cerr << "Could not access to the method " << "getFileChooserSelection" << std::endl;
exit(EXIT_FAILURE);
}

                        jobjectArray res =  (jobjectArray) curEnv->CallObjectMethod(cls, jobjectArraygetFileChooserSelectionjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
jsize len = curEnv->GetArrayLength(res);
char **arrayOfString;
                        arrayOfString= (char**)malloc ((len+1)*sizeof(char*));
for (jsize i = 0; i < len; i++){
jstring resString = (jstring)curEnv->GetObjectArrayElement(res, i);
const char *tempString = curEnv->GetStringUTFChars(resString, 0);
arrayOfString[i]= (char*)malloc ((strlen(tempString)+1)*sizeof(char));
strcpy(arrayOfString[i], tempString);
curEnv->ReleaseStringUTFChars(resString, tempString);
}

return arrayOfString;

}

void CallScilabBridge::setFileChooserDirectorySelectionOnly (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserDirectorySelectionOnlyjintID = curEnv->GetStaticMethodID(cls, "setFileChooserDirectorySelectionOnly", "(I)V" ) ;
if (voidsetFileChooserDirectorySelectionOnlyjintID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserDirectorySelectionOnly" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserDirectorySelectionOnlyjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

void CallScilabBridge::setFileChooserFileSelectionOnly (JavaVM * jvm_, long id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetFileChooserFileSelectionOnlyjintID = curEnv->GetStaticMethodID(cls, "setFileChooserFileSelectionOnly", "(I)V" ) ;
if (voidsetFileChooserFileSelectionOnlyjintID == NULL) {
std::cerr << "Could not access to the method " << "setFileChooserFileSelectionOnly" << std::endl;
exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidsetFileChooserFileSelectionOnlyjintID ,id);
                        
if (curEnv->ExceptionOccurred()) {
curEnv->ExceptionDescribe() ;
}

                        
}

}
