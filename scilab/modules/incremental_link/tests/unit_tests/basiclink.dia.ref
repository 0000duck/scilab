// basic test for link
foo=['void foo(double *a,double *b,double *c)';
     '{ *c = *a + *b; }'  ];
// we use TMPDIR for compilation
	
if ~c_link('foo') then
  path = getcwd();
  chdir(TMPDIR);
  mputl(foo,'foo.c');
  ilib_for_link(['foo'],'foo.o',[],"c");
   Generate a loader file
   Generate a Makefile
   Running the Makefile
   compilation of foo
   building shared library (be patient)
  // disable message
  warning_mode = warning('query');
  warning('off');
  // load the shared library
  exec loader.sce ;
  // enable message
  warning(warning_mode);
  chdir(path)
 ans  =
 
  T  
end	
//5+7 by C function
call('foo',5,1,'d',7,2,'d','out',[1,1],3,'d')
 ans  =
 
    12.  
// basic test for addinter
//--------------------------
if ~c_link('libintertest') then
  path = getcwd();
  copyfile(SCI+filesep()+'modules'+filesep()+'incremental_link'+filesep()+'tests'+filesep()+'unit_tests'+filesep()+'addinter.c', TMPDIR+filesep()+'addinter.c');
  chdir(TMPDIR);
  files=['addinter.o'];
  ilib_build('libintertest',['scifun1','intfun1'],files,[]);
   generate a gateway file
   generate a loader file
   generate a Makefile: Makelib
   running the makefile
   compilation of addinter
   building shared library (be patient)
  // disable message
  warning_mode = warning('query');
  warning('off');
  // load the shared library
  exec loader.sce ;
  // enable message
  warning(warning_mode);
  if norm(scifun1(%pi)- sin(%pi+1)/%pi ) > %eps then pause;end
  chdir(path);
end
