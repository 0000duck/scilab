SCIPAD BUGS AND WISHES LIST


Bugs:
-----
-issues related with non colorizing single quoted text:
  . code lines such as mprintf("%s",'this is a function') break the line
    number counting in functions if not properly colorized as textquoted.
    Solution could be to detect all quoted strings, with single or double
    quotes, and .textarea tag add some invisibletextquoted aside the
    existing (visible) textquoted tag used for colorization, and use only
    invisibletextquoted for Scilab function detection within buffers, in
    other words, separate the strings detection from their colorization

-proc blinkbrace blinks even if the brackets/braces are quoted, e.g. "[" "]"

-proc blinkquote blinks even for partially commented text, e.g.
 a "string.. // this is no "string

-On some platforms certain bindings for blinking character never trigger,
 e.g. for bracketleft on Windows (AltGr-5, french keyboard) one gets
 Control_L plus parenleft - this one however blinks through the parenleft
 binding, but others such as braceleft do never trigger and gives
 Control_L plus quoteright - depends on keyboard, platform and whatnot...

-Some shortcuts may not work on certain platforms. E.g. Control-F1 does not on
 at least one Mandrake 10.1 Official Linux. Was also found on a RH8 machine.

-On Windows, opening files and then closing one of them makes the remaining
 ones unselectable in the windows menu. This is Tk bug 1224330.
 The fix for the Tk bug exists and has beed applied to the Tk cvs tree.
 Tcl/Tk 8.4.14 as well as Tcl/Tk 8.5a5 include it but these versions are not
 yet released, and therefore a fortiori not used by Scilab.

-When a function definition line ends with a comment, the line numbering is
 wrong 1 unit, resulting is various strange behaviors: execution not stopping
 at breakpoints or not up-to-date value of variables in the watch window
 This is Scilab bug 1469 (outside of Scipad) that deals with the general
 issue of mismatch between line numbering as reported by fun2string and that
 held by the breakpoint handling

-logical line numbering issue:
   function a=foo(); a=1;
    a=2;
   endfunction
 In scipad, a=1 is on line 1; for scilab it is on line 2 of function foo
 Also related to bug 1469 - better wait for clarification on this one instead
 of working around Scilab parser bugs

-step-by-step debugging may highlight the wrong line in Scipad when continued
 lines without dots are present before the breakpoint stop. Bug 1469 again!!!

-Bug 1469 once more in the following case (mind the spaces before
 "endfunction"):
function test
  a=1
  endfunction
 In this case the debugger in single step mode will highlight line 1 after
 line 3 whereas this won't happen for:
function test
  a=1
endfunction

-anything can happen during debug if the same function name can be found more
 than once among the opened buffers, for instance the wrong buffer may become
 the active one to show the active breakpoint - same issue in configureexec:
 if a function is defined in more than one buffer, proc checkarglist may
 detect the wrong one and prevent correct configuration of the debugger

-Step over (F8) steps actually into (Shift-F8) libfuns when the libfun is in
 a nested function whose calling function contains the same libfun on the
 calling line, e.g. hitting F8 when the active breakpoint line is on line 3,
 i.e. a=evstr("1+1") will step into the evstr libfun whereas it should skip
 this statement:
function outerfun
function a=nestedfun
  a=evstr("1+1")
endfunction
b=evstr(string(nestedfun()))
endfunction
 There is no obvious way to avoid this. evstr must be breakpointed in case
 hitting F8 makes Scilab go out of function nestedfun. Since there is no
 way to know in advance whether the next step will fly out of the current
 function or not, evstr must be breakpointed at this point of the debug.

-Step over (F8) steps actually into (Shift-F8) when the next line calls
 the same function as the one the debugger is currently in (recursive
 call) - Similar issue than the previous one: the current function must
 be breakpointed on every line since there is no way to know where the
 next stop will be, and this makes a recursive call look like a step into

-modselection bugs:
  . <TODO> Ctrl-d with a selection starting in the middle of a line -> indent
    the first line from column 0
  . <TODO> Ctrl-m without selection -> // at the insert point (not at the
    beginning of the line)
  . When a line contains leading tabs and you hit ctrl-d and tab key
    inserts spaces, each of these leading tabs are replaced by a *single*
    space. It should be $indentspaces spaces.
  . Unindenting a line with leading tabs does nothing. It should unindent.
  . The indentation scheme should take into account the "Tab inserts..."
    settings from the option menu. Actually as far as I understand/tried
    indent/unindent always uses spaces. Using tabs instead when "Tab inserts
    spaces" is unchecked would be a valuable improvement since some users
    still use tabs to indent. Ctrl-d/D should transform existing tabs into
    spaces or viceversa depending on the option,


Old bugs/whishes which have been hacked but could have been done better:
------------------------------------------------------------------------

-the window geometry is now managed in pixels. This is fine for restoring
 exactly the same window geometry as in the previous session, but loses
 some advantages of the previously broken grid management, such as resize
 of the window upon font size changes.

-2nd-button now succeeds in importing an X external selection into scipad
 under linux. With one remaining glitch, the insertion cursor zomps back
 to the beginning of the insertion at the end of the process.
 Under windows 2nd-button is ineffective if the selection is external, 
 but has the side effect (with some glitches) to drop at the mouse point the
 selection it is within scipad
 On Windows:btn-2 in the same textarea as the selection: it's a move (wrong!),
 while btn-2 in another textarea: it's a copy/paste
 On Linux: always copy/paste (correct)

-Make printing from Scipad work on Linux and implement it for Windows.
 Try to preserve the colorization in the process.
 Possible references for implementation on a Windows box are:
 http://wiki.tcl.tk/11319
 http://wiki.tcl.tk/9846
 http://pages.infinit.net/cclients/files/tkprint1.1.html
 http://wiki.tcl.tk/2497
 http://aspn.activestate.com/ASPN/Cookbook/Tcl/Recipe/284848
 Tk request 734625 (Output the contents of a text widget to a (PostScript) file)
 Tk request 220817 (Direct Print Support for all widgets)
 http://www.du.edu/~mschwart/tclextensions.html (printer extension)
 http://www.nyx.net/~mschwart/ (printer extension)
 -- Printing works on Linux and now also on Windows. It makes use of Scilab
    internal new functions that does not preserve colorization. I'm convinced
    that an internal Tk printing scheme would be better.

-trying to debug functions with names > 24 characters does not work. This is
 a very general Scilab limitation (in the debugger context, setbpt looses
 characters for long names, that's why it doesn't work). Currently 
 a check on name length when colorizing user functions has been added to
 remind the user from this limit. Only this visual hint is provided, i.e.
 configure execution will propose too long names. Scipad or the debugger
 is not limited to 24 chars, but Scilab still is. Let's wait for Scilab
 improvement instead of restraining the debugger!


Wishes:
-------

Debugger wishes:

-Better help for the debugger. help debug should either have a dedicated
 page for the debugger or the existing debug page should have a note pointing
 at help scipad

-Conditional breakpoints

-Allow to watch a generic expression (bonus: the expression could be e.g.
 a graphical command, so that an array is *plotted* at each breakpoint)
 Way to go: add a pane with expressions to be executed and result of their
 evaluation displayed in the watch window area (e.g. size(a_matrix,"*"))

-Add a field showing the type (and size) of the variables displayed in the
 watch window

-Scipad defines and uses, mostly for the debugger, some variables in order to
 send values to Scipad. All these variables currently start with the prefix 
 db_, in order to reduce the risk of the use of such variable names in Scilab
 for another purpose, e.g. in the function to be debugged. We could use more
 sophisticated things to be absolutely sure that the variable names 
 instantiated by Scipad are not used in Scilab, so that conflicts would 
 always be avoided. For instance, browsing the existing known
 variables and checking for existence, etc. could be used (who, who_user...)

-Avoid to destroy and recreate the whole watch window when hiding/displaying
 one of its sub-areas. Would probably require -hide option for panedwindow,
 but this one is only available from Tk 8.5 (TIP #179) - Use the global
 variable Tk85

-include profiling into the debugger

-breakpoint and activebreakpoint tags are not visible when selected. No
 solution found so far. Only one tag with -background option has highest
 priority, and there is no -selectbackground option for tags

-watching some very large variable content looks like the variable is empty
 This is Tk bug 1449858.

-add a debugger command: "Show next instruction", with a little yellow arrow
 in the margin


Other wishes:

-parentheses and brackets get colorized in colors according to their level
 of nesting

-unmatched parentheses are highlighted (e.g. stroke-tru) like in Matlab's 
 editor

-highlighting of for--end, while--end, select--end blocks while
 typing, like for parentheses; scope background remains highlighted in a
 background tint (choose a suitable scheme for nested structures), OR,
 block keywords are highlighted in different colors than standard keywords.

-a taylored 3rd-button popup menu (currently it is just the edit menu) - i.e.
 it includes execute selection, comment/uncomment this line, insert/delete
 breakpoints
 Note: a first step to this has been implemented. During a debug session, 
 the popup menu is a debug menu.

-smart indentation (i.e., for automatically indents the next line, end
 automatically indents back, etc)
 Note: proc scipadindent should be removed, since scipad now uses physical
 indentation
 
-"auto smart wrap on": lines exceeding a margin could be truncated at
 word boundaries with .. dots and \n
 
-(customizable?) tool bar
 Note: a first step to this has been implemented in the debugger watch window.

-Improve the aesthetics of Scipad (see sciGUI)
   . Find dialog (use labelframe)

-Blink single quotes. More difficult than to blink double quotes because
 of the transpose case

-'Matlab' colorization scheme for .m files

-Highlight wrapped lines so that they can be more easily identified.
 Could make use of indentation or other suitable scheme TBD, or add
 some sort of left grey band in which some more information could be
 put (breakpoint pink dot, yellow arrow to show the next instruction
 to be executed like in Visual C++ or Matlab, or wrapped lines sign).

-Block selection, copy/paste, move with dnd, indent/unindent, comment
 and uncomment. See last snaphot in http://www.winedt.com/ for an
 example. Add an option to toggle between line mode (current mode) and
 block mode. In block mode, word wrapping should be disabled. This is
 part of request 179.

-Add an eventual "revert to defaults button" (colors option menu)

-Currently any character typed in the buffer is inserted if there is
 no selection. Add a mode toggled by the Ins key in which characters
 would replace the existing ones. Add a visual indicator of this state.
 Note: this should be manageable in Tk8.4 using a combination of a delete
 and an insert (or perhaps selecting the next character and then puttext)
 but there is a new text widget subcommand .text replace in Tk 8.5
 that will do it at once and manage the undo/redo stacks at the same time.
 See TIP #155 for details: http://www.cs.man.ac.uk/fellowsd-bin/TIP/155.html
 .text replace is available at least from 8.5a3

-paned window to allow for viewing two different parts of the same text buffer
 at the same time. Would be nice if the output of .text -dump could be feeded
 into another text widget, but it's not currently the case.
 Another (better) approach would be peer text widget as described in TIP #169:
 http://www.tcl.tk/cgi-bin/tct/tip/169.html (this is already available in
 Tk 8.5a3)
 F6/F7 should display the next/previous buffer of the full list in the
 current active pane only, creating peer widgets as necessary
 -- Waiting for Scilab's adoption of 8.5, maybe Scipad could implement it
    in advance in order to be ready for the transition to 8.5 and make use
    of its functions without delay. A global variable Tk85 already exists
    in Scipad for similar purposes and could be used to make Scipad work
    both with 8.4 and 8.5 (and use peer widgets of 8.5)

-*maybe* a global undo stack instead of one per buffer
 advantages: can undo at once a dnd from one pane to another one
 drawbacks : big big implementation work if the built-in undo of the text
             widget was abandoned, but maybe it could be feasible to detect
             changes in the undo stacks of more than one buffer at the same
             time - still tricky...

-minimal Scipad wm size: Probably it would be wise to make the minimum
 dependent on the number of tiles, so that all the features (menu, title,
 textbuffer, scrollbars...) remain visible - take fontsize and locale into
 account
 warning: updating minsize on file open or dnd could lead to a very large
 window, therefore minsize should also be clamped to some clever maximum

-Improvements for find/replace:
  . The find/replace entries in the dialog could be comboboxes retaining
    the strings previously searched or replaced
      o combobox 2.3 and BWidgets 1.7.0 are currently in the Scilab distro
        and both provide comboboxes. We could link Scipad to them, but
        apparently the Tile package, which also provides combos, is now
        included in Tk and will be part of Tk 8.5.
  . Search among tagged text only, e.g. among comments (must be consistent
    with the language scheme)
  . Popup menu providing a list of ready cooked regexps
  . Multiline find/replace and find in files (must wait Tk8.5 since .text
    search searches on a per line basis - or use regexp instead of .text
    search, big work...) - Automatically expand the entry widgets size
    according to the length of what is pasted inside them
  . More than one results window for find in files (user can select a
    target window that will contain the search results)
  . More than one find in files thread at the same time
  . Add a Pause button in the find in files results window

-Add an option menu about the sorting of the buffers in the Windows menu.
 Possible options could be:
   . "Sort by opening order" (which is the current way it is) - keep it?
   . "Sort alphabetically"
   . "Sort by MRU" (Most Recently Used)

-Add underlined numbers in the Windows menu, as for the File menu.

-Perhaps rethink how to sort out the duplication of "Open", "Open in
 new", "Open Source of.." and "Open function source". Four entries
 scattered in the same menu starts to be much...

-detect duplicate/missing underlines detection in the message files

-Improve further the regexps for continued lines detection, the goal being
 to detect only legal (in the Scilab parser sense) continued lines.

-Emacs bindings in Scipad. Proposed list is at:
http://groups.google.fr/group/comp.soft-sys.math.scilab/browse_thread/thread/dc0807b11fb118ab/9fe94a45d23f92fe

-Add a function "Beautify code" for Scilab schemes: (optionally) suppress
 tabs, and reindents according to keywords (if, function, while, for...)

-Request 262: tabbed buffers (see discussion in this request)

-The textarea itself is never destroyed, even when closing a file. What
 was the reason for this again (if any)?
