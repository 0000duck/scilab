// Generated by llvm2cpp - DO NOT MODIFY!


Module* makeLLVMModuleContents(Module *mod)
{

    mod->setModuleIdentifier("src/cpp/llvm-wrapper.bc");

    // Type Definitions
    StructType *StructTy_class_std__ios_base__Init = mod->getTypeByName("class.std::ios_base::Init");
    if (!StructTy_class_std__ios_base__Init)
    {
        StructTy_class_std__ios_base__Init = StructType::create(mod->getContext(), "class.std::ios_base::Init");
    }
    std::vector<Type*>StructTy_class_std__ios_base__Init_fields;
    StructTy_class_std__ios_base__Init_fields.push_back(IntegerType::get(mod->getContext(), 8));
    if (StructTy_class_std__ios_base__Init->isOpaque())
    {
        StructTy_class_std__ios_base__Init->setBody(StructTy_class_std__ios_base__Init_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_0 = PointerType::get(StructTy_class_std__ios_base__Init, 0);

    PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

    std::vector<Type*>StructTy_3_fields;
    StructTy_3_fields.push_back(IntegerType::get(mod->getContext(), 32));
    std::vector<Type*>FuncTy_5_args;
    FunctionType* FuncTy_5 = FunctionType::get(
                                 /*Result=*/Type::getVoidTy(mod->getContext()),
                                 /*Params=*/FuncTy_5_args,
                                 /*isVarArg=*/false);

    PointerType* PointerTy_4 = PointerType::get(FuncTy_5, 0);

    StructTy_3_fields.push_back(PointerTy_4);
    StructType *StructTy_3 = StructType::get(mod->getContext(), StructTy_3_fields, /*isPacked=*/false);

    ArrayType* ArrayTy_2 = ArrayType::get(StructTy_3, 1);

    PointerType* PointerTy_6 = PointerType::get(ArrayTy_2, 0);

    std::vector<Type*>FuncTy_8_args;
    FuncTy_8_args.push_back(PointerTy_0);
    FunctionType* FuncTy_8 = FunctionType::get(
                                 /*Result=*/Type::getVoidTy(mod->getContext()),
                                 /*Params=*/FuncTy_8_args,
                                 /*isVarArg=*/false);

    PointerType* PointerTy_7 = PointerType::get(FuncTy_8, 0);

    std::vector<Type*>FuncTy_10_args;
    FuncTy_10_args.push_back(PointerTy_1);
    FunctionType* FuncTy_10 = FunctionType::get(
                                  /*Result=*/Type::getVoidTy(mod->getContext()),
                                  /*Params=*/FuncTy_10_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_9 = PointerType::get(FuncTy_10, 0);

    std::vector<Type*>FuncTy_12_args;
    FuncTy_12_args.push_back(PointerTy_9);
    FuncTy_12_args.push_back(PointerTy_1);
    FuncTy_12_args.push_back(PointerTy_1);
    FunctionType* FuncTy_12 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_12_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_11 = PointerType::get(FuncTy_12, 0);

    std::vector<Type*>FuncTy_13_args;
    FunctionType* FuncTy_13 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_13_args,
                                  /*isVarArg=*/false);

    StructType *StructTy_class_types__Double = mod->getTypeByName("class.types::Double");
    if (!StructTy_class_types__Double)
    {
        StructTy_class_types__Double = StructType::create(mod->getContext(), "class.types::Double");
    }
    std::vector<Type*>StructTy_class_types__Double_fields;
    StructType *StructTy_class_types__ArrayOf = mod->getTypeByName("class.types::ArrayOf");
    if (!StructTy_class_types__ArrayOf)
    {
        StructTy_class_types__ArrayOf = StructType::create(mod->getContext(), "class.types::ArrayOf");
    }
    std::vector<Type*>StructTy_class_types__ArrayOf_fields;
    StructType *StructTy_class_types__GenericType = mod->getTypeByName("class.types::GenericType");
    if (!StructTy_class_types__GenericType)
    {
        StructTy_class_types__GenericType = StructType::create(mod->getContext(), "class.types::GenericType");
    }
    std::vector<Type*>StructTy_class_types__GenericType_fields;
    ArrayType* ArrayTy_16 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 36);

    StructTy_class_types__GenericType_fields.push_back(ArrayTy_16);
    StructTy_class_types__GenericType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__GenericType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__GenericType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__GenericType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    ArrayType* ArrayTy_17 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 50);

    StructTy_class_types__GenericType_fields.push_back(ArrayTy_17);
    StructTy_class_types__GenericType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    if (StructTy_class_types__GenericType->isOpaque())
    {
        StructTy_class_types__GenericType->setBody(StructTy_class_types__GenericType_fields, /*isPacked=*/false);
    }

    StructTy_class_types__ArrayOf_fields.push_back(StructTy_class_types__GenericType);
    StructTy_class_types__ArrayOf_fields.push_back(IntegerType::get(mod->getContext(), 8));
    PointerType* PointerTy_18 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);

    StructTy_class_types__ArrayOf_fields.push_back(PointerTy_18);
    StructTy_class_types__ArrayOf_fields.push_back(PointerTy_18);
    if (StructTy_class_types__ArrayOf->isOpaque())
    {
        StructTy_class_types__ArrayOf->setBody(StructTy_class_types__ArrayOf_fields, /*isPacked=*/false);
    }

    StructTy_class_types__Double_fields.push_back(StructTy_class_types__ArrayOf);
    StructTy_class_types__Double_fields.push_back(IntegerType::get(mod->getContext(), 8));
    StructTy_class_types__Double_fields.push_back(IntegerType::get(mod->getContext(), 8));
    if (StructTy_class_types__Double->isOpaque())
    {
        StructTy_class_types__Double->setBody(StructTy_class_types__Double_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_15 = PointerType::get(StructTy_class_types__Double, 0);

    PointerType* PointerTy_14 = PointerType::get(PointerTy_15, 0);

    StructType *StructTy_class_types__Bool = mod->getTypeByName("class.types::Bool");
    if (!StructTy_class_types__Bool)
    {
        StructTy_class_types__Bool = StructType::create(mod->getContext(), "class.types::Bool");
    }
    std::vector<Type*>StructTy_class_types__Bool_fields;
    StructType *StructTy_class_types__ArrayOf_0 = mod->getTypeByName("class.types::ArrayOf.0");
    if (!StructTy_class_types__ArrayOf_0)
    {
        StructTy_class_types__ArrayOf_0 = StructType::create(mod->getContext(), "class.types::ArrayOf.0");
    }
    std::vector<Type*>StructTy_class_types__ArrayOf_0_fields;
    StructTy_class_types__ArrayOf_0_fields.push_back(StructTy_class_types__GenericType);
    StructTy_class_types__ArrayOf_0_fields.push_back(IntegerType::get(mod->getContext(), 8));
    PointerType* PointerTy_21 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

    StructTy_class_types__ArrayOf_0_fields.push_back(PointerTy_21);
    StructTy_class_types__ArrayOf_0_fields.push_back(PointerTy_21);
    if (StructTy_class_types__ArrayOf_0->isOpaque())
    {
        StructTy_class_types__ArrayOf_0->setBody(StructTy_class_types__ArrayOf_0_fields, /*isPacked=*/false);
    }

    StructTy_class_types__Bool_fields.push_back(StructTy_class_types__ArrayOf_0);
    if (StructTy_class_types__Bool->isOpaque())
    {
        StructTy_class_types__Bool->setBody(StructTy_class_types__Bool_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_20 = PointerType::get(StructTy_class_types__Bool, 0);

    PointerType* PointerTy_19 = PointerType::get(PointerTy_20, 0);

    StructType *StructTy_class_symbol__Symbol = mod->getTypeByName("class.symbol::Symbol");
    if (!StructTy_class_symbol__Symbol)
    {
        StructTy_class_symbol__Symbol = StructType::create(mod->getContext(), "class.symbol::Symbol");
    }
    std::vector<Type*>StructTy_class_symbol__Symbol_fields;
    StructType *StructTy_struct_std___Rb_tree_const_iterator = mod->getTypeByName("struct.std::_Rb_tree_const_iterator");
    if (!StructTy_struct_std___Rb_tree_const_iterator)
    {
        StructTy_struct_std___Rb_tree_const_iterator = StructType::create(mod->getContext(), "struct.std::_Rb_tree_const_iterator");
    }
    std::vector<Type*>StructTy_struct_std___Rb_tree_const_iterator_fields;
    StructType *StructTy_struct_std___Rb_tree_node_base = mod->getTypeByName("struct.std::_Rb_tree_node_base");
    if (!StructTy_struct_std___Rb_tree_node_base)
    {
        StructTy_struct_std___Rb_tree_node_base = StructType::create(mod->getContext(), "struct.std::_Rb_tree_node_base");
    }
    std::vector<Type*>StructTy_struct_std___Rb_tree_node_base_fields;
    StructTy_struct_std___Rb_tree_node_base_fields.push_back(IntegerType::get(mod->getContext(), 32));
    PointerType* PointerTy_24 = PointerType::get(StructTy_struct_std___Rb_tree_node_base, 0);

    StructTy_struct_std___Rb_tree_node_base_fields.push_back(PointerTy_24);
    StructTy_struct_std___Rb_tree_node_base_fields.push_back(PointerTy_24);
    StructTy_struct_std___Rb_tree_node_base_fields.push_back(PointerTy_24);
    if (StructTy_struct_std___Rb_tree_node_base->isOpaque())
    {
        StructTy_struct_std___Rb_tree_node_base->setBody(StructTy_struct_std___Rb_tree_node_base_fields, /*isPacked=*/false);
    }


    StructTy_struct_std___Rb_tree_const_iterator_fields.push_back(PointerTy_24);
    if (StructTy_struct_std___Rb_tree_const_iterator->isOpaque())
    {
        StructTy_struct_std___Rb_tree_const_iterator->setBody(StructTy_struct_std___Rb_tree_const_iterator_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Symbol_fields.push_back(StructTy_struct_std___Rb_tree_const_iterator);
    if (StructTy_class_symbol__Symbol->isOpaque())
    {
        StructTy_class_symbol__Symbol->setBody(StructTy_class_symbol__Symbol_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_23 = PointerType::get(StructTy_class_symbol__Symbol, 0);

    PointerType* PointerTy_22 = PointerType::get(PointerTy_23, 0);

    std::vector<Type*>FuncTy_26_args;
    FunctionType* FuncTy_26 = FunctionType::get(
                                  /*Result=*/PointerTy_15,
                                  /*Params=*/FuncTy_26_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_25 = PointerType::get(FuncTy_26, 0);

    std::vector<Type*>FuncTy_28_args;
    FuncTy_28_args.push_back(PointerTy_15);
    FuncTy_28_args.push_back(PointerTy_15);
    FuncTy_28_args.push_back(PointerTy_14);
    FunctionType* FuncTy_28 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_28_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_27 = PointerType::get(FuncTy_28, 0);

    std::vector<Type*>FuncTy_30_args;
    FuncTy_30_args.push_back(PointerTy_15);
    FuncTy_30_args.push_back(PointerTy_15);
    FuncTy_30_args.push_back(PointerTy_19);
    FunctionType* FuncTy_30 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_30_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_29 = PointerType::get(FuncTy_30, 0);

    StructType *StructTy_class_symbol__Context = mod->getTypeByName("class.symbol::Context");
    if (!StructTy_class_symbol__Context)
    {
        StructTy_class_symbol__Context = StructType::create(mod->getContext(), "class.symbol::Context");
    }
    std::vector<Type*>StructTy_class_symbol__Context_fields;
    StructType *StructTy_class_symbol__Stack = mod->getTypeByName("class.symbol::Stack");
    if (!StructTy_class_symbol__Stack)
    {
        StructTy_class_symbol__Stack = StructType::create(mod->getContext(), "class.symbol::Stack");
    }
    std::vector<Type*>StructTy_class_symbol__Stack_fields;
    StructType *StructTy_class_symbol__Table = mod->getTypeByName("class.symbol::Table");
    if (!StructTy_class_symbol__Table)
    {
        StructTy_class_symbol__Table = StructType::create(mod->getContext(), "class.symbol::Table");
    }
    std::vector<Type*>StructTy_class_symbol__Table_fields;
    std::vector<Type*>FuncTy_34_args;
    FunctionType* FuncTy_34 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_34_args,
                                  /*isVarArg=*/true);

    PointerType* PointerTy_33 = PointerType::get(FuncTy_34, 0);

    PointerType* PointerTy_32 = PointerType::get(PointerTy_33, 0);

    StructTy_class_symbol__Table_fields.push_back(PointerTy_32);
    StructType *StructTy_class_std__list = mod->getTypeByName("class.std::list");
    if (!StructTy_class_std__list)
    {
        StructTy_class_std__list = StructType::create(mod->getContext(), "class.std::list");
    }
    std::vector<Type*>StructTy_class_std__list_fields;
    StructType *StructTy_class_std___List_base = mod->getTypeByName("class.std::_List_base");
    if (!StructTy_class_std___List_base)
    {
        StructTy_class_std___List_base = StructType::create(mod->getContext(), "class.std::_List_base");
    }
    std::vector<Type*>StructTy_class_std___List_base_fields;
    StructType *StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl = mod->getTypeByName("struct.std::_List_base<symbol::Scope *, std::allocator<symbol::Scope *> >::_List_impl");
    if (!StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl)
    {
        StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl = StructType::create(mod->getContext(), "struct.std::_List_base<symbol::Scope *, std::allocator<symbol::Scope *> >::_List_impl");
    }
    std::vector<Type*>StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl_fields;
    StructType *StructTy_struct_std____detail___List_node_base = mod->getTypeByName("struct.std::__detail::_List_node_base");
    if (!StructTy_struct_std____detail___List_node_base)
    {
        StructTy_struct_std____detail___List_node_base = StructType::create(mod->getContext(), "struct.std::__detail::_List_node_base");
    }
    std::vector<Type*>StructTy_struct_std____detail___List_node_base_fields;
    PointerType* PointerTy_35 = PointerType::get(StructTy_struct_std____detail___List_node_base, 0);

    StructTy_struct_std____detail___List_node_base_fields.push_back(PointerTy_35);
    StructTy_struct_std____detail___List_node_base_fields.push_back(PointerTy_35);
    if (StructTy_struct_std____detail___List_node_base->isOpaque())
    {
        StructTy_struct_std____detail___List_node_base->setBody(StructTy_struct_std____detail___List_node_base_fields, /*isPacked=*/false);
    }

    StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl_fields.push_back(StructTy_struct_std____detail___List_node_base);
    if (StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl->isOpaque())
    {
        StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl->setBody(StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl_fields, /*isPacked=*/false);
    }

    StructTy_class_std___List_base_fields.push_back(StructTy_struct_std___List_base_symbol__Scope____std__allocator_symbol__Scope________List_impl);
    if (StructTy_class_std___List_base->isOpaque())
    {
        StructTy_class_std___List_base->setBody(StructTy_class_std___List_base_fields, /*isPacked=*/false);
    }

    StructTy_class_std__list_fields.push_back(StructTy_class_std___List_base);
    if (StructTy_class_std__list->isOpaque())
    {
        StructTy_class_std__list->setBody(StructTy_class_std__list_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Table_fields.push_back(StructTy_class_std__list);
    if (StructTy_class_symbol__Table->isOpaque())
    {
        StructTy_class_symbol__Table->setBody(StructTy_class_symbol__Table_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Stack_fields.push_back(StructTy_class_symbol__Table);
    if (StructTy_class_symbol__Stack->isOpaque())
    {
        StructTy_class_symbol__Stack->setBody(StructTy_class_symbol__Stack_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Context_fields.push_back(StructTy_class_symbol__Stack);
    StructType *StructTy_class_symbol__Heap = mod->getTypeByName("class.symbol::Heap");
    if (!StructTy_class_symbol__Heap)
    {
        StructTy_class_symbol__Heap = StructType::create(mod->getContext(), "class.symbol::Heap");
    }
    std::vector<Type*>StructTy_class_symbol__Heap_fields;
    StructTy_class_symbol__Heap_fields.push_back(PointerTy_20);
    StructType *StructTy_class_std__map = mod->getTypeByName("class.std::map");
    if (!StructTy_class_std__map)
    {
        StructTy_class_std__map = StructType::create(mod->getContext(), "class.std::map");
    }
    std::vector<Type*>StructTy_class_std__map_fields;
    StructType *StructTy_class_std___Rb_tree = mod->getTypeByName("class.std::_Rb_tree");
    if (!StructTy_class_std___Rb_tree)
    {
        StructTy_class_std___Rb_tree = StructType::create(mod->getContext(), "class.std::_Rb_tree");
    }
    std::vector<Type*>StructTy_class_std___Rb_tree_fields;
    StructType *StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl = mod->getTypeByName("struct.std::_Rb_tree<symbol::Symbol, std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *>, std::_Select1st<std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *> >, std::less<symbol::Symbol>, std::allocator<std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *> > >::_Rb_tree_impl");
    if (!StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl)
    {
        StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl = StructType::create(mod->getContext(), "struct.std::_Rb_tree<symbol::Symbol, std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *>, std::_Select1st<std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *> >, std::less<symbol::Symbol>, std::allocator<std::pair<const symbol::Symbol, std::list<symbol::Scope *, std::allocator<symbol::Scope *> > *> > >::_Rb_tree_impl");
    }
    std::vector<Type*>StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl_fields;
    StructType *StructTy_struct_std__less = mod->getTypeByName("struct.std::less");
    if (!StructTy_struct_std__less)
    {
        StructTy_struct_std__less = StructType::create(mod->getContext(), "struct.std::less");
    }
    std::vector<Type*>StructTy_struct_std__less_fields;
    StructTy_struct_std__less_fields.push_back(IntegerType::get(mod->getContext(), 8));
    if (StructTy_struct_std__less->isOpaque())
    {
        StructTy_struct_std__less->setBody(StructTy_struct_std__less_fields, /*isPacked=*/false);
    }

    StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl_fields.push_back(StructTy_struct_std__less);
    StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl_fields.push_back(StructTy_struct_std___Rb_tree_node_base);
    StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl_fields.push_back(IntegerType::get(mod->getContext(), 64));
    if (StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl->isOpaque())
    {
        StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl->setBody(StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl_fields, /*isPacked=*/false);
    }

    StructTy_class_std___Rb_tree_fields.push_back(StructTy_struct_std___Rb_tree_symbol__Symbol__std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope__________std___Select1st_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope____________std__less_symbol__Symbol___std__allocator_std__pair_const_symbol__Symbol__std__list_symbol__Scope____std__allocator_symbol__Scope_______________Rb_tree_impl);
    if (StructTy_class_std___Rb_tree->isOpaque())
    {
        StructTy_class_std___Rb_tree->setBody(StructTy_class_std___Rb_tree_fields, /*isPacked=*/false);
    }

    StructTy_class_std__map_fields.push_back(StructTy_class_std___Rb_tree);
    if (StructTy_class_std__map->isOpaque())
    {
        StructTy_class_std__map->setBody(StructTy_class_std__map_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Heap_fields.push_back(StructTy_class_std__map);
    StructTy_class_symbol__Heap_fields.push_back(StructTy_class_std__list);
    if (StructTy_class_symbol__Heap->isOpaque())
    {
        StructTy_class_symbol__Heap->setBody(StructTy_class_symbol__Heap_fields, /*isPacked=*/false);
    }

    StructTy_class_symbol__Context_fields.push_back(StructTy_class_symbol__Heap);
    StructTy_class_symbol__Context_fields.push_back(StructTy_class_symbol__Stack);
    if (StructTy_class_symbol__Context->isOpaque())
    {
        StructTy_class_symbol__Context->setBody(StructTy_class_symbol__Context_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_31 = PointerType::get(StructTy_class_symbol__Context, 0);

    std::vector<Type*>FuncTy_37_args;
    FunctionType* FuncTy_37 = FunctionType::get(
                                  /*Result=*/PointerTy_31,
                                  /*Params=*/FuncTy_37_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_36 = PointerType::get(FuncTy_37, 0);

    StructType *StructTy_class_types__InternalType = mod->getTypeByName("class.types::InternalType");
    if (!StructTy_class_types__InternalType)
    {
        StructTy_class_types__InternalType = StructType::create(mod->getContext(), "class.types::InternalType");
    }
    std::vector<Type*>StructTy_class_types__InternalType_fields;
    StructTy_class_types__InternalType_fields.push_back(PointerTy_32);
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 8));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 8));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    StructTy_class_types__InternalType_fields.push_back(IntegerType::get(mod->getContext(), 32));
    if (StructTy_class_types__InternalType->isOpaque())
    {
        StructTy_class_types__InternalType->setBody(StructTy_class_types__InternalType_fields, /*isPacked=*/false);
    }

    PointerType* PointerTy_38 = PointerType::get(StructTy_class_types__InternalType, 0);

    std::vector<Type*>FuncTy_40_args;
    FuncTy_40_args.push_back(PointerTy_31);
    FuncTy_40_args.push_back(PointerTy_23);
    FuncTy_40_args.push_back(PointerTy_38);
    FunctionType* FuncTy_40 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 1),
                                  /*Params=*/FuncTy_40_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_39 = PointerType::get(FuncTy_40, 0);

    std::vector<Type*>FuncTy_42_args;
    FuncTy_42_args.push_back(PointerTy_31);
    FuncTy_42_args.push_back(PointerTy_23);
    FunctionType* FuncTy_42 = FunctionType::get(
                                  /*Result=*/PointerTy_38,
                                  /*Params=*/FuncTy_42_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_41 = PointerType::get(FuncTy_42, 0);

    PointerType* PointerTy_43 = PointerType::get(StructTy_class_types__ArrayOf_0, 0);

    std::vector<Type*>FuncTy_45_args;
    FuncTy_45_args.push_back(PointerTy_43);
    FuncTy_45_args.push_back(IntegerType::get(mod->getContext(), 32));
    FunctionType* FuncTy_45 = FunctionType::get(
                                  /*Result=*/IntegerType::get(mod->getContext(), 32),
                                  /*Params=*/FuncTy_45_args,
                                  /*isVarArg=*/false);

    PointerType* PointerTy_44 = PointerType::get(FuncTy_45, 0);

    PointerType* PointerTy_46 = PointerType::get(PointerTy_43, 0);

    PointerType* PointerTy_47 = PointerType::get(PointerTy_21, 0);


    // Function Declarations

    Function* func___cxx_global_var_init = mod->getFunction("__cxx_global_var_init");
    if (!func___cxx_global_var_init)
    {
        func___cxx_global_var_init = Function::Create(
                                         /*Type=*/FuncTy_5,
                                         /*Linkage=*/GlobalValue::InternalLinkage,
                                         /*Name=*/"__cxx_global_var_init", mod);
        func___cxx_global_var_init->setCallingConv(CallingConv::C);
        func___cxx_global_var_init->setSection(".text.startup");
    }
    AttributeSet func___cxx_global_var_init_PAL;
    func___cxx_global_var_init->setAttributes(func___cxx_global_var_init_PAL);

    Function* func__ZNSt8ios_base4InitC1Ev = mod->getFunction("_ZNSt8ios_base4InitC1Ev");
    if (!func__ZNSt8ios_base4InitC1Ev)
    {
        func__ZNSt8ios_base4InitC1Ev = Function::Create(
                                           /*Type=*/FuncTy_8,
                                           /*Linkage=*/GlobalValue::ExternalLinkage,
                                           /*Name=*/"_ZNSt8ios_base4InitC1Ev", mod); // (external, no body)
        func__ZNSt8ios_base4InitC1Ev->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZNSt8ios_base4InitC1Ev_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZNSt8ios_base4InitC1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZNSt8ios_base4InitC1Ev->setAttributes(func__ZNSt8ios_base4InitC1Ev_PAL);

    Function* func__ZNSt8ios_base4InitD1Ev = mod->getFunction("_ZNSt8ios_base4InitD1Ev");
    if (!func__ZNSt8ios_base4InitD1Ev)
    {
        func__ZNSt8ios_base4InitD1Ev = Function::Create(
                                           /*Type=*/FuncTy_8,
                                           /*Linkage=*/GlobalValue::ExternalLinkage,
                                           /*Name=*/"_ZNSt8ios_base4InitD1Ev", mod); // (external, no body)
        func__ZNSt8ios_base4InitD1Ev->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZNSt8ios_base4InitD1Ev_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZNSt8ios_base4InitD1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZNSt8ios_base4InitD1Ev->setAttributes(func__ZNSt8ios_base4InitD1Ev_PAL);

    Function* func___cxa_atexit = mod->getFunction("__cxa_atexit");
    if (!func___cxa_atexit)
    {
        func___cxa_atexit = Function::Create(
                                /*Type=*/FuncTy_12,
                                /*Linkage=*/GlobalValue::ExternalLinkage,
                                /*Name=*/"__cxa_atexit", mod); // (external, no body)
        func___cxa_atexit->setCallingConv(CallingConv::C);
    }
    AttributeSet func___cxa_atexit_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            B.addAttribute(Attribute::NoUnwind);
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func___cxa_atexit_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func___cxa_atexit->setAttributes(func___cxa_atexit_PAL);

    Function* func__Z3foov = mod->getFunction("_Z3foov");
    if (!func__Z3foov)
    {
        func__Z3foov = Function::Create(
                           /*Type=*/FuncTy_13,
                           /*Linkage=*/GlobalValue::ExternalLinkage,
                           /*Name=*/"_Z3foov", mod);
        func__Z3foov->setCallingConv(CallingConv::C);
    }
    AttributeSet func__Z3foov_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            B.addAttribute(Attribute::UWTable);
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__Z3foov_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__Z3foov->setAttributes(func__Z3foov_PAL);

    Function* func__ZN5types6Double5EmptyEv = mod->getFunction("_ZN5types6Double5EmptyEv");
    if (!func__ZN5types6Double5EmptyEv)
    {
        func__ZN5types6Double5EmptyEv = Function::Create(
                                            /*Type=*/FuncTy_26,
                                            /*Linkage=*/GlobalValue::ExternalLinkage,
                                            /*Name=*/"_ZN5types6Double5EmptyEv", mod); // (external, no body)
        func__ZN5types6Double5EmptyEv->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZN5types6Double5EmptyEv_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZN5types6Double5EmptyEv_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZN5types6Double5EmptyEv->setAttributes(func__ZN5types6Double5EmptyEv_PAL);

    Function* func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_ = mod->getFunction("_Z17AddDoubleToDoublePN5types6DoubleES1_PS1_");
    if (!func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_)
    {
        func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_ = Function::Create(
                    /*Type=*/FuncTy_28,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_Z17AddDoubleToDoublePN5types6DoubleES1_PS1_", mod); // (external, no body)
        func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_->setCallingConv(CallingConv::C);
    }
    AttributeSet func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1__PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1__PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_->setAttributes(func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1__PAL);

    Function* func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_ = mod->getFunction("_Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_");
    if (!func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_)
    {
        func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_ = Function::Create(
                    /*Type=*/FuncTy_28,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_", mod); // (external, no body)
        func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_->setCallingConv(CallingConv::C);
    }
    AttributeSet func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1__PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1__PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_->setAttributes(func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1__PAL);

    Function* func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_ = mod->getFunction("_Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_");
    if (!func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_)
    {
        func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_ = Function::Create(
                    /*Type=*/FuncTy_28,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_", mod); // (external, no body)
        func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_->setCallingConv(CallingConv::C);
    }
    AttributeSet func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1__PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1__PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_->setAttributes(func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1__PAL);

    Function* func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE = mod->getFunction("_Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE");
    if (!func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE)
    {
        func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE = Function::Create(
                    /*Type=*/FuncTy_30,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE", mod); // (external, no body)
        func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE->setCallingConv(CallingConv::C);
    }
    AttributeSet func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE->setAttributes(func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE_PAL);

    Function* func__ZN6symbol7Context11getInstanceEv = mod->getFunction("_ZN6symbol7Context11getInstanceEv");
    if (!func__ZN6symbol7Context11getInstanceEv)
    {
        func__ZN6symbol7Context11getInstanceEv = Function::Create(
                    /*Type=*/FuncTy_37,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_ZN6symbol7Context11getInstanceEv", mod); // (external, no body)
        func__ZN6symbol7Context11getInstanceEv->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZN6symbol7Context11getInstanceEv_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZN6symbol7Context11getInstanceEv_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZN6symbol7Context11getInstanceEv->setAttributes(func__ZN6symbol7Context11getInstanceEv_PAL);

    Function* func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE = mod->getFunction("_ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE");
    if (!func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE)
    {
        func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE = Function::Create(
                    /*Type=*/FuncTy_40,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE", mod); // (external, no body)
        func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            B.addAttribute(Attribute::ZExt);
            PAS = AttributeSet::get(mod->getContext(), 0U, B);
        }

        Attrs.push_back(PAS);
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE->setAttributes(func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE_PAL);

    Function* func__ZNK6symbol7Context3getERKNS_6SymbolE = mod->getFunction("_ZNK6symbol7Context3getERKNS_6SymbolE");
    if (!func__ZNK6symbol7Context3getERKNS_6SymbolE)
    {
        func__ZNK6symbol7Context3getERKNS_6SymbolE = Function::Create(
                    /*Type=*/FuncTy_42,
                    /*Linkage=*/GlobalValue::ExternalLinkage,
                    /*Name=*/"_ZNK6symbol7Context3getERKNS_6SymbolE", mod); // (external, no body)
        func__ZNK6symbol7Context3getERKNS_6SymbolE->setCallingConv(CallingConv::C);
    }
    AttributeSet func__ZNK6symbol7Context3getERKNS_6SymbolE_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZNK6symbol7Context3getERKNS_6SymbolE_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZNK6symbol7Context3getERKNS_6SymbolE->setAttributes(func__ZNK6symbol7Context3getERKNS_6SymbolE_PAL);

    Function* func__ZN5types7ArrayOfIiE3getEi = mod->getFunction("_ZN5types7ArrayOfIiE3getEi");
    if (!func__ZN5types7ArrayOfIiE3getEi)
    {
        func__ZN5types7ArrayOfIiE3getEi = Function::Create(
                                              /*Type=*/FuncTy_45,
                                              /*Linkage=*/GlobalValue::LinkOnceODRLinkage ,
                                              /*Name=*/"_ZN5types7ArrayOfIiE3getEi", mod);
        func__ZN5types7ArrayOfIiE3getEi->setCallingConv(CallingConv::C);
        func__ZN5types7ArrayOfIiE3getEi->setAlignment(2);
    }
    AttributeSet func__ZN5types7ArrayOfIiE3getEi_PAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
            AttrBuilder B;
            B.addAttribute(Attribute::NoUnwind);
            B.addAttribute(Attribute::UWTable);
            PAS = AttributeSet::get(mod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        func__ZN5types7ArrayOfIiE3getEi_PAL = AttributeSet::get(mod->getContext(), Attrs);

    }
    func__ZN5types7ArrayOfIiE3getEi->setAttributes(func__ZN5types7ArrayOfIiE3getEi_PAL);

    Function* func__GLOBAL__I_a = mod->getFunction("_GLOBAL__I_a");
    if (!func__GLOBAL__I_a)
    {
        func__GLOBAL__I_a = Function::Create(
                                /*Type=*/FuncTy_5,
                                /*Linkage=*/GlobalValue::InternalLinkage,
                                /*Name=*/"_GLOBAL__I_a", mod);
        func__GLOBAL__I_a->setCallingConv(CallingConv::C);
        func__GLOBAL__I_a->setSection(".text.startup");
    }
    AttributeSet func__GLOBAL__I_a_PAL;
    func__GLOBAL__I_a->setAttributes(func__GLOBAL__I_a_PAL);

    // Global Variable Declarations


    GlobalVariable* gvar_struct__ZStL8__ioinit = new GlobalVariable(/*Module=*/*mod,
            /*Type=*/StructTy_class_std__ios_base__Init,
            /*isConstant=*/false,
            /*Linkage=*/GlobalValue::InternalLinkage,
            /*Initializer=*/0, // has initializer, specified below
            /*Name=*/"_ZStL8__ioinit");
    gvar_struct__ZStL8__ioinit->setAlignment(1);

    GlobalVariable* gvar_int8___dso_handle = new GlobalVariable(/*Module=*/*mod,
            /*Type=*/IntegerType::get(mod->getContext(), 8),
            /*isConstant=*/false,
            /*Linkage=*/GlobalValue::ExternalLinkage,
            /*Initializer=*/0,
            /*Name=*/"__dso_handle");

    GlobalVariable* gvar_array_llvm_global_ctors = new GlobalVariable(/*Module=*/*mod,
            /*Type=*/ArrayTy_2,
            /*isConstant=*/false,
            /*Linkage=*/GlobalValue::AppendingLinkage,
            /*Initializer=*/0, // has initializer, specified below
            /*Name=*/"llvm.global_ctors");

    // Constant Definitions
    ConstantAggregateZero* const_struct_48 = ConstantAggregateZero::get(StructTy_class_std__ios_base__Init);
    std::vector<Constant*> const_array_49_elems;
    std::vector<Constant*> const_struct_50_fields;
    ConstantInt* const_int32_51 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("65535"), 10));
    const_struct_50_fields.push_back(const_int32_51);
    const_struct_50_fields.push_back(func__GLOBAL__I_a);
    Constant* const_struct_50 = ConstantStruct::get(StructTy_3, const_struct_50_fields);
    const_array_49_elems.push_back(const_struct_50);
    Constant* const_array_49 = ConstantArray::get(ArrayTy_2, const_array_49_elems);
    Constant* const_ptr_52 = ConstantExpr::getCast(Instruction::BitCast, func__ZNSt8ios_base4InitD1Ev, PointerTy_9);
    std::vector<Constant*> const_ptr_53_indices;
    ConstantInt* const_int32_54 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
    const_ptr_53_indices.push_back(const_int32_54);
    const_ptr_53_indices.push_back(const_int32_54);
    Constant* const_ptr_53 = ConstantExpr::getGetElementPtr(gvar_struct__ZStL8__ioinit, const_ptr_53_indices);
    ConstantInt* const_int32_55 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
    ConstantPointerNull* const_ptr_56 = ConstantPointerNull::get(PointerTy_20);
    ConstantPointerNull* const_ptr_57 = ConstantPointerNull::get(PointerTy_19);
    ConstantPointerNull* const_ptr_58 = ConstantPointerNull::get(PointerTy_23);
    ConstantInt* const_int32_59 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
    ConstantPointerNull* const_ptr_60 = ConstantPointerNull::get(PointerTy_21);

    // Global Variable Definitions
    gvar_struct__ZStL8__ioinit->setInitializer(const_struct_48);
    gvar_array_llvm_global_ctors->setInitializer(const_array_49);

    // Function Definitions

    // Function: __cxx_global_var_init (func___cxx_global_var_init)
    {

        BasicBlock* label_61 = BasicBlock::Create(mod->getContext(), "", func___cxx_global_var_init, 0);

        // Block  (label_61)
        CallInst* void_62 = CallInst::Create(func__ZNSt8ios_base4InitC1Ev, gvar_struct__ZStL8__ioinit, "", label_61);
        void_62->setCallingConv(CallingConv::C);
        void_62->setTailCall(false);
        AttributeSet void_62_PAL;
        void_62->setAttributes(void_62_PAL);

        std::vector<Value*> int32_63_params;
        int32_63_params.push_back(const_ptr_52);
        int32_63_params.push_back(const_ptr_53);
        int32_63_params.push_back(gvar_int8___dso_handle);
        CallInst* int32_63 = CallInst::Create(func___cxa_atexit, int32_63_params, "", label_61);
        int32_63->setCallingConv(CallingConv::C);
        int32_63->setTailCall(false);
        AttributeSet int32_63_PAL;
        {
            SmallVector<AttributeSet, 4> Attrs;
            AttributeSet PAS;
            {
                AttrBuilder B;
                B.addAttribute(Attribute::NoUnwind);
                PAS = AttributeSet::get(mod->getContext(), ~0U, B);
            }

            Attrs.push_back(PAS);
            int32_63_PAL = AttributeSet::get(mod->getContext(), Attrs);

        }
        int32_63->setAttributes(int32_63_PAL);

        ReturnInst::Create(mod->getContext(), label_61);

    }

    // Function: _Z3foov (func__Z3foov)
    {

        BasicBlock* label_65 = BasicBlock::Create(mod->getContext(), "", func__Z3foov, 0);

        // Block  (label_65)
        AllocaInst* ptr_pdbl = new AllocaInst(PointerTy_15, "pdbl", label_65);
        ptr_pdbl->setAlignment(8);
        AllocaInst* ptr_pb = new AllocaInst(PointerTy_20, "pb", label_65);
        ptr_pb->setAlignment(8);
        AllocaInst* ptr_res = new AllocaInst(IntegerType::get(mod->getContext(), 32), "res", label_65);
        ptr_res->setAlignment(4);
        AllocaInst* ptr_pdbl1 = new AllocaInst(PointerTy_15, "pdbl1", label_65);
        ptr_pdbl1->setAlignment(8);
        AllocaInst* ptr_sym = new AllocaInst(PointerTy_23, "sym", label_65);
        ptr_sym->setAlignment(8);
        CallInst* ptr_66 = CallInst::Create(func__ZN5types6Double5EmptyEv, "", label_65);
        ptr_66->setCallingConv(CallingConv::C);
        ptr_66->setTailCall(false);
        AttributeSet ptr_66_PAL;
        ptr_66->setAttributes(ptr_66_PAL);

        StoreInst* void_67 = new StoreInst(ptr_66, ptr_pdbl, false, label_65);
        void_67->setAlignment(8);
        StoreInst* void_68 = new StoreInst(const_ptr_56, ptr_pb, false, label_65);
        void_68->setAlignment(8);
        LoadInst* ptr_69 = new LoadInst(ptr_pdbl, "", false, label_65);
        ptr_69->setAlignment(8);
        LoadInst* ptr_70 = new LoadInst(ptr_pdbl, "", false, label_65);
        ptr_70->setAlignment(8);
        std::vector<Value*> int32_71_params;
        int32_71_params.push_back(ptr_69);
        int32_71_params.push_back(ptr_70);
        int32_71_params.push_back(ptr_pdbl);
        CallInst* int32_71 = CallInst::Create(func__Z17AddDoubleToDoublePN5types6DoubleES1_PS1_, int32_71_params, "", label_65);
        int32_71->setCallingConv(CallingConv::C);
        int32_71->setTailCall(false);
        AttributeSet int32_71_PAL;
        int32_71->setAttributes(int32_71_PAL);

        StoreInst* void_72 = new StoreInst(int32_71, ptr_res, false, label_65);
        void_72->setAlignment(4);
        CallInst* ptr_73 = CallInst::Create(func__ZN5types6Double5EmptyEv, "", label_65);
        ptr_73->setCallingConv(CallingConv::C);
        ptr_73->setTailCall(false);
        AttributeSet ptr_73_PAL;
        ptr_73->setAttributes(ptr_73_PAL);

        StoreInst* void_74 = new StoreInst(ptr_73, ptr_pdbl1, false, label_65);
        void_74->setAlignment(8);
        LoadInst* ptr_75 = new LoadInst(ptr_pdbl1, "", false, label_65);
        ptr_75->setAlignment(8);
        LoadInst* ptr_76 = new LoadInst(ptr_pdbl1, "", false, label_65);
        ptr_76->setAlignment(8);
        std::vector<Value*> int32_77_params;
        int32_77_params.push_back(ptr_75);
        int32_77_params.push_back(ptr_76);
        int32_77_params.push_back(ptr_pdbl1);
        CallInst* int32_77 = CallInst::Create(func__Z22MultiplyDoubleByDoublePN5types6DoubleES1_PS1_, int32_77_params, "", label_65);
        int32_77->setCallingConv(CallingConv::C);
        int32_77->setTailCall(false);
        AttributeSet int32_77_PAL;
        int32_77->setAttributes(int32_77_PAL);

        StoreInst* void_78 = new StoreInst(int32_77, ptr_res, false, label_65);
        void_78->setAlignment(4);
        LoadInst* ptr_79 = new LoadInst(ptr_pdbl1, "", false, label_65);
        ptr_79->setAlignment(8);
        LoadInst* ptr_80 = new LoadInst(ptr_pdbl1, "", false, label_65);
        ptr_80->setAlignment(8);
        std::vector<Value*> int32_81_params;
        int32_81_params.push_back(ptr_79);
        int32_81_params.push_back(ptr_80);
        int32_81_params.push_back(ptr_pdbl1);
        CallInst* int32_81 = CallInst::Create(func__Z23SubstractDoubleToDoublePN5types6DoubleES1_PS1_, int32_81_params, "", label_65);
        int32_81->setCallingConv(CallingConv::C);
        int32_81->setTailCall(false);
        AttributeSet int32_81_PAL;
        int32_81->setAttributes(int32_81_PAL);

        StoreInst* void_82 = new StoreInst(int32_81, ptr_res, false, label_65);
        void_82->setAlignment(4);
        LoadInst* ptr_83 = new LoadInst(ptr_pdbl, "", false, label_65);
        ptr_83->setAlignment(8);
        LoadInst* ptr_84 = new LoadInst(ptr_pdbl, "", false, label_65);
        ptr_84->setAlignment(8);
        std::vector<Value*> int32_85_params;
        int32_85_params.push_back(ptr_83);
        int32_85_params.push_back(ptr_84);
        int32_85_params.push_back(const_ptr_57);
        CallInst* int32_85 = CallInst::Create(func__Z16DoubleLessDoublePN5types6DoubleES1_PPNS_4BoolE, int32_85_params, "", label_65);
        int32_85->setCallingConv(CallingConv::C);
        int32_85->setTailCall(false);
        AttributeSet int32_85_PAL;
        int32_85->setAttributes(int32_85_PAL);

        StoreInst* void_86 = new StoreInst(int32_85, ptr_res, false, label_65);
        void_86->setAlignment(4);
        StoreInst* void_87 = new StoreInst(const_ptr_58, ptr_sym, false, label_65);
        void_87->setAlignment(8);
        CallInst* ptr_88 = CallInst::Create(func__ZN6symbol7Context11getInstanceEv, "", label_65);
        ptr_88->setCallingConv(CallingConv::C);
        ptr_88->setTailCall(false);
        AttributeSet ptr_88_PAL;
        ptr_88->setAttributes(ptr_88_PAL);

        LoadInst* ptr_89 = new LoadInst(ptr_sym, "", false, label_65);
        ptr_89->setAlignment(8);
        LoadInst* ptr_90 = new LoadInst(ptr_pdbl, "", false, label_65);
        ptr_90->setAlignment(8);
        CastInst* ptr_91 = new BitCastInst(ptr_90, PointerTy_38, "", label_65);
        std::vector<Value*> int1_92_params;
        int1_92_params.push_back(ptr_88);
        int1_92_params.push_back(ptr_89);
        int1_92_params.push_back(ptr_91);
        CallInst* int1_92 = CallInst::Create(func__ZN6symbol7Context3putERKNS_6SymbolERN5types12InternalTypeE, int1_92_params, "", label_65);
        int1_92->setCallingConv(CallingConv::C);
        int1_92->setTailCall(false);
        AttributeSet int1_92_PAL;
        {
            SmallVector<AttributeSet, 4> Attrs;
            AttributeSet PAS;
            {
                AttrBuilder B;
                B.addAttribute(Attribute::ZExt);
                PAS = AttributeSet::get(mod->getContext(), 0U, B);
            }

            Attrs.push_back(PAS);
            int1_92_PAL = AttributeSet::get(mod->getContext(), Attrs);

        }
        int1_92->setAttributes(int1_92_PAL);

        CallInst* ptr_93 = CallInst::Create(func__ZN6symbol7Context11getInstanceEv, "", label_65);
        ptr_93->setCallingConv(CallingConv::C);
        ptr_93->setTailCall(false);
        AttributeSet ptr_93_PAL;
        ptr_93->setAttributes(ptr_93_PAL);

        LoadInst* ptr_94 = new LoadInst(ptr_sym, "", false, label_65);
        ptr_94->setAlignment(8);
        std::vector<Value*> ptr_95_params;
        ptr_95_params.push_back(ptr_93);
        ptr_95_params.push_back(ptr_94);
        CallInst* ptr_95 = CallInst::Create(func__ZNK6symbol7Context3getERKNS_6SymbolE, ptr_95_params, "", label_65);
        ptr_95->setCallingConv(CallingConv::C);
        ptr_95->setTailCall(false);
        AttributeSet ptr_95_PAL;
        ptr_95->setAttributes(ptr_95_PAL);

        LoadInst* ptr_96 = new LoadInst(ptr_pb, "", false, label_65);
        ptr_96->setAlignment(8);
        CastInst* ptr_97 = new BitCastInst(ptr_96, PointerTy_43, "", label_65);
        std::vector<Value*> int32_98_params;
        int32_98_params.push_back(ptr_97);
        int32_98_params.push_back(const_int32_54);
        CallInst* int32_98 = CallInst::Create(func__ZN5types7ArrayOfIiE3getEi, int32_98_params, "", label_65);
        int32_98->setCallingConv(CallingConv::C);
        int32_98->setTailCall(false);
        AttributeSet int32_98_PAL;
        int32_98->setAttributes(int32_98_PAL);

        LoadInst* int32_99 = new LoadInst(ptr_res, "", false, label_65);
        int32_99->setAlignment(4);
        ReturnInst::Create(mod->getContext(), int32_99, label_65);

    }

    // Function: _ZN5types7ArrayOfIiE3getEi (func__ZN5types7ArrayOfIiE3getEi)
    {
        Function::arg_iterator args = func__ZN5types7ArrayOfIiE3getEi->arg_begin();
        Value* ptr_this = args++;
        ptr_this->setName("this");
        Value* int32__iPos = args++;
        int32__iPos->setName("_iPos");

        BasicBlock* label_101 = BasicBlock::Create(mod->getContext(), "", func__ZN5types7ArrayOfIiE3getEi, 0);
        BasicBlock* label_102 = BasicBlock::Create(mod->getContext(), "", func__ZN5types7ArrayOfIiE3getEi, 0);
        BasicBlock* label_103 = BasicBlock::Create(mod->getContext(), "", func__ZN5types7ArrayOfIiE3getEi, 0);
        BasicBlock* label_104 = BasicBlock::Create(mod->getContext(), "", func__ZN5types7ArrayOfIiE3getEi, 0);

        // Block  (label_101)
        AllocaInst* ptr_105 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_101);
        ptr_105->setAlignment(4);
        AllocaInst* ptr_106 = new AllocaInst(PointerTy_43, "", label_101);
        ptr_106->setAlignment(8);
        AllocaInst* ptr_107 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_101);
        ptr_107->setAlignment(4);
        StoreInst* void_108 = new StoreInst(ptr_this, ptr_106, false, label_101);
        void_108->setAlignment(8);
        StoreInst* void_109 = new StoreInst(int32__iPos, ptr_107, false, label_101);
        void_109->setAlignment(4);
        LoadInst* ptr_110 = new LoadInst(ptr_106, "", false, label_101);
        std::vector<Value*> ptr_111_indices;
        ptr_111_indices.push_back(const_int32_54);
        ptr_111_indices.push_back(const_int32_59);
        Instruction* ptr_111 = GetElementPtrInst::Create(ptr_110, ptr_111_indices, "", label_101);
        LoadInst* ptr_112 = new LoadInst(ptr_111, "", false, label_101);
        ptr_112->setAlignment(8);
        ICmpInst* int1_113 = new ICmpInst(*label_101, ICmpInst::ICMP_NE, ptr_112, const_ptr_60, "");
        BranchInst::Create(label_102, label_103, int1_113, label_101);

        // Block  (label_102)
        LoadInst* int32_115 = new LoadInst(ptr_107, "", false, label_102);
        int32_115->setAlignment(4);
        CastInst* int64_116 = new SExtInst(int32_115, IntegerType::get(mod->getContext(), 64), "", label_102);
        std::vector<Value*> ptr_117_indices;
        ptr_117_indices.push_back(const_int32_54);
        ptr_117_indices.push_back(const_int32_59);
        Instruction* ptr_117 = GetElementPtrInst::Create(ptr_110, ptr_117_indices, "", label_102);
        LoadInst* ptr_118 = new LoadInst(ptr_117, "", false, label_102);
        ptr_118->setAlignment(8);
        GetElementPtrInst* ptr_119 = GetElementPtrInst::Create(ptr_118, int64_116, "", label_102);
        LoadInst* int32_120 = new LoadInst(ptr_119, "", false, label_102);
        int32_120->setAlignment(4);
        StoreInst* void_121 = new StoreInst(int32_120, ptr_105, false, label_102);
        BranchInst::Create(label_104, label_102);

        // Block  (label_103)
        StoreInst* void_123 = new StoreInst(const_int32_54, ptr_105, false, label_103);
        BranchInst::Create(label_104, label_103);

        // Block  (label_104)
        LoadInst* int32_125 = new LoadInst(ptr_105, "", false, label_104);
        ReturnInst::Create(mod->getContext(), int32_125, label_104);

    }

    // Function: _GLOBAL__I_a (func__GLOBAL__I_a)
    {

        BasicBlock* label_127 = BasicBlock::Create(mod->getContext(), "", func__GLOBAL__I_a, 0);

        // Block  (label_127)
        CallInst* void_128 = CallInst::Create(func___cxx_global_var_init, "", label_127);
        void_128->setCallingConv(CallingConv::C);
        void_128->setTailCall(false);
        AttributeSet void_128_PAL;
        void_128->setAttributes(void_128_PAL);

        ReturnInst::Create(mod->getContext(), label_127);

    }

    return mod;

}
