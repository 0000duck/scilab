//  Scicos
//
//  Copyright (C) INRIA - METALAU Project <scicos@inria.fr>
//                      - Serge Steer <serge.steer@inria.fr> - 2003
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// See the file ../license.txt
//

function [ok,name,nipar,nrpar,nopar,nz,nx,nx_der,nx_ns,nin,nout,nm,ng,dep_u]=compile_modelica(filemo,Mblocks)
// Copyright INRIA
  lines(0)
  if exists('%Modelica_Init')==0 then 
    // Modelica_Init becomes true only in "Modelicainitialize_.sci"
    %Modelica_Init=%f;
  end

  if exists('%Jacobian')==0 then 
    %Jacobian=%t;
  end

  if exists('%Modelica_ParEmb')==0 then 
    %Modelica_ParEmb=%t;
  end
    
  running="off";
  try   
    %_winId=TCL_GetVar("IHMLoc")  
  catch
    %_winId="nothing";
  end
  if (%_winId <> "nothing") then  
    running=TCL_EvalStr("winfo exists [sciGUIName "+%_winId+"]")
  end
  
  tmpdir=TMPDIR+'\'; tmpdir=pathconvert(tmpdir,%f,%t)    
  ext='\*.mo';       ext=pathconvert(ext,%f,%t)  
  [ok,modelicac,translator,xml2modelica]=Modelica_execs();
  if ~ok then,
    name='';
    dep_u=%t; nipar=0;nrpar=0;nopar=0;nz=0;nx=0;nx_der=0;nx_ns=0;nin=0;nout=0;nm=0;ng=0;
    return;
  end

  filemo=pathconvert(filemo,%f,%t)  
  name=basename(filemo)
  namef=name+'f';
  Flat=tmpdir+name+'f.mo';
  Flatxml=tmpdir+name+'f.xml';
  Flat_functions=tmpdir+name+'f_functions.mo';
  xmlfile=tmpdir+name+'f_init.xml';       
  Relfile=tmpdir+name+'f_relations.xml';
  incidence=tmpdir+name+"_incidence_matrix.xml"
  xmlfileTMP=tmpdir+name+'Sim.xml';  if MSDOS then,xmlfileTMP=strsubst(xmlfileTMP,'\','\\') ;end
  Cfile=tmpdir+name+'.c'
  
  // macros/scicos/compile_modelica.sci
  // macros/auto/scicos_simulate.sci
  // macros/scicos/clickin.sci
  // macros/scicos/do_eval.sci
  // macros/scicos/do_run.sci
  // compile_init_modelica
  // MIHM
  
  if %Jacobian then, JAC=' -jac '; else, JAC=' '; end
  
  //do not update C code if needcompile==0 this allows C code
  //modifications for debuggingS_translator.er purposes  

  updateC=needcompile<>0|fileinfo(Cfile)==[]
  updateC=updateC | %Modelica_Init 
  
  if updateC  then
    mlibs=pathconvert(modelica_libs,%f,%t)

    molibs=[]
    mlibsM=pathconvert(TMPDIR+'/Modelica/',%f,%t)      
    for k=1:size(Mblocks,'r')
      funam=stripblanks(Mblocks(k))
      [dirF,nameF,extF]=fileparts(funam);
      if (extF=='.mo') then
	molibs=[molibs;""""+funam+""""];
      else
	molibs=[molibs;""""+mlibsM+funam+'.mo'+""""]
      end
    end
    
    for k=1:size(mlibs,'*')
      modelica_file=listfiles(mlibs(k)+ext); 
      if modelica_file<> [] then 
	molibs=[molibs;""""+modelica_file+""""];
      end
    end
    translator_libs=strcat(' -lib '+ molibs);
    //---->>>>>>>>>-------------------just for OS limitation-------
    if MSDOS then, Limit=1000;else, Limit=3500;end
    if (length(translator_libs)>Limit) then 
      disp(['WARNING!';..
	    'There are too many Modelica files.';..
	    'it would be better to define several ';..
	    'Modelica programs in a single file.'])

      mymopac= pathconvert(TMPDIR+'/MYMOPACKAGE.mo',%f,%t)
      txt=[];
      for k=1:size(molibs,'*')
	[pathx,fnamex,extensionx]=fileparts(molibs(k));
	if (fnamex<>'MYMOPACKAGE') then 
	  txt=[txt;mgetl(evstr(molibs(k)))];
	end
      end
      mputl(txt,mymopac);     
      translator_libs= strcat(' -lib ""'+mymopac+'""');
    end    
    //---<<<<<<<------------------just for OS limitation-------
    //---------------------------------------------------------------------
    instr='""'+translator+'"" '+translator_libs+' -lib ""'+filemo+'"" -o ""'+Flat+'"" -command ""'+name+' '+namef+';"" > ""'+tmpdir+'S_translator.err""';
    if MSDOS then,   mputl(instr,tmpdir+'gent.bat'), instr=tmpdir+'gent.bat';end
        
    if ( %Modelica_Init ) then 
      if (fileinfo(xmlfile)==[]) then 
	overwrite=1;//Yes
      else
	overwrite=messagebox([_('The initialization file already exists!');...
		    _('Do you want to overwrite it?')],'','question',[_('Yes'),_('No')],'modal')       
      end
    else     
      // do not generate the flat file when it is already generated by
      // the initialization GUI
      if (running =="1") then 
	overwrite=2;//no
      else
	overwrite=1;//yes
      end        
    end
       
    if (overwrite==2) then 
      commandresult=0;
    else
      commandresult=execstr('unix_s(instr)','errcatch')
    end
    
    if commandresult==0 then
      if (%Modelica_Init) then //---------------------------
	mprintf('%s',' Init XML file : '+xmlfile); mprintf('\n\r');
	mprintf('%s',' Init Rel file : '+Relfile); mprintf('\n\r');
	name=Flat;dep_u=%t;//<<ALERT
	// dep_u of the initialization block is obtained onley when the  C
        // code is generated.
	ok=%t,nipar=0;nrpar=0;nopar=0;nz=0;nx=0;nx_der=0;nx_ns=0;nin=0;nout=0;nm=0;ng=0;      
	return;
      else
	mprintf('%s',' Flat Modelica : '+Flat); mprintf('\n\r');
      end
    else
      MSG2=mgetl(tmpdir+'S_translator.err');
      messagebox([_('-------Modelica translator error message:-----');MSG2],'error','modal');
      ok=%f,
      dep_u=%t; nipar=0;nrpar=0;nopar=0;nz=0;nx=0;nx_der=0;nx_ns=0;nin=0;nout=0;nm=0;ng=0;
      return
    end
 
    //---------------------------------------------------------------------
    if fileinfo(Flat_functions)==[] then,
      Flat_functions=" "; 
    else
      Flat_functions='""'+Flat_functions+'""';
    end

    if ((running=="1" )& (fileinfo(xmlfile)<>[])) then // if GUI is running
      XMLfiles=' -with-init-in ""'+xmlfileTMP+'"" -with-init-out ""'+xmlfileTMP+'""';
    else
      XMLfiles='';
    end      
    instr='""'+modelicac+'"" ""'+Flat+'""  '+Flat_functions+' '+XMLfiles+' -o ""'+Cfile+'"" '+JAC+' > ""'+tmpdir+'S_modelicac.err""';    
    if MSDOS then,   mputl(instr,tmpdir+'genm2.bat'), instr=tmpdir+'genm2.bat';end
    if execstr('unix_s(instr)','errcatch')==0 then  
      mprintf('%s',' Simltn C code : '+Cfile); mprintf('\n\r');
    else
      MSG3= mgetl(tmpdir+'S_modelicac.err');
      messagebox([_('-------Modelica compiler error (with the translator):-------');MSG3;...
		 _('Please read the error message in the Scilab window')],'error','modal');	    
      ok=%f,dep_u=%t; nipar=0;nrpar=0;nopar=0;nz=0;nx=0;nx_der=0;nx_ns=0;nin=0;nout=0;nm=0;ng=0;      
      return
    end     
    //---------------------------------------------------------------------
  end // if update
  
  [nipar,nrpar,nopar,nz,nx,nx_der,nx_ns,nin,nout,nm,ng,dep_u]=reading_incidence(incidence)
  
  mprintf('\n\r Modelica blocks are reduced to a block with:');
  mprintf('\n\r Number of differential states: %d',nx_der);
  mprintf('\n\r Number of algebraic states: %d',nx-nx_der);
  mprintf('\n\r Number of discrete time states  : %d',nz);
  mprintf('\n\r Number of zero-crossing surfaces: %d',ng);
  mprintf('\n\r Number of modes  : %d',nm);
  mprintf('\n\r Number of inputs : %d',nin);
  mprintf('\n\r Number of outputs: %d',nout);
  mprintf('\n\r Input/output dependency:[ ');
  for i=1:nin,if dep_u(i) then mprintf('T ');else,mprintf('F ');end;end; mprintf(']');
  if %Jacobian then 
    mprintf('\n\r Analytical Jacobian: enabled  (\%Jacobian=\%t)');
  else
    mprintf('\n\r Analytical Jacobian: disabled (\%Jacobian=\%f)');
  end
  
  if %Modelica_ParEmb then 
    mprintf('\n\r Parameter embedding mode: enabled  (\%Modelica_ParEmb=\%t)');
  else
    mprintf('\n\r Parameter embedding mode: disabled (\%Modelica_ParEmb=\%f)');
  end

  mprintf('\n\r ');
  
  ok=Link_modelica_C(Cfile)

endfunction
