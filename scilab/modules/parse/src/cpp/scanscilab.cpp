
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[902] =
    {   0,
    16405,  134,   79,  133,   75,   79,  133,   76,  133,   76,
       79,  133,   73,   79,  133,   70,   79,  133,   24,   79,
      133,   70,   79,  133,   27,   79,  133,   74,   79,  133,
       31,   79,  133,   32,   79,  133,   45,   79,  133,   44,
       79,  133,   34,   79,  133,   43,   79,  133,   64,   79,
      133,   46,   79,  133,   66,   79,  133,   35,   79,  133,
       33,   79,  133,   57,   79,  133,   61,   79,  133,   58,
       79,  133,   70,   79,  133,   23,   79,  133,   62,   79,
      133,   47,   79,  133,   63,   79,  133,   48,   79,  133,
       70,   79,  133,   70,   79,  133,   70,   79,  133,   70,

       79,  133,   70,   79,  133,   70,   79,  133,   70,   79,
      133,   70,   79,  133,   70,   79,  133,   70,   79,  133,
       70,   79,  133,   70,   79,  133,   36,   79,  133,   29,
       79,  133,   37,   79,  133,   23,   79,  133,   79,  133,
       79,  133,   79,  133,   79,  133,   79,  133,   79,  133,
       79,  133,   79,  133,   75,   79,  133,16405,   70,   79,
      133,   70,   79,  133,   34,   79,  133,   33,   79,  133,
       70,   79,  133,   70,   79,  133,   70,   79,  133,   70,
       79,  133,   70,   79,  133,   70,   79,  133,   70,   79,
      133,   70,   79,  133,   70,   79,  133,   70,   79,  133,

       70,   79,  133,   70,   79,  133,   70,   79,  133,   79,
      133,   79,  133,   79,  133,   79,  133,   79,  133,   79,
      133,   79,  133,   79,  133,  118,  133,  117,  133,  117,
      118,  133,  116,  118,  133,  114,  118,  133,  118,  133,
      127,  133,  125,  133,  125,  127,  133,  123,  127,  133,
      124,  127,  133,  127,  133,  109,  133,  108,  133,  108,
      109,  133,  109,  133,  109,  133,  105,  133,  104,  133,
      104,  105,  133,  103,  133,  102,  103,  133,   99,  133,
       99,  103,  133,  103,  133,   89,  133,   75,   89,  133,
       76,   89,  133,   73,   89,  133,   70,   89,  133,   24,

       89,  133,   70,   89,  133,   27,   89,  133,   74,   89,
      133,   31,   89,  133,   32,   89,  133,   45,   89,  133,
       82,   89,  133,   34,   89,  133,   83,   89,  133,   64,
       89,  133,   46,   89,  133,   66,   89,  133,   35,   89,
      133,   33,   89,  133,   57,   89,  133,   61,   89,  133,
       58,   89,  133,   23,   89,  133,   62,   89,  133,   47,
       89,  133,   80,   89,  133,   48,   89,  133,   36,   89,
      133,   29,   89,  133,   81,   89,  133,   23,   89,  133,
       89,  133,   89,  133,   89,  133,   89,  133,   89,  133,
       89,  133,   89,  133,   89,  133,   75,   89,  133,   34,

       89,  133,   33,   89,  133,   98,  133,   97,   98,  133,
      133,   96,   98,  133,   91,   98,  133,   90,   98,  133,
       98,  133,   92,   98,  133,   98,  133,   98,  133,   98,
      133,   98,  133,   98,  133,   98,  133,   98,  133,   98,
      133,  132,  133,  128,  133,  131,  133,  131,  133,   73,
      133,   74,  133,  130,  133,  129,  133,   22,  133,   22,
      133,   22,  133,   22,  133,   22,  133,   22,  133,   22,
      133,   22,  133,   22,  133,   22,  133,   22,  133,   22,
      133,   22,  133,   22,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   75,   76,   70,   70,   26,   70,   25,

       70,   28,   48,   38,   39,   65,   40,   69,   41,   42,
       71,   72,   68,   66,   59,   56,   55,   60,   70,   70,
       16,   70,   70,   70,   70,   70,   70,    1,   70,   70,
       70,   70,   70,   70,   70,   70,   30,   70,   75,16405,
       77,   78,   77,   78,   70,   70,   26,   70,   25,   70,
       78,   78,   70,   70,   16,   70,   70,   70,   70,   70,
       70,    1,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  117,  110,  111,  112,  113,  115,  125,  119,  120,
      121,  122,  126,  108,  106,  107,  104,  102,   99,  100,
      101,   75,   75,   97,   96,   94,   93,   92,   96,  132,

      128,  131,   22,   22,   22,   22,   16,   22,   22,   22,
       22,   22,   22,    1,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   70,   52,   49,   65,   50,   51,   53,
       68,   67,   54,   70,   70,   70,   70,    5,   70,   14,
       70,   70,   70,   70,   70,   70,   70,   70,   18,   70,
       70, 8213, 8213,   70,   70,   70,   70,   70,    5,   70,
       14,   70,   70,   70,   70,   70,   70,   70,   70,   18,
       70,   70,  115,  126,   88,   84,   93,   95,   22,   22,
       22,   22,   22,    5,   22,   14,   22,   22,   22,   22,
       22,   22,   22,   22,   18,   22,   22,   70,   70,    9,

       70,   70,    3,   70,   70,   70,   70,   70,   70,   70,
       70,    2,   70,   70,   70,   70,   70,    9,   70,   70,
        3,   70,   70,   70,   70,   70,   70,   70,   70,    2,
       70,   70,   70,   88,   87,   85,   96,   22,   22,    9,
       22,   22,    3,   22,   22,   22,   22,   22,   22,   22,
       22,    2,   22,   22,   22,   70,   70,   17,   70,   19,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   15,
       70,   70,   70,   17,   70,   19,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   15,   70,   85,   86,   96,
       22,   22,   17,   22,   19,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   15,   22,   70,    4,   70,   70,
       70,   13,   70,   70,   20,   70,    6,   70,    7,   70,
       70,    4,   70,   70,   70,   13,   70,   70,   20,   70,
        6,   70,    7,   70,   88,   22,    4,   22,   22,   22,
       13,   22,   22,   20,   22,    6,   22,    7,   22,   70,
       70,   70,   70,   70,   70,   70,   70,   88,   22,   22,
       22,   22,   70,   70,   10,   70,   70,   70,   70,   10,
       70,   70,   22,   22,   10,   22,   22,   12,   70,   70,
        8,   70,   12,   70,   70,    8,   70,   12,   22,   22,
        8,   22,   70,   70,   22,   11,   70,   11,   70,   11,

       22
    } ;

static yyconst flex_int16_t yy_accept[760] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  141,  143,
      145,  147,  149,  151,  153,  155,  159,  162,  165,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  212,  214,  216,  218,  220,  222,

      224,  226,  228,  230,  233,  236,  239,  241,  243,  245,
      248,  251,  254,  256,  258,  260,  263,  265,  267,  269,
      271,  274,  276,  279,  281,  284,  286,  288,  291,  294,
      297,  300,  303,  306,  309,  312,  315,  318,  321,  324,
      327,  330,  333,  336,  339,  342,  345,  348,  351,  354,
      357,  360,  363,  366,  369,  372,  375,  378,  381,  383,
      385,  387,  389,  391,  393,  395,  397,  400,  403,  406,
      408,  411,  412,  415,  418,  421,  423,  426,  428,  430,
      432,  434,  436,  438,  440,  442,  444,  446,  448,  450,
      452,  454,  456,  458,  460,  462,  464,  466,  468,  470,

      472,  474,  476,  478,  480,  482,  484,  486,  487,  488,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  500,  502,
      503,  504,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  512,  513,  514,  515,  515,  516,  517,  518,  519,
      519,  520,  521,  523,  524,  525,  526,  527,  528,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  539,
      539,  539,  539,  539,  539,  539,  541,  543,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      546,  547,  547,  547,  547,  547,  547,  547,  547,  547,

      549,  551,  552,  553,  554,  555,  557,  558,  559,  560,
      561,  562,  564,  565,  566,  567,  568,  569,  570,  571,
      572,  572,  572,  572,  572,  572,  572,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  593,
      594,  595,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  597,  598,  599,  599,  600,  600,  600,  600,  600,
      600,  600,  600,  601,  602,  603,  604,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  606,  607,  609,  610,
      611,  612,  613,  614,  616,  617,  618,  619,  620,  621,

      622,  623,  624,  624,  624,  624,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  627,
      628,  629,  630,  631,  632,  632,  633,  634,  635,  636,
      637,  638,  640,  642,  643,  644,  645,  646,  647,  648,
      649,  651,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  653,  654,  655,  655,  655,  655,  655,  655,
      655,  655,  656,  657,  658,  659,  661,  663,  664,  665,
      666,  667,  668,  669,  670,  672,  673,  673,  673,  673,
      674,  675,  676,  676,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      678,  678,  679,  679,  679,  679,  680,  680,  680,  680,
      680,  680,  680,  680,  681,  682,  683,  684,  686,  688,
      689,  690,  691,  692,  693,  694,  695,  697,  698,  698,
      698,  698,  699,  699,  699,  699,  700,  702,  703,  705,
      706,  707,  708,  709,  710,  711,  712,  714,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  718,  720,  721,  723,  724,  725,
      726,  727,  728,  729,  730,  732,  733,  734,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  736,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      738,  739,  739,  739,  739,  740,  742,  743,  745,  746,
      747,  748,  749,  750,  751,  752,  754,  755,  756,  757,
      758,  760,  762,  763,  764,  765,  766,  767,  768,  769,
      770,  772,  772,  772,  772,  772,  773,  774,  776,  778,
      779,  780,  781,  782,  783,  784,  785,  786,  788,  788,
      788,  788,  788,  788,  788,  788,  789,  789,  790,  790,
      790,  790,  791,  792,  793,  795,  797,  798,  799,  800,
      801,  802,  803,  804,  805,  807,  808,  810,  811,  812,
      814,  815,  817,  819,  821,  821,  822,  824,  825,  826,

      828,  829,  831,  833,  835,  835,  835,  835,  836,  837,
      839,  840,  841,  843,  844,  846,  848,  850,  851,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      863,  864,  865,  867,  868,  869,  870,  872,  873,  874,
      875,  877,  878,  880,  881,  883,  885,  886,  888,  890,
      891,  893,  894,  895,  896,  898,  900,  902,  902
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   25,   44,
       45,   25,   25,   46,   47,   48,   49,   25,   50,   25,
       51,   25,   52,   53,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,    1,    1,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   63,   63,   64,
       65,   65,   65,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    1,    4,
        7,    1,    1,    1,    3,    1,    8,    1,    9,    1,
        3,    1,    7,    1,    5,    1,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[778] =
    {   0,
        0,   66,  130,  133,  141,  149,  152,  158,  138,  145,
      165,  170,  188,  253,  274,    0,  339,  343,  364,    0,
     1598, 2741, 1594, 2741, 1591, 2741,  392, 2741,  431, 1582,
     2741, 2741, 2741,  147, 2741, 2741, 2741,  430,  162,  445,
     2741, 2741,  154, 1566, 1563,  437, 1552, 2741, 1556, 2741,
     2741,  459,  472,  474,  486,  488,  503,  510,  517,  524,
      531,  538,  554, 2741, 1518, 2741, 1547,  128, 1510,  200,
      125,  203,  205,  208, 1508,  601,  666,  731,  465,  585,
      562,  569,  584,  591,  598,  605,  630,  644,  646,  648,
      651,  669,  674,  213, 1505,  294,  216,  299,  304,  376,

     1503, 2741, 2741, 1555,  431,  432, 1525, 2741, 2741, 1485,
      434,  440, 1470, 2741, 2741, 1482, 1445, 1448, 2741, 2741,
     1455, 2741, 1450, 2741, 1435,  460, 2741,  507, 1431, 2741,
      695, 2741,    0, 1420, 2741, 2741, 2741,  346, 2741, 2741,
     2741,  731,  530,  718, 2741, 2741,  451, 1400, 1394, 1386,
     2741, 1388, 2741, 2741, 2741, 1350, 2741, 1369,  517, 1311,
      591,  484,  599,  497,  654, 1256,  784,  736,  750, 2741,
     1297, 2741,  747, 2741, 2741, 1275,  797,  662, 1223,  710,
      539,  716,  567,  719, 1223,    0, 1259, 2741, 1251, 2741,
     2741, 2741, 2741,  778,  766, 1195, 1188, 1172,  585,  432,

     1174, 1174, 1157, 1154,  474,  117, 1148,  724, 1118,  727,
      595,  745,  624,  762, 1116, 1168, 2741,  817,  819,  765,
     1105,  793,  650,  796,  689,  803, 1103,  834,  841, 2741,
     2741,    0, 2741,  491, 1138, 1132,  847, 1125, 2741, 2741,
        0, 2741,  856,  859,  595, 2741, 2741, 2741, 2741,    0,
      862,  859,  874,  876,  880,  892,  897,  905,  918,  920,
      922,  926,  934,  948,  950,  952, 2741,  955,  948,  951,
      954,  957,  960,  963,  966, 1023, 2741, 1134,  969, 1037,
      989, 1071,  992,  815,  997,  854, 1003, 1070, 1120, 1028,
     1042, 1006, 1060, 1016,  873, 1021,  979, 1036, 1060, 1067,

     1069, 2741, 1110, 1071, 1073, 1075, 1096, 1099, 1102, 1117,
     1123, 1125, 1129, 1146, 1150, 1158, 1152, 1173, 1175, 1179,
     1076, 1126, 1153, 1172, 1175, 1178, 1181, 2741, 2741, 2741,
     2741, 2741, 1094, 2741, 2741, 2741, 2741, 2741, 1090, 2741,
     2741, 2741, 2741, 1103, 2741, 2741, 2741,  629, 1223, 1241,
     1078, 1187, 1202, 1017, 1207,  986, 1210, 1008, 1213,  995,
     1253, 1273, 1276,  976,    0, 1217, 1220, 1240, 1248, 1251,
     1259, 1262,    0,  986, 2741,    0,  936, 1265,  914, 1268,
     1012, 1271, 1082, 1274,  911,  926, 1119,    0,  911,  919,
      906,  899,  902,    0,  897,  887,  889,  886,  880,  865,

      873,    0, 1277, 1280, 1283, 1286, 1289, 1292, 1295, 1326,
     1300, 1303, 1306, 1310, 1315, 1319, 1322, 2741, 2741, 2741,
     2741, 2741, 2741, 1362,  880,  876, 2741, 1354, 1356, 1362,
     1358, 1379, 1383, 1385, 1391, 1387, 1408, 1412, 1414, 1420,
     1426, 1438, 1388, 1413, 1422, 1430, 1426,  834, 1441, 1139,
     1444, 1162, 1447,  825, 1450, 1453, 1456, 1459, 1462, 1465,
     1468, 2741,  877, 1499, 1473, 1476, 1479, 1483, 1488, 1492,
     1495, 1526, 1528, 1533, 1549, 1551, 1554, 1556, 1572, 1577,
     1579, 1584, 1601, 1606, 1608, 1614, 1602, 1607, 1610, 2741,
     2741, 1610,  858, 1614, 1621,  806, 1624, 1169, 1627, 1244,

     1630,  801, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 1691,
      836,  817, 1655, 1658, 1663,  789, 1666, 1669, 1674, 1677,
     1680, 1683, 1686,  781,  766,  753,  740,  730,    0,  727,
      724,  720,  693,  698,  673,  672,    0,  661, 1689, 1692,
     1695, 1726, 1700, 1703, 1710, 1741, 1743, 1747, 1749, 1764,
     1770, 1772, 1776, 1788, 1801, 1803, 1815, 1817, 1819, 1750,
     1803, 1812, 1815, 1818, 1821, 1824, 1827, 1830, 1833, 1864,
     1838, 1841, 1848, 1879, 1881, 1885, 1887, 1902, 1908, 1910,
     1914, 1926, 1939, 1941, 1953, 1955, 1957, 1947, 1888,  642,
     1941, 1416, 1958, 1418, 1961,  639, 2001, 2003,  983, 1967,

     1975, 1978, 1986, 1989, 1992, 1995, 1998, 2001, 2004,    0,
      657, 2007, 2010, 2013,  649,    0,  648,  643,  621,  592,
      600,  589,  575,  571,  563,    0,  554,    0, 2044, 2046,
     2048, 2050, 2052, 2073, 2075, 2080, 2097, 2102, 2104, 2109,
     2125, 2049, 2102, 2105,    0, 2127, 2139, 2141, 2143, 2155,
     2157, 2169, 2183, 2185, 2190, 2197, 2211, 2213, 2190, 2197,
     2200, 2206, 2209, 2212, 2215, 2255,  566,  561, 2219, 2222,
     2227,    0,  528,    0,    0,    0,  532,  524,  523,  517,
      507,  506,  487,  488,    0, 2258, 2261, 2266, 2279, 2282,
     2284, 2287, 2300, 2305,    0, 2308, 2312, 2326, 2330, 2338,

     2342, 2356, 2359, 2363, 2343, 2352, 2356,    0,  485,    0,
      482,  465,    0,  458,    0,    0,    0, 2377, 2389, 2391,
     2395, 2412, 2416, 2419, 2433,    0,  444,  436,  427,  399,
     2440, 2437, 2454, 2458, 2461, 2475, 2479, 2482,  394,  394,
        0,  229, 2496, 2500, 2503, 2508, 2521, 2524,    0,  142,
        0, 2526, 2529,   95, 2547, 2550,    0, 2741, 2598, 2607,
     2616, 2625, 2634, 2643, 2648, 2656, 2661, 2666, 2675, 2680,
     2689, 2697, 2705, 2712, 2721, 2726, 2731
    } ;

static yyconst flex_int16_t yy_def[778] =
    {   0,
      758,  758,  759,  759,  760,  760,  761,  761,  762,  762,
      763,  763,  758,   13,  758,   15,  764,  764,  758,   19,
      758,  758,  758,  758,  758,  758,  765,  758,  765,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,   29,  758,  758,  758,  758,
      758,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  766,  767,  767,  758,  758,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
       29,  758,   29,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  768,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  769,  758,  758,  758,  758,
      758,  758,  758,  770,  770,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,   29,   29,  758,
      758,  758,  758,  758,  758,  758,  758,   29,   29,  758,
      758,  771,  758,  758,  758,  758,  758,  758,  758,  758,
      772,  758,  758,  758,  758,  758,  758,  758,  758,  773,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  758,   29,  758,  758,
      758,  758,  758,  758,  758,  766,  758,  758,  774,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  775,   78,
       78,  758,  758,  758,  758,  758,  758,  758,  758,   78,

       78,  758,  758,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  776,  758,
      758,  768,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  352,  758,  758,  758,  758,  758,
      758,  758,  769,  758,  758,  195,  195,  758,  758,  758,
      758,  758,  758,  758,  758,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  758,  758,  758,  758,  758,  758,  758,   29,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  758,  758,  758,  774,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  775,   78,  758,  758,  758,  758,  758,  758,
      758,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,  758,  758,  758,  758,
      758,  777,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  195,  758,  758,  758,  758,
      758,  758,  758,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  758,  758,
      758,   29,  758,  758,  758,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,   78,
      758,  758,  758,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  777,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  352,
      195,  758,  758,  758,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  758,  758,  758,  446,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  352,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  446,   78,   78,   78,   78,   78,

       78,   78,   78,   78,  758,  758,  758,  588,  195,  195,
      195,  195,  195,  195,  195,  195,  195,   29,   29,   29,
       29,   78,   78,   78,   78,  588,  195,  195,  195,  195,
       29,   29,   29,   29,   78,   78,   78,   78,  195,  195,
      195,  195,   29,   29,   29,   78,   78,   78,  195,  195,
      195,   29,   78,  195,   29,   78,  195,    0,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758
    } ;

static yyconst flex_int16_t yy_nxt[2808] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   59,   60,   61,   62,   46,   63,
       46,   64,   65,   66,   67,   22,   22,   22,   68,   69,
       70,   71,   72,   73,   74,   75,   22,   76,   24,   25,
       26,   77,   28,   78,   30,   31,   32,   33,   34,   35,
       79,   37,   38,   39,   40,   41,   80,   43,   44,   45,
       81,   47,   81,   81,   81,   48,   49,   50,   51,   81,

       82,   83,   84,   85,   86,   87,   88,   81,   81,   81,
       89,   90,   91,   92,   81,   93,   81,   64,   65,   66,
       67,   22,   22,   22,   94,   95,   96,   97,   98,   99,
      100,  101,  103,  104,  105,  103,  104,  105,  757,  106,
      120,  121,  106,  109,  110,  111,  107,  120,  121,  107,
      112,  109,  110,  111,  115,  116,  399,  113,  112,  231,
      115,  116,  400,  232,  117,  113,  123,  124,  125,  118,
      117,  123,  124,  125,  240,  118,  246,  247,  241,  242,
      271,  271,  126,  268,  268,  268,  754,  126,  127,  128,
       24,  129,  130,  131,  132,  133,  134,  135,  136,  137,

      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  131,  150,  131,  131,  131,  151,  152,  153,
      154,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  155,
      156,  157,  158,  127,  127,  127,  159,  160,  161,  162,
      163,  164,  165,  166,  167,  270,  270,  270,  272,  272,
      272,  273,  273,  274,  274,  274,  751,  168,  320,  320,
      320,  323,  323,  169,  170,  171,  172,  170,  170,  173,
      170,  173,  170,  170,  170,  170,  170,  174,  170,  175,
      176,  170,  177,  170,  170,  170,  170,  170,  173,  170,

      173,  173,  173,  170,  170,  170,  170,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  170,  170,  170,  170,  170,
      170,  170,  178,  179,  180,  181,  182,  183,  184,  185,
      187,  188,  189,  190,  187,  188,  189,  190,  191,  322,
      322,  322,  191,  192,  324,  324,  324,  192,  231,  193,
      325,  325,  232,  193,  172,  172,  172,  172,  172,  194,
      172,  195,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  195,  172,
      195,  195,  195,  172,  172,  172,  172,  195,  196,  197,

      198,  199,  200,  201,  202,  195,  195,  195,  203,  204,
      205,  206,  195,  207,  195,  172,  172,  172,  172,  172,
      172,  172,  208,  209,  210,  211,  212,  213,  214,  215,
      219,  326,  326,  326,  750,  329,  331,  749,  335,  233,
      330,  332,  234,  336,  337,  742,  235,  236,  237,  338,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      238,  243,  239,  244,  218,  218,  280,  302,  303,  228,
      741,  245,  346,  246,  247,  218,  391,  347,  229,  280,
      392,  245,  245,  740,  218,  280,  218,  218,  739,  220,
      221,  222,  223,  224,  225,  226,  227,  218,  730,  218,

      218,  218,  218,  239,  251,  252,  218,  419,  348,  729,
      218,  397,  218,  218,  218,  218,  218,  728,  253,  218,
      349,  218,  349,  398,  218,  727,  218,  717,  254,  255,
      218,  218,  256,  218,  716,  218,  257,  218,  218,  271,
      271,  218,  240,  258,  218,  218,  241,  242,  259,  715,
      218,  218,  218,  273,  273,  218,  714,  218,  218,  218,
      713,  261,  218,  712,  260,  218,  218,  711,  262,  218,
      710,  218,  268,  268,  268,  709,  218,  264,  218,  668,
      263,  218,  218,  265,  668,  218,  280,  302,  303,  290,
      290,  685,  218,  266,  368,  368,  290,  290,  684,  280,

      290,  218,  276,  277,  278,  280,  683,  290,  425,  290,
      425,  290,  290,  426,  304,  280,  290,  305,  290,  290,
      682,  280,  290,  370,  370,  290,  290,  389,  390,  290,
      348,  290,  290,  290,  681,  306,  290,  680,  290,  679,
      307,  308,  349,  290,  349,  290,  270,  270,  270,  309,
      405,  405,  290,  310,  272,  272,  272,  290,  290,  281,
      282,  283,  284,  285,  286,  287,  288,  289,  290,  678,
      311,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      407,  407,  312,  677,  290,  314,  290,  676,  315,  290,
      675,  290,  673,  313,  665,  290,  290,  290,  290,  659,

      316,  290,  290,  627,  291,  413,  413,  290,  317,  274,
      274,  274,  290,  319,  318,  626,  290,  365,  365,  365,
      625,  290,  218,  218,  292,  293,  294,  295,  296,  297,
      298,  299,  289,  218,  243,  624,  244,  280,  302,  303,
      233,  623,  218,  234,  245,  415,  415,  235,  236,  237,
      280,  280,  302,  303,  245,  245,  280,  622,  300,  301,
      621,  238,  620,  239,  280,  367,  367,  367,  619,  300,
      280,  369,  369,  369,  371,  371,  371,  618,  301,  402,
      402,  402,  404,  404,  404,  350,  277,  278,  617,  292,
      293,  294,  295,  296,  297,  298,  299,  349,  280,  349,

      406,  406,  406,  616,  280,  353,  354,  355,  356,  357,
      358,  359,  360,  362,  615,  363,  377,  408,  408,  408,
      218,  218,  218,  364,  378,  379,  380,  381,  382,  383,
      384,  385,  611,  364,  364,  512,  378,  379,  380,  381,
      382,  383,  384,  385,  218,  218,  218,  218,  412,  412,
      412,  414,  414,  414,  512,  218,  606,  218,  416,  416,
      416,  218,  218,  600,  218,  237,  218,  410,  218,  218,
      457,  457,  218,  245,  424,  243,  597,  244,  463,  218,
      566,  218,  245,  245,  245,  245,  218,  218,  218,  218,
      218,  560,  245,  245,  426,  245,  245,  218,  426,  428,

      218,  218,  218,  218,  218,  429,  430,  218,  218,  218,
      459,  459,  218,  538,  218,  537,  432,  536,  218,  218,
      218,  218,  431,  218,  218,  218,  535,  218,  467,  467,
      218,  534,  218,  218,  533,  218,  532,  433,  531,  218,
      434,  435,  530,  218,  218,  218,  218,  218,  218,  218,
      218,  529,  218,  218,  218,  528,  218,  527,  218,  436,
      218,  218,  218,  524,  218,  218,  523,  218,  438,  437,
      289,  517,  218,  218,  439,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  516,  440,  218,  374,  218,  511,
      218,  511,  442,  218,  512,  218,  667,  218,  667,  218,

      441,  668,  218,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  443,  443,  443,  444,  444,
      444,  445,  445,  445,  276,  277,  278,  447,  448,  449,
      450,  451,  452,  453,  454,  469,  469,  280,  280,  302,
      303,  505,  505,  280,  279,  279,  279,  456,  456,  456,
      509,  280,  458,  458,  458,  290,  290,  280,  460,  460,
      460,  290,  290,  290,  507,  507,  290,  519,  519,  290,
      290,  466,  466,  466,  503,  290,  468,  468,  468,  351,
      290,  281,  282,  283,  284,  285,  286,  287,  288,  290,
      464,  470,  470,  470,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  344,  290,  491,  290,  472,  290,
      490,  290,  302,  290,  290,  471,  290,  465,  290,  473,
      474,  463,  290,  290,  290,  461,  290,  290,  455,  290,
      290,  320,  320,  320,  290,  476,  277,  290,  521,  521,
      290,  422,  475,  290,  290,  290,  290,  477,  421,  290,
      290,  290,  290,  290,  420,  290,  290,  290,  417,  479,
      478,  290,  411,  290,  290,  525,  526,  290,  480,  216,
      290,  409,  290,  290,  290,  403,  290,  290,  290,  290,
      290,  320,  320,  320,  290,  290,  290,  401,  290,  484,
      290,  396,  482,  481,  562,  562,  290,  290,  483,  290,

      290,  290,  290,  290,  395,  290,  290,  290,  320,  320,
      320,  290,  394,  290,  393,  486,  388,  290,  564,  564,
      290,  387,  290,  485,  602,  602,  290,  320,  320,  320,
      487,  487,  487,  488,  488,  488,  489,  489,  489,  493,
      386,  494,  350,  277,  278,  353,  354,  355,  356,  357,
      358,  359,  360,  375,  349,  280,  349,  352,  352,  352,
      374,  280,  504,  504,  504,  506,  506,  506,  508,  508,
      508,  361,  365,  365,  365,  365,  365,  365,  372,  364,
      366,  495,  496,  497,  498,  499,  500,  501,  502,  364,
      364,  510,  362,  361,  363,  365,  365,  365,  351,  364,

      604,  604,  364,  365,  365,  365,  513,  513,  513,  364,
      364,  275,  364,  364,  514,  514,  514,  515,  515,  515,
      376,  376,  376,  518,  518,  518,  520,  520,  520,  522,
      522,  522,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  539,  539,  539,  540,  540,  540,
      541,  541,  541,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  269,  542,
      543,  543,  543,  218,  544,  544,  544,  545,  545,  545,
      424,  218,  218,  218,  218,  218,  218,  546,  245,  218,
      218,  247,  218,  547,  218,  549,  218,  548,  245,  245,

      218,  218,  267,  218,  250,  218,  218,  218,  247,  218,
      218,  218,  218,  218,  218,  218,  249,  550,  218,  218,
      551,  218,  248,  218,  553,  218,  218,  552,  230,  218,
      218,  289,  218,  217,  218,  218,  218,  345,  218,  218,
      218,  218,  218,  559,  559,  559,  218,  218,  218,  555,
      218,  344,  218,  218,  218,  218,  554,  343,  218,  218,
      342,  556,  341,  557,  218,  218,  218,  218,  559,  559,
      559,  661,  661,  218,  663,  663,  218,  559,  559,  559,
      558,  446,  446,  446,  340,  218,  339,  334,  447,  448,
      449,  450,  451,  452,  453,  454,  561,  561,  561,  563,

      563,  563,  565,  565,  565,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  567,  567,  567,
      568,  568,  568,  569,  569,  569,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  333,  570,  571,  571,  571,  290,  572,  572,  572,
      573,  573,  573,  290,  290,  290,  290,  328,  327,  574,
      290,  290,  321,  275,  290,  575,  290,  269,  576,  247,
      267,  290,  250,  290,  247,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  249,  577,  290,  248,  578,
      230,  579,  290,  217,  290,  216,  290,  758,  290,  290,

      290,  290,  758,  290,  290,  290,  290,  290,  580,  758,
      290,  290,  290,  758,  581,  290,  758,  290,  758,  290,
      758,  583,  290,  758,  290,  758,  290,  582,  290,  290,
      598,  290,  494,  290,  290,  290,  290,  758,  758,  290,
      599,  290,  290,  758,  290,  758,  290,  758,  584,  585,
      599,  599,  290,  290,  758,  290,  586,  587,  587,  587,
      758,  290,  587,  587,  587,  587,  587,  587,  589,  590,
      591,  592,  593,  594,  595,  596,  492,  492,  492,  601,
      601,  601,  603,  603,  603,  605,  605,  605,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      607,  607,  607,  608,  608,  608,  609,  609,  609,  510,
      610,  610,  610,  610,  610,  610,  758,  364,  610,  610,
      610,  376,  376,  376,  376,  376,  376,  364,  364,  376,
      376,  376,  376,  376,  376,  612,  612,  612,  613,  613,
      613,  614,  614,  614,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  218,  218,  630,  630,  630,  630,  630,
      630,  629,  758,  758,  218,  630,  630,  630,  218,  218,
      218,  218,  758,  218,  218,  218,  218,  218,  758,  218,
      758,  218,  631,  758,  758,  218,  632,  218,  218,  633,
      218,  218,  218,  758,  218,  758,  218,  218,  218,  218,

      218,  758,  218,  218,  218,  446,  446,  446,  218,  636,
      218,  218,  634,  758,  218,  218,  218,  635,  758,  218,
      758,  637,  758,  218,  758,  758,  218,  758,  218,  218,
      218,  218,  758,  638,  758,  218,  639,  758,  640,  218,
      758,  218,  218,  218,  218,  218,  218,  218,  218,  758,
      218,  758,  758,  218,  641,  218,  758,  218,  446,  446,
      446,  758,  218,  758,  218,  758,  218,  446,  446,  446,
      446,  446,  446,  642,  642,  642,  643,  643,  643,  644,
      644,  644,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  290,  290,  647,  647,  647,  647,  647,  647,  646,

      758,  758,  290,  647,  647,  647,  290,  290,  290,  290,
      758,  290,  290,  290,  290,  290,  758,  290,  758,  290,
      648,  758,  758,  290,  649,  290,  290,  650,  290,  290,
      290,  758,  290,  758,  290,  290,  290,  290,  290,  758,
      290,  290,  290,  588,  588,  588,  290,  653,  290,  290,
      651,  758,  290,  290,  290,  652,  758,  290,  758,  654,
      758,  290,  758,  758,  290,  758,  290,  290,  290,  290,
      758,  655,  758,  290,  656,  758,  657,  290,  758,  290,
      290,  290,  290,  290,  290,  290,  290,  758,  290,  758,
      758,  290,  658,  290,  758,  290,  660,  660,  660,  758,

      290,  758,  290,  758,  290,  589,  590,  591,  592,  593,
      594,  595,  596,  662,  662,  662,  664,  664,  664,  597,
      758,  666,  492,  492,  492,  758,  758,  599,  758,  599,
      492,  492,  492,  492,  492,  492,  758,  599,  599,  599,
      599,  492,  492,  492,  669,  669,  669,  670,  670,  670,
      671,  671,  671,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  758,  218,  758,  218,  758,  218,  758,  218,  758,
      687,  686,  758,  218,  758,  218,  758,  218,  758,  218,

      218,  218,  218,  218,  695,  695,  695,  218,  218,  758,
      758,  218,  758,  218,  758,  689,  688,  758,  218,  758,
      218,  758,  218,  690,  218,  218,  758,  218,  758,  218,
      218,  218,  218,  758,  758,  218,  218,  218,  758,  758,
      218,  758,  218,  758,  218,  692,  691,  218,  694,  218,
      758,  693,  218,  218,  290,  290,  218,  695,  695,  695,
      695,  695,  695,  218,  758,  290,  290,  290,  290,  290,
      290,  290,  218,  758,  696,  758,  758,  290,  758,  290,
      758,  290,  290,  290,  290,  290,  290,  758,  290,  758,
      290,  758,  758,  697,  758,  290,  290,  290,  758,  758,

      698,  758,  290,  758,  290,  758,  758,  290,  758,  699,
      290,  290,  290,  290,  758,  758,  290,  290,  290,  758,
      758,  290,  758,  290,  290,  290,  700,  758,  290,  758,
      290,  758,  290,  702,  701,  290,  758,  290,  290,  290,
      290,  290,  758,  758,  703,  588,  588,  588,  758,  290,
      704,  290,  588,  588,  588,  588,  588,  588,  290,  758,
      290,  588,  588,  588,  705,  705,  705,  706,  706,  706,
      707,  707,  707,  666,  708,  708,  708,  708,  708,  708,
      758,  599,  708,  708,  708,  218,  218,  758,  218,  218,
      758,  599,  599,  218,  218,  758,  218,  758,  718,  218,

      758,  719,  758,  758,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  758,  218,  758,  758,
      218,  758,  218,  720,  721,  218,  218,  218,  218,  218,
      758,  218,  218,  218,  218,  290,  290,  758,  218,  290,
      290,  758,  758,  218,  758,  758,  290,  218,  722,  758,
      290,  758,  218,  290,  290,  290,  758,  290,  290,  290,
      758,  723,  758,  758,  290,  290,  290,  758,  290,  290,
      290,  758,  758,  290,  724,  758,  290,  290,  758,  758,
      290,  758,  725,  290,  290,  290,  290,  290,  758,  290,
      290,  290,  758,  758,  290,  758,  758,  290,  726,  726,

      726,  290,  758,  290,  218,  218,  290,  726,  726,  726,
      290,  726,  726,  726,  758,  218,  218,  218,  218,  218,
      758,  731,  218,  218,  218,  758,  758,  218,  758,  218,
      758,  758,  758,  218,  733,  758,  732,  758,  218,  290,
      290,  734,  218,  290,  290,  758,  290,  290,  758,  758,
      290,  758,  758,  758,  290,  758,  735,  290,  758,  290,
      290,  290,  737,  736,  218,  218,  290,  218,  218,  758,
      758,  290,  758,  758,  758,  218,  758,  744,  218,  738,
      290,  218,  218,  743,  218,  218,  218,  218,  290,  290,
      758,  758,  218,  758,  758,  745,  218,  758,  758,  290,

      758,  218,  290,  290,  746,  218,  290,  290,  290,  290,
      290,  758,  758,  290,  758,  747,  758,  290,  758,  748,
      290,  758,  290,  218,  218,  758,  290,  218,  218,  290,
      218,  218,  758,  758,  218,  290,  290,  758,  218,  758,
      758,  218,  758,  218,  752,  758,  290,  218,  290,  290,
      218,  290,  290,  218,  218,  290,  290,  290,  758,  290,
      758,  758,  290,  758,  218,  753,  758,  290,  290,  755,
      758,  290,  756,  218,  218,  218,  290,  290,  290,  758,
      758,  758,  758,  758,  758,  218,  758,  758,  290,  758,
      758,  758,  758,  758,  218,  758,  758,  290,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  218,  758,  758,  758,  218,  279,  279,  758,
      279,  279,  290,  758,  758,  290,  758,  758,  758,  290,
      352,  758,  758,  758,  352,  373,  758,  758,  758,  373,
      373,  373,  373,  373,  376,  758,  758,  758,  376,  418,
      418,  418,  418,  418,  418,  418,  418,  423,  423,  423,

      423,  423,  423,  423,  423,  427,  427,  427,  427,  427,
      427,  427,  427,  446,  758,  758,  446,  758,  758,  758,
      446,  462,  462,  462,  462,  462,  462,  758,  462,  462,
      492,  492,  758,  492,  492,  588,  758,  758,  758,  588,
       21,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758
    } ;

static yyconst flex_int16_t yy_chk[2808] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    4,    4,    4,  754,    3,
        9,    9,    4,    5,    5,    5,    3,   10,   10,    4,
        5,    6,    6,    6,    7,    7,  206,    5,    6,   34,
        8,    8,  206,   34,    7,    6,   11,   11,   11,    7,
        8,   12,   12,   12,   39,    8,   43,   43,   39,   39,
       71,   71,   11,   68,   68,   68,  750,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   14,   70,   70,   70,   72,   72,
       72,   73,   73,   74,   74,   74,  742,   14,   94,   94,
       94,   97,   97,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       17,   17,   17,   17,   18,   18,   18,   18,   17,   96,
       96,   96,   18,   17,   98,   98,   98,   18,  138,   17,
       99,   99,  138,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       27,  100,  100,  100,  740,  105,  106,  739,  111,   38,
      105,  106,   38,  111,  112,  730,   38,   38,   38,  112,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       38,   40,   38,   40,   46,   46,   79,   79,   79,   29,
      729,   40,  126,  147,  147,   46,  200,  126,   29,   79,
      200,   40,   40,  728,   46,   79,   52,   52,  727,   29,
       29,   29,   29,   29,   29,   29,   29,   52,  714,   53,

       53,   54,   54,  234,   52,   53,   52,  234,  128,  712,
       53,  205,   54,   55,   55,   56,   56,  711,   54,   53,
      128,   54,  128,  205,   55,  709,   56,  684,   55,   55,
       57,   57,   56,   55,  683,   56,   56,   58,   58,  162,
      162,   57,  143,   57,   59,   59,  143,  143,   58,  682,
       57,   60,   60,  164,  164,   59,  681,   58,   61,   61,
      680,   60,   60,  679,   59,   62,   62,  678,   61,   61,
      677,   60,  159,  159,  159,  673,   62,   62,   61,  668,
       61,   63,   63,   62,  667,   62,   80,   80,   80,   81,
       81,  627,   63,   63,  181,  181,   82,   82,  625,   80,

       81,   63,   76,   76,   76,   80,  624,   82,  245,   81,
      245,   83,   83,  245,   82,   76,   82,   83,   84,   84,
      623,   76,   83,  183,  183,   85,   85,  199,  199,   84,
      348,   83,   86,   86,  622,   84,   85,  621,   84,  620,
       85,   85,  348,   86,  348,   85,  161,  161,  161,   86,
      211,  211,   86,   86,  163,  163,  163,   87,   87,   76,
       76,   76,   76,   76,   76,   76,   76,   77,   87,  619,
       87,   88,   88,   89,   89,   90,   90,   87,   91,   91,
      213,  213,   88,  618,   89,   90,   90,  617,   91,   91,
      615,   88,  611,   89,  596,   90,   92,   92,   91,  590,

       91,   93,   93,  538,   77,  223,  223,   92,   92,  165,
      165,  165,   93,   93,   92,  536,   92,  178,  178,  178,
      535,   93,  131,  131,   77,   77,   77,   77,   77,   77,
       77,   77,   78,  131,  144,  534,  144,  168,  168,  168,
      142,  533,  131,  142,  144,  225,  225,  142,  142,  142,
      168,  169,  169,  169,  144,  144,  168,  532,   78,   78,
      531,  142,  530,  142,  169,  180,  180,  180,  528,   78,
      169,  182,  182,  182,  184,  184,  184,  527,   78,  208,
      208,  208,  210,  210,  210,  167,  167,  167,  526,   78,
       78,   78,   78,   78,   78,   78,   78,  167,  167,  167,

      212,  212,  212,  525,  167,  173,  173,  173,  173,  173,
      173,  173,  173,  177,  524,  177,  194,  214,  214,  214,
      220,  220,  220,  177,  195,  195,  195,  195,  195,  195,
      195,  195,  516,  177,  177,  512,  194,  194,  194,  194,
      194,  194,  194,  194,  218,  218,  219,  219,  222,  222,
      222,  224,  224,  224,  511,  218,  502,  219,  226,  226,
      226,  228,  228,  496,  218,  237,  219,  219,  229,  229,
      284,  284,  228,  237,  243,  244,  493,  244,  463,  229,
      454,  228,  243,  237,  237,  244,  252,  252,  229,  251,
      251,  448,  243,  243,  426,  244,  244,  252,  425,  251,

      251,  253,  253,  254,  254,  252,  252,  255,  255,  251,
      286,  286,  253,  401,  254,  400,  255,  399,  255,  256,
      256,  253,  254,  254,  257,  257,  398,  255,  295,  295,
      256,  397,  258,  258,  396,  257,  395,  256,  393,  256,
      257,  258,  392,  258,  257,  259,  259,  260,  260,  261,
      261,  391,  258,  262,  262,  390,  259,  389,  260,  260,
      261,  263,  263,  386,  262,  259,  385,  260,  262,  261,
      279,  379,  263,  262,  263,  264,  264,  265,  265,  266,
      266,  263,  268,  268,  377,  264,  264,  374,  265,  364,
      266,  364,  266,  268,  364,  264,  599,  265,  599,  266,

      265,  599,  268,  269,  269,  269,  270,  270,  270,  271,
      271,  271,  272,  272,  272,  273,  273,  273,  274,  274,
      274,  275,  275,  275,  276,  276,  276,  279,  279,  279,
      279,  279,  279,  279,  279,  297,  297,  276,  280,  280,
      280,  356,  356,  276,  281,  281,  281,  283,  283,  283,
      360,  280,  285,  285,  285,  290,  290,  280,  287,  287,
      287,  292,  292,  292,  358,  358,  290,  381,  381,  291,
      291,  294,  294,  294,  354,  290,  296,  296,  296,  351,
      291,  276,  276,  276,  276,  276,  276,  276,  276,  291,
      291,  298,  298,  298,  300,  300,  301,  301,  304,  304,

      305,  305,  306,  306,  344,  300,  339,  301,  304,  304,
      333,  305,  303,  306,  300,  299,  301,  293,  304,  305,
      305,  289,  306,  307,  307,  288,  308,  308,  282,  309,
      309,  321,  321,  321,  307,  308,  278,  308,  383,  383,
      309,  238,  307,  307,  310,  310,  308,  309,  236,  309,
      311,  311,  312,  312,  235,  310,  313,  313,  227,  311,
      310,  311,  221,  312,  310,  387,  387,  313,  313,  216,
      311,  215,  312,  314,  314,  209,  313,  315,  315,  317,
      317,  322,  322,  322,  314,  316,  316,  207,  315,  317,
      317,  204,  315,  314,  450,  450,  316,  315,  316,  317,

      318,  318,  319,  319,  203,  316,  320,  320,  323,  323,
      323,  318,  202,  319,  201,  319,  198,  320,  452,  452,
      318,  197,  319,  318,  498,  498,  320,  324,  324,  324,
      325,  325,  325,  326,  326,  326,  327,  327,  327,  349,
      196,  349,  350,  350,  350,  352,  352,  352,  352,  352,
      352,  352,  352,  189,  350,  350,  350,  353,  353,  353,
      187,  350,  355,  355,  355,  357,  357,  357,  359,  359,
      359,  361,  366,  366,  366,  367,  367,  367,  185,  361,
      179,  349,  349,  349,  349,  349,  349,  349,  349,  361,
      361,  362,  363,  176,  363,  368,  368,  368,  171,  362,

      500,  500,  363,  369,  369,  369,  370,  370,  370,  362,
      362,  166,  363,  363,  371,  371,  371,  372,  372,  372,
      378,  378,  378,  380,  380,  380,  382,  382,  382,  384,
      384,  384,  403,  403,  403,  404,  404,  404,  405,  405,
      405,  406,  406,  406,  407,  407,  407,  408,  408,  408,
      409,  409,  409,  410,  410,  411,  411,  411,  412,  412,
      412,  413,  413,  413,  410,  414,  414,  414,  160,  410,
      415,  415,  415,  410,  416,  416,  416,  417,  417,  417,
      424,  428,  428,  429,  429,  431,  431,  428,  424,  430,
      430,  158,  428,  429,  429,  431,  431,  430,  424,  424,

      430,  428,  156,  429,  152,  431,  432,  432,  150,  430,
      433,  433,  434,  434,  436,  436,  149,  432,  435,  435,
      434,  433,  148,  434,  436,  436,  432,  435,  134,  435,
      433,  446,  434,  129,  436,  437,  437,  125,  435,  438,
      438,  439,  439,  443,  443,  443,  437,  440,  440,  438,
      438,  123,  439,  441,  441,  437,  437,  121,  440,  438,
      118,  439,  117,  440,  441,  442,  442,  440,  444,  444,
      444,  592,  592,  441,  594,  594,  442,  445,  445,  445,
      442,  447,  447,  447,  116,  442,  113,  110,  446,  446,
      446,  446,  446,  446,  446,  446,  449,  449,  449,  451,

      451,  451,  453,  453,  453,  455,  455,  455,  456,  456,
      456,  457,  457,  457,  458,  458,  458,  459,  459,  459,
      460,  460,  460,  461,  461,  461,  464,  464,  465,  465,
      465,  466,  466,  466,  467,  467,  467,  464,  468,  468,
      468,  107,  464,  469,  469,  469,  464,  470,  470,  470,
      471,  471,  471,  472,  472,  473,  473,  104,  101,  472,
      474,  474,   95,   75,  472,  473,  473,   69,  474,   67,
       65,  474,   49,  472,   47,  473,  475,  475,  476,  476,
      474,  477,  477,  478,  478,   45,  475,  475,   44,  476,
       30,  478,  477,   25,  478,   23,  475,   21,  476,  479,

      479,  477,    0,  478,  480,  480,  481,  481,  479,    0,
      479,  482,  482,    0,  480,  480,    0,  481,    0,  479,
        0,  482,  482,    0,  480,    0,  481,  481,  483,  483,
      494,  482,  494,  484,  484,  485,  485,    0,    0,  483,
      494,  486,  486,    0,  484,    0,  485,    0,  483,  484,
      494,  494,  486,  484,    0,  485,  486,  487,  487,  487,
        0,  486,  488,  488,  488,  489,  489,  489,  492,  492,
      492,  492,  492,  492,  492,  492,  495,  495,  495,  497,
      497,  497,  499,  499,  499,  501,  501,  501,  503,  503,
      503,  504,  504,  504,  505,  505,  505,  506,  506,  506,

      507,  507,  507,  508,  508,  508,  509,  509,  509,  510,
      513,  513,  513,  514,  514,  514,    0,  510,  515,  515,
      515,  517,  517,  517,  518,  518,  518,  510,  510,  519,
      519,  519,  520,  520,  520,  521,  521,  521,  522,  522,
      522,  523,  523,  523,  539,  539,  539,  540,  540,  540,
      541,  541,  541,  542,  542,  543,  543,  543,  544,  544,
      544,  542,    0,    0,  542,  545,  545,  545,  546,  546,
      547,  547,    0,  542,  548,  548,  549,  549,    0,  546,
        0,  547,  546,    0,    0,  548,  548,  549,  546,  549,
      547,  550,  550,    0,  548,    0,  549,  551,  551,  552,

      552,    0,  550,  553,  553,  560,  560,  560,  551,  552,
      552,  550,  550,    0,  553,  554,  554,  551,    0,  552,
        0,  553,    0,  553,    0,    0,  554,    0,  555,  555,
      556,  556,    0,  554,    0,  554,  555,    0,  556,  555,
        0,  556,  557,  557,  558,  558,  559,  559,  555,    0,
      556,    0,    0,  557,  558,  558,    0,  559,  561,  561,
      561,    0,  557,    0,  558,    0,  559,  562,  562,  562,
      563,  563,  563,  564,  564,  564,  565,  565,  565,  566,
      566,  566,  567,  567,  567,  568,  568,  568,  569,  569,
      569,  570,  570,  571,  571,  571,  572,  572,  572,  570,

        0,    0,  570,  573,  573,  573,  574,  574,  575,  575,
        0,  570,  576,  576,  577,  577,    0,  574,    0,  575,
      574,    0,    0,  576,  576,  577,  574,  577,  575,  578,
      578,    0,  576,    0,  577,  579,  579,  580,  580,    0,
      578,  581,  581,  589,  589,  589,  579,  580,  580,  578,
      578,    0,  581,  582,  582,  579,    0,  580,    0,  581,
        0,  581,    0,    0,  582,    0,  583,  583,  584,  584,
        0,  582,    0,  582,  583,    0,  584,  583,    0,  584,
      585,  585,  586,  586,  587,  587,  583,    0,  584,    0,
        0,  585,  586,  586,    0,  587,  591,  591,  591,    0,

      585,    0,  586,    0,  587,  588,  588,  588,  588,  588,
      588,  588,  588,  593,  593,  593,  595,  595,  595,  597,
        0,  598,  600,  600,  600,    0,    0,  597,    0,  598,
      601,  601,  601,  602,  602,  602,    0,  597,  597,  598,
      598,  603,  603,  603,  604,  604,  604,  605,  605,  605,
      606,  606,  606,  607,  607,  607,  608,  608,  608,  609,
      609,  609,  612,  612,  612,  613,  613,  613,  614,  614,
      614,  629,  629,  630,  630,  631,  631,  632,  632,  633,
      633,    0,  629,    0,  630,    0,  631,    0,  632,    0,
      633,  629,    0,  630,    0,  631,    0,  632,    0,  633,

      634,  634,  635,  635,  642,  642,  642,  636,  636,    0,
        0,  634,    0,  635,    0,  635,  634,    0,  636,    0,
      634,    0,  635,  636,  637,  637,    0,  636,    0,  638,
      638,  639,  639,    0,    0,  637,  640,  640,    0,    0,
      638,    0,  639,    0,  637,  638,  637,  640,  640,  638,
        0,  639,  641,  641,  646,  646,  640,  643,  643,  643,
      644,  644,  644,  641,    0,  646,  647,  647,  648,  648,
      649,  649,  641,    0,  646,    0,    0,  647,    0,  648,
        0,  649,  650,  650,  651,  651,  647,    0,  648,    0,
      649,    0,    0,  650,    0,  651,  652,  652,    0,    0,

      651,    0,  650,    0,  651,    0,    0,  652,    0,  652,
      653,  653,  654,  654,    0,    0,  652,  655,  655,    0,
        0,  653,    0,  654,  656,  656,  653,    0,  655,    0,
      653,    0,  654,  655,  654,  656,    0,  655,  657,  657,
      658,  658,    0,    0,  656,  659,  659,  659,    0,  657,
      657,  658,  660,  660,  660,  661,  661,  661,  657,    0,
      658,  662,  662,  662,  663,  663,  663,  664,  664,  664,
      665,  665,  665,  666,  669,  669,  669,  670,  670,  670,
        0,  666,  671,  671,  671,  686,  686,    0,  687,  687,
        0,  666,  666,  688,  688,    0,  686,    0,  686,  687,

        0,  688,    0,    0,  688,  686,  689,  689,  687,  690,
      690,  691,  691,  688,  692,  692,    0,  689,    0,    0,
      690,    0,  691,  689,  691,  692,  689,  693,  693,  690,
        0,  691,  694,  694,  692,  696,  696,    0,  693,  697,
      697,    0,    0,  694,    0,    0,  696,  693,  696,    0,
      697,    0,  694,  698,  698,  696,    0,  699,  699,  697,
        0,  698,    0,    0,  698,  700,  700,    0,  699,  701,
      701,    0,    0,  698,  699,    0,  700,  699,    0,    0,
      701,    0,  701,  702,  702,  700,  703,  703,    0,  701,
      704,  704,    0,    0,  702,    0,    0,  703,  705,  705,

      705,  704,    0,  702,  718,  718,  703,  706,  706,  706,
      704,  707,  707,  707,    0,  718,  719,  719,  720,  720,
        0,  718,  721,  721,  718,    0,    0,  719,    0,  720,
        0,    0,    0,  721,  720,    0,  719,    0,  720,  722,
      722,  721,  721,  723,  723,    0,  724,  724,    0,    0,
      722,    0,    0,    0,  723,    0,  722,  724,    0,  722,
      725,  725,  724,  723,  732,  732,  724,  731,  731,    0,
        0,  725,    0,    0,    0,  732,    0,  732,  731,  725,
      725,  733,  733,  731,  732,  734,  734,  731,  735,  735,
        0,    0,  733,    0,    0,  734,  734,    0,    0,  735,

        0,  733,  736,  736,  735,  734,  737,  737,  735,  738,
      738,    0,    0,  736,    0,  736,    0,  737,    0,  738,
      738,    0,  736,  743,  743,    0,  737,  744,  744,  738,
      745,  745,    0,    0,  743,  746,  746,    0,  744,    0,
        0,  745,    0,  743,  744,    0,  746,  744,  747,  747,
      745,  748,  748,  752,  752,  746,  753,  753,    0,  747,
        0,    0,  748,    0,  752,  747,    0,  753,  747,  752,
        0,  748,  753,  752,  755,  755,  753,  756,  756,    0,
        0,    0,    0,    0,    0,  755,    0,    0,  756,    0,
        0,    0,    0,    0,  755,    0,    0,  756,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  765,    0,    0,    0,  765,  766,  766,    0,
      766,  766,  767,    0,    0,  767,    0,    0,    0,  767,
      768,    0,    0,    0,  768,  769,    0,    0,    0,  769,
      769,  769,  769,  769,  770,    0,    0,    0,  770,  771,
      771,  771,  771,  771,  771,  771,  771,  772,  772,  772,

      772,  772,  772,  772,  772,  773,  773,  773,  773,  773,
      773,  773,  773,  774,    0,    0,  774,    0,    0,    0,
      774,  775,  775,  775,  775,  775,  775,    0,  775,  775,
      776,  776,    0,  776,  776,  777,    0,    0,    0,  777,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "MALLOC.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

 static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;
/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

//#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#define DEBUG(x) /* Nothing */

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 759 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2741 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.str = new std::wstring(pwText);
        if (symbol::Context::getInstance()->get(*yylval.str) != NULL
            && symbol::Context::getInstance()->get(*yylval.str)->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE)
    {
      return scan_throw(QUOTE);
    }
  else {
    pstBuffer = new std::string();
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
}
	YY_BREAK

case 80:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 90:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    yy_pop_state();
    wchar_t* pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    unput('\n');
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 106:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      *yylval.comment += std::wstring(to_wide_string(yytext));
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
    std::string str = "unexpected end of file in a comment";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 110:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 119:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yyterminate();
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 128:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(SEMI);
    }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(COMMA);
    }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(EOL);
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
        yylval.str = new std::wstring(to_wide_string(yytext));
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 133:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 759 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 759 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 758);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
  wchar_t* pstMsg = to_wide_string(msg.c_str());

  //std::wcerr << pstMsg << std::endl;
  ParserSingleInstance::PrintError(pstMsg);
  ParserSingleInstance::setExitStatus(Parser::Failed);
  FREE(pstMsg);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

