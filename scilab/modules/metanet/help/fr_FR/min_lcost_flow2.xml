<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="fr" xml:id="min_lcost_flow2">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>min_lcost_flow2</refname>
    <refpurpose> flot de coût linéaire minimum  </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Séquence d'appel</title>
    <synopsis>[c,phi,flag] = min_lcost_flow2(g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Paramètres</title>
    <variablelist>
      <varlistentry>
        <term>g  </term>
        <listitem>
          <para>graphe (liste)
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>c  </term>
        <listitem>
          <para>valeur du coût
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>phi  </term>
        <listitem>
          <para>vecteur ligne des valeurs des flots sur les arcs
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>flag  </term>
        <listitem>
          <para>problème soluble ou pas (0 ou 1)
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>min_lcost_flow2</literal> calcule flot de coût linéaire minimum dans un réseau 
    <literal>g</literal>. Elle renvoie le coût total du flot sur les arcs <literal>c</literal> et
    le vecteur ligne des flots sur les arcs <literal>phi</literal>. Si le problème n'est pas soluble (impossible de trouver un flot compatible), <literal>flag</literal> est égal à 0, sinon il est égal à 1.
  </para>
    <para>
    Les bornes sur les flots sont données par les éléments <literal>edge_min_cap</literal> et
    <literal>edge_max_cap</literal> du graphe. 
    La valeur de la capacité minimum doit être égal à zéro. Les valeurs des capacités maximum doivent être entières et positives.
    Si les valeurs <literal>edge_min_cap</literal> ou <literal>edge_max_cap</literal> ne sont pas données (vecteur vide <literal>[]</literal>), elles sont supposées nulles sur chaque arête.
  </para>
    <para>
    Les coûts sur les arêtes sont donnés par les éléments <literal>edge_cost</literal> du graphe.
    Les coûts doivent être entiers et positifs.
    Si la valeur de <literal>edge_cost</literal> n'est pas donnée (vecteur vide <literal>[]</literal>), 
    elle est supposé nulle sur chaque arête.
  </para>
    <para>
  </para>
    <para>
    La demande sur les sommets est donnée par l'élément <literal>node_demand</literal> du graphe.
    Les demandes doivent être des nombre entiers. La somme des demandes doit être nulle pour que le problème soit soluble. Si la valeur de <literal>node_demand</literal> n'est pas donnée (vecteur vide <literal>[]</literal>), elle est supposée nulle sur chaque sommet.
  </para>
    <para>
    Cette fonction utilise un algorithme de relaxation dû à D. Bertsekas.
  </para>
  </refsection>
  <refsection>
    <title>Exemples</title>
    <programlisting role="example"><![CDATA[
ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10 1 8];
he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1 12 14];
g=make_graph('foo',1,15,ta,he);
g('node_x')=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548];
g('node_y')=[56 221 316 318 316 143 214 321 217 126 215 80 330 437 439];
show_graph(g);
g1=g; ma=arc_number(g1); n=g1('node_number');
g1('edge_min_cap')=0.*ones(1,ma);
messagebox(['Generation aléatoire des données';
           'Les premiers problèmes générés peuvent être insolubles'],"modal");
while %T then
 rand('uniform');
 g1('edge_max_cap')=round(20*rand(1,ma))+20*ones(1,ma);
 g1('edge_cost')=round(10*rand(1,ma)+ones(1,ma));
 rand('normal');
 dd=20.*rand(1,n)-10*ones(1,n);
 dd=round(dd-sum(dd)/n*ones(1,n));
 dd(n)=dd(n)-sum(dd);
 g1('node_demand')=dd;
 [c,phi,flag]=min_lcost_flow2(g1);
 if flag==1 then break; end;
end;
messagebox(['Le cout est: '+string(c);
           'Voici le flot sur les arcs et les demandes des sommets'],"modal");
ii=find(phi<>0); edgecolor=phi; edgecolor(ii)=11*ones(ii);
g1('edge_color')=edgecolor;
edgefontsize=8*ones(1,ma); edgefontsize(ii)=18*ones(ii);
g1('edge_font_size')=edgefontsize;
g1('edge_label')=string(phi);
g1('node_label')=string(g1('node_demand'));
show_graph(g1);
 ]]></programlisting>
  </refsection>
  <refsection>
    <title>Voir Aussi</title>
    <simplelist type="inline">
      <member>
        <link linkend="min_lcost_cflow">min_lcost_cflow</link>
      </member>
      <member>
        <link linkend="min_lcost_flow1">min_lcost_flow1</link>
      </member>
      <member>
        <link linkend="min_qcost_flow">min_qcost_flow</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
