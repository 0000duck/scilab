<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../../../modules/helptools/help.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>arc_graph</TITLE>
  <TYPE>Scilab function</TYPE>
  <DATE>$LastChangedDate$</DATE>
  <SHORT_DESCRIPTION name="arc_graph"> graph with nodes corresponding to arcs</SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>g1 = arc_graph(g)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>g</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: a directed graph (see <LINK>graph_data_structure</LINK>).</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>g1</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: a directed graph </SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>arc_graph</VERB> returns the directed graph <VERB>g1</VERB> with the nodes 
    corresponding to the arcs of the directed graph <VERB>g</VERB>.
    <VERB>g1</VERB> is defined in the following way:</P>
    <P>
    - its nodes correspond to the arcs of <VERB>g</VERB></P>
    <P>
    - 2 nodes of the new graph are adjacent if and only if the corresponding
    arcs of the graph <VERB>g</VERB> are consecutive.</P>
    <P>
    The coordinates of the nodes of <VERB>g1</VERB> are given by the middle points of the 
    corresponding edges of <VERB>g</VERB>.</P>
    <P>
    If such an arc graph does not exist, an empty vector is returned.</P>
  </DESCRIPTION>
  <EXAMPLE>
<![CDATA[
//create the initial graph
ta=[1 1 2 4 4 5 6 7 2 3 5 1];
he=[2 6 3 6 7 8 8 8 4 7 3 5];
g=make_graph('foo',1,8,ta,he);
g.nodes.graphics.x=[281  284  360  185  405  182  118  45];
g.nodes.graphics.y=[262  179  130  154  368  248  64  309];
//customize display
g.nodes.graphics.display='name';
g.edges.graphics.name=string(1:edge_number(g));
g.edges.graphics.display='name';
show_graph(g);

//compute the arc_graph
g1=arc_graph(g);
g1.edges.graphics.name=string(1:edge_number(g1));
g1.edges.graphics.display='name';
g1.nodes.graphics.display='name';
show_graph(g1,'new');

// merge the two graph
g1.nodes.graphics.colors(2,:)=color('red');
g1.edges.graphics.foreground(:)=color('red');
show_graph(graph_union(g,g1,%f),'new')
  ]]>
  </EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>line_graph</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
