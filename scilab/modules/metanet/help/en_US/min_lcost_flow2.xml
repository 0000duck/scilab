<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "../../manrev.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>min_lcost_flow2</TITLE>
  <TYPE>Scilab function</TYPE>
  <DATE>$LastChangedDate$</DATE>
  <SHORT_DESCRIPTION name="min_lcost_flow2"> minimum linear cost flow</SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
    <CALLING_SEQUENCE_ITEM>[c,phi,flag] = min_lcost_flow2(g)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
        <PARAM_NAME>g</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>:  a <LINK>graph_data_structure</LINK>.</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>c</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: value of cost</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>phi</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: row vector of the value of flow on the arcs</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
        <PARAM_NAME>flag</PARAM_NAME>
        <PARAM_DESCRIPTION>
          <SP>: feasible problem flag (0 or 1)</SP>
        </PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
    <P><VERB>min_lcost_flow2</VERB> computes the minimum linear cost flow in the network 
    <VERB>g</VERB>. It returns the total cost of the flows on the arcs <VERB>c</VERB> and
    the row vector of the flows on the arcs <VERB>phi</VERB>. If the problem is not 
    feasible (impossible to find a compatible flow for instance), <VERB>flag</VERB> is 
    equal to 0, otherwise it is equal to 1.</P>
   
    <P>The bounds of the flow are given by the  <VERB>min_cap</VERB> and
    <VERB>max_cap</VERB> fields of the graph <LINK>edges_data_structure</LINK>.
    The value of the minimum capacity must be equal to zero. The values of the 
    maximum capacity must be non negative and must be integer numbers.
    If the value of <VERB>min_cap</VERB> or <VERB>max_cap</VERB> are not given , it is assumed to be equal to 0 on each edge.</P>
    <P>
    The costs on the edges are given by the  <VERB>cost</VERB> field of the 
    graph <LINK>edges_data_structure</LINK>.
    The costs must be non negative and must be integer numbers.
    If the value of <VERB>cost</VERB> is not given (empty row vector <VERB>[]</VERB>), 
    it is assumed to be equal to 0 on each edge.</P>
    <P>
    The demand on the nodes are given by the <VERB>demand</VERB> field of the 
    graph <LINK>nodes_data_structure</LINK>. 
    The demands must be integer numbers. Note that the sum of the demands must
    be equal to zero for the problem to be feasible.
    If the value of <VERB>demand</VERB> is not given (empty row vector <VERB>[]</VERB>), 
    it is assumed to be equal to 0 on each node.</P>
    <P>
    This functions uses a relaxation algorithm due to D. Bertsekas.</P>
  </DESCRIPTION>
  <EXAMPLE>
<![CDATA[
ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10 1 8];
he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1 12 14];
g=make_graph('foo',1,15,ta,he);
g.nodes.graphics.x=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548];
g.nodes.graphics.y=[56 221 316 318 316 143 214 321 217 126 215 80 330 437 439];
show_graph(g);

g=add_edge_data(g,'max_cap',[37,24,23,30,25,27,27,24,34,40,21,38,35,23,38,28,26,..
                       22,40,22,28,24,31,25,26,24,23,30,22,24,35]);
g=add_edge_data(g,'cost',[10,6,3,8,10,8,11,1,2,6,5,6,5,3,4,2,4,4,8,2,4,5,4,8,8,3,4,3,7,10,10]);
g=add_node_data(g,'demand',[22,-29,18,-3,-16,20,-9,7,-6,17,21,-6,-8,-37,9]);

[c,phi,flag]=min_lcost_flow2(g);flag

g.edges.graphics.foreground(find(phi<>0))=color('red');
g=add_edge_data(g,'flow',phi)
g.edges.graphics.display='flow';
g.nodes.graphics.display='demand';

show_graph(g);

 ]]>
  </EXAMPLE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM>
      <LINK>min_lcost_cflow</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>min_lcost_flow1</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>min_qcost_flow</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>edges_data_structure</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>add_edge_data</LINK>
    </SEE_ALSO_ITEM>

    <SEE_ALSO_ITEM>
      <LINK>nodes_data_structure</LINK>
    </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM>
      <LINK>add_node_data</LINK>
    </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
