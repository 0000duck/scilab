<?xml version='1.0' encoding='UTF-8'?>
<book version='5.0-subset Scilab' xml:lang='en_US'>
  <info>
    <title>CAPI</title>
  </info>

<reference xml:id='category_capi'>
<title>CAPI</title>

<refentry version='5.0-subset Scilab' xml:id='CreateVar'>
  <refnamediv xml:id='???'>
    <refname>CreateVar</refname>

    <refpurpose>a C interface function which allows to create a new Scilab
    variable</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>CreateVar(StackPos,Type, &amp;m_rows, &amp;n_cols, &amp;l_stack_pos);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>StackPos</term>

        <listitem>
          <para>the rank of the variable to be created (input
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Type</term>

        <listitem>
          <para>the Scilab type of the variable to be created (input
          parameter). Can be (see Scilab C Type for more informations):</para>

          <itemizedlist>
            <listitem>
              <para>STRING_DATATYPE &quot;c&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_STRING_DATATYPE &quot;S&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_DOUBLE_DATATYPE &quot;d&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_RATIONAL_DATATYPE &quot;r&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_VARIABLE_SIZE_INTEGER_DATATYPE &quot;I&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_INTEGER_DATATYPE &quot;i&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_BOOLEAN_DATATYPE &quot;b&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_COMPLEX_DATATYPE &quot;z&quot;</para>
            </listitem>

            <listitem>
              <para>SPARSE_MATRIX_DATATYPE &quot;s&quot;</para>
            </listitem>

            <listitem>
              <para>TYPED_LIST_DATATYPE &quot;t&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_ORIENTED_TYPED_LIST_DATATYPE &quot;m&quot;</para>
            </listitem>

            <listitem>
              <para>SCILAB_POINTER_DATATYPE &quot;p&quot;</para>
            </listitem>

            <listitem>
              <para>GRAPHICAL_HANDLE_DATATYPE &quot;h&quot;</para>
            </listitem>

            <listitem>
              <para>EXTERNAL_DATATYPE &quot;f&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_POLYNOMIAL_DATATYPE &quot;x&quot;</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>m_rows</term>

        <listitem>
          <para>the number of lines of the matrix to be created (input
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>n_cols</term>

        <listitem>
          <para>the number of columns of the matrix to be created (input
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>l_stack_pos</term>

        <listitem>
          <para>the position on the stack of the created variable (output
          parameter)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>A C interface function which allows to create a new Scilab
    variable</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role='example'> 
#include &lt;stack-c.h&gt;

int sci_myones(char * fname)
{
  int m_row, n_col, l_pos;
  
  m_row = 1; n_col = 1; // We create a scalar
  CreateVar(1, MATRIX_OF_INTEGER_DATATYPE, &amp;m_row, &amp;n_col, &amp;l_pos);

  *istk(l_pos) = 1;

  LhsVar(1) = 1;

  return 0;
}
 </programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type='inline'>
      <member><link linkend='ScilabCTypes'>Scilab C Type</link></member>
      <member><link linkend='istk'>istk</link></member>
      <member><link linkend='LhsVar'>LhsVar</link></member>
    </simplelist>
  </refsection>
</refentry>


<refentry version='5.0-subset Scilab' xml:id='GetRhsVar'>
  <refnamediv xml:id='???'>
    <refname>GetRhsVar</refname>

    <refpurpose>a C interface function which allows to access a parameter
    transmitted to a Scilab function</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>GetRhsVar(StackPos,Type, &amp;m_rows, &amp;n_cols, &amp;l_stack_pos);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>StackPos</term>

        <listitem>
          <para>the rank of the variable to be accessed (input
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Type</term>

        <listitem>
          <para>the Scilab type of the variable to be accessed (input
          parameter). Can be (see Scilab C Type for more informations):</para>

          <itemizedlist>
            <listitem>
              <para>STRING_DATATYPE &quot;c&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_STRING_DATATYPE &quot;S&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_DOUBLE_DATATYPE &quot;d&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_RATIONAL_DATATYPE &quot;r&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_VARIABLE_SIZE_INTEGER_DATATYPE &quot;I&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_INTEGER_DATATYPE &quot;i&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_BOOLEAN_DATATYPE &quot;b&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_COMPLEX_DATATYPE &quot;z&quot;</para>
            </listitem>

            <listitem>
              <para>SPARSE_MATRIX_DATATYPE &quot;s&quot;</para>
            </listitem>

            <listitem>
              <para>TYPED_LIST_DATATYPE &quot;t&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_ORIENTED_TYPED_LIST_DATATYPE &quot;m&quot;</para>
            </listitem>

            <listitem>
              <para>SCILAB_POINTER_DATATYPE &quot;p&quot;</para>
            </listitem>

            <listitem>
              <para>GRAPHICAL_HANDLE_DATATYPE &quot;h&quot;</para>
            </listitem>

            <listitem>
              <para>EXTERNAL_DATATYPE &quot;f&quot;</para>
            </listitem>

            <listitem>
              <para>MATRIX_OF_POLYNOMIAL_DATATYPE &quot;x&quot;</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>m_rows</term>

        <listitem>
          <para>the number of lines of the accessed variable (output
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>n_cols</term>

        <listitem>
          <para>the number of columns of the accessed variable (output
          parameter)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>l_stack_pos</term>

        <listitem>
          <para>the position on the stack of the accessed variable (output
          parameter)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>A C interface function which allows to access a parameter
    transmitted to a Scilab function</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <para>In this example, the function has two input parameters:</para>

    <itemizedlist>
      <listitem>
        <para>the number of columns (first parameter)</para>
      </listitem>

      <listitem>
        <para>the number of lines (second parameter)</para>
      </listitem>
    </itemizedlist>

    <para>The goal of this function is to created a matrix of integers equal
    to 1.</para>

    <programlisting role='example'> 
#include &lt;stack-c.h&gt;
#include &lt;string.h&gt;

int sci_myones(char * fname)
{
  int m_param_1, n_param_1, l_param_1;
  int m_param_2, n_param_2, l_param_2;
  int m_out_row, n_out_col, l_out_pos;
  
  GetRhsVar(1, MATRIX_OF_INTEGER_DATATYPE, &amp;m_param_1, &amp;n_param_1, &amp;l_param_1);
  GetRhsVar(2, MATRIX_OF_INTEGER_DATATYPE, &amp;m_param_2, &amp;n_param_2, &amp;l_param_2);

  // We create a matrix of ints equal to 1
  m_out_row = *istk(l_param_1);
  n_out_col = *istk(l_param_2);

  CreateVar(3, MATRIX_OF_INTEGER_DATATYPE, &amp;m_out_row, &amp;n_out_col, &amp;l_out_pos);

  memset(istk(l_out_pos), 1, m_out_row * n_out_col * sizeof(int));

  LhsVar(1) = 3;

  return 0;
}
 </programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type='inline'>
      <member><link linkend='ScilabCTypes'>Scilab C Type</link></member>
      <member><link linkend='istk'>istk</link></member>
      <member><link linkend='LhsVar'>LhsVar</link></member>
    </simplelist>
  </refsection>
</refentry>


<refentry version='5.0-subset Scilab' xml:id='HowToAccessAMatrix_1'>
  <refnamediv xml:id='???'>
    <refname>How to access a matrix</refname>

    <refpurpose>how to access a matrix using the C API</refpurpose>
  </refnamediv>

  <refsection>
    <title>Description</title>

    <para>The goal is to get a matrix of doubles send to a function written in
    C.</para>

    <para>For this, we will wrote a C interface function in which we will
    retrieve the matrix, we will perform some simple steps in this C
    function:</para>

    <itemizedlist>
      <listitem>
        <para>first, we will get an access to the matrix</para>
      </listitem>

      <listitem>
        <para>we will perform some simple operations on the matrix (we will
        multiply by 2 each elements of the matrix)</para>
      </listitem>

      <listitem>
        <para>we will return the result to Scilab</para>
      </listitem>
    </itemizedlist>

    <para>This example is available in the directory CAPI/examples/ex1.</para>
  </refsection>

  <refsection>
    <title>The C function</title>

    <programlisting role='example'> 
#include &lt;stack-c.h&gt;

int sci_multiply_by_two(char * fname)
{
  int m_in_var, n_in_var, l_in_var;
  int m_out_var, n_out_var, l_out_var;
  int i_row, j_col;

  // First, access to the input variable (a matrix of doubles)
  GetRhsVar(1, &quot;d&quot;, &amp;m_in_var, &amp;n_in_var, &amp;l_in_var);

  // Create the returned variable (a matrix of doubles)
  m_out_var = m_in_var;
  n_out_var = n_in_var;
  CreateVar(2, &quot;d&quot;, &amp;m_out_var, &amp;n_out_var, &amp;l_out_var);

  // Perform some simple operations on the matrix
  for(i_row=0; i_row&lt;m_in_var; i_row++)
    {
      for(j_col=0; j_col&lt;n_in_var; j_col++)
        {
          *stk(l_out_var + i_row + j_col * m_out_var) = 2 * (*stk(l_in_var + i_row + j_col * m_in_var));
        }
    }

  // Return the output variable
  LhsVar(1) = 2;

  return 0;
}
  </programlisting>

    <para>This file must be saved as &quot;multiply_by_two.c&quot;.</para>

    <para>The main thing to highlight is that, to build a C interface
    function, we need to include the header stack-c.h. In this header, we find
    the prototypes and macros of the main C interface functions.</para>

    <para>To be able to build and link such a C function to scilab, we need to
    write a Scilab script which will compile this C function and then create a
    loader script which will link the C function to a Scilab function.</para>
  </refsection>

  <refsection>
    <title>The builder script</title>

    <programlisting role='example'> 
// This is the builder.sce 
// must be run from this directory 

lines(0);

ilib_name  = &apos;lib_multiply_by_two&apos;;

files = [&apos;multiply_by_two.c&apos;];

libs  = [];

table =[&apos;multiply_by_two&apos;, &apos;sci_multiply_by_two&apos;];

ldflags = &quot;&quot;;
cflags  = &quot;&quot;;
fflags  = &quot;&quot;;

// do not modify below 
// ----------------------------------------------
ilib_build(ilib_name,table,files,libs,&apos;Makelib&apos;,ldflags,cflags,fflags);
  </programlisting>

    <para>This file must be saved as &quot;builder.sce&quot;.</para>

    <para>This script will tell Scilab which files must be compiled (here,
    it&apos;s multiply_by_two.c), what will be the name of the shared library
    (here, it&apos;s lib_multiply_by_two) and which C symbol will be linked to a
    Scilab function (here, we will link the sci_multiply_by_two C symbol to
    the Scilab function &quot;multiply_by_two&quot;).</para>

    <para>To build this function, we just need to to:</para>

    <programlisting> 
exec builder.sce;
 </programlisting>

    <para>Now we are able to test our new C function. First, let&apos;s load this
    new function in scilab:</para>

    <programlisting> 
exec loader.sce; 
 </programlisting>

    <para>The script loader.sce is normally automatically built by
    builder.sce.</para>
  </refsection>

  <refsection>
    <title>Testing our new function</title>

    <para>We now write a simple example to test our new function.</para>

    <programlisting role='example'> 
A = [1 2 3 4 5; 6 7 8 9 10; 11 12 13 14 15];

B = multiply_by_two(A);

disp(B);
  </programlisting>

    <para>The script must be saved as &quot;test.sce&quot;.</para>

    <para>Let&apos;s run our scripts and see what is the result:</para>

    <programlisting> 
--&gt;exec builder.sce;
   Generate a gateway file
   Generate a loader file
   Generate a Makefile
   ilib_gen_Make: Copy compilation files (Makefile*, libtool...) to TMPDIR
   ilib_gen_Make: Copy multiply_by_two.c to TMPDIR
   ilib_gen_Make: Copy lib_multiply_by_two.c to TMPDIR
   ilib_gen_Make: Modification of the Makefile in TMPDIR.
   Running the makefile
 
--&gt;exec loader.sce;
Shared archive loaded.
Link done.
 
--&gt;exec test.sce;
 
    2.     4.     6.     8.     10.  
    12.    14.    16.    18.    20.  
    22.    24.    26.    28.    30.  
--&gt; 
 </programlisting>

    <para>This simple function has produced a new matrix which corresponds to
    the matrix transmitted as an input parameter and for which each elements
    of the matrix has been multiplied by 2.</para>

    <para></para>
  </refsection>

  <refsection>
    <title>Rebuilding an interface function</title>

    <para>Let&apos;s imagine that our interface function has already been build and
    we would like to make some changes in our function (multiply by 3 instead
    of 2).</para>

    <para>How do we perform such a changes without restarting Scilab ?</para>

    <para>First, we need to list all the dynamic libraries which has been
    loaded into Scilab. The can be done using the link(&apos;show&apos;)
    function:</para>

    <programlisting> 
--&gt;link(&apos;show&apos;)
Number of entry points 1.
Shared libraries :
[ 0 ] : 1 libraries.
Entry point lib_multiply_by_two in shared library 0.
 ans  =
 
    0.  
 </programlisting>

    <para>Here, in our current Scilab session, only 1 dynamic library has been
    loaded. This library has a reference number. For our library, it&apos;s &quot;0&quot;.
    Now that we know the reference number of our library, we are able
    to:</para>

    <itemizedlist>
      <listitem>
        <para>unload this library (using the function ulink(0) - 0 is the
        reference number of our library)</para>
      </listitem>

      <listitem>
        <para>perform some modification in the source code of our C interface
        function (replace multiply by 2 by 3)</para>
      </listitem>

      <listitem>
        <para>rebuild the C interface function (exec builder.sce;)</para>
      </listitem>

      <listitem>
        <para>load the modified C interface function into scilab (exec
        loader.sce;)</para>
      </listitem>
    </itemizedlist>

    <para>This is what is done is the following example:</para>

    <programlisting> 
--&gt;ulink(0)
 
--&gt;exec builder.sce;
   Generate a gateway file
   Generate a loader file
   Generate a Makefile
   ilib_gen_Make: Copy compilation files (Makefile*, libtool...) to TMPDIR
   ilib_gen_Make: Copy multiply_by_two.c to TMPDIR
   ilib_gen_Make: Copy lib_multiply_by_two.c to TMPDIR
   ilib_gen_Make: Modification of the Makefile in TMPDIR.
   Running the makefile
 
--&gt;exec loader.sce;
Shared archive loaded.
Link done.
 
--&gt;exec test.sce;
 
    3.     6.     9.     12.    15.  
    18.    21.    24.    27.    30.  
    33.    36.    39.    42.    45.  
  </programlisting>

    <para></para>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type='inline'>
      <member><link linkend='GetRhsVar'>GetRhsVar</link></member>
      <member><link linkend='ScilabCTypes'>Scilab C Types</link></member>
      <member><link linkend='CreateVar'>CreateVar</link></member>
      <member><link linkend='LhsVar'>LhsVar</link></member>
      <member><link linkend='stk'>stk</link></member>
      <member><link linkend='ilib_build'>ilib_build</link></member>
      <member><link linkend='link'>link</link></member>
      <member><link linkend='ulink'>ulink