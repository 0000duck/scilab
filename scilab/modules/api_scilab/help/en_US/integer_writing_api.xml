<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Antoine ELIAS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="Integer management writing_API"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">

    <refnamediv>
        <refname>Integer writing</refname>

        <refpurpose>
            How to write matrices of integers in a gateway.
        </refpurpose>
    </refnamediv>
    <refsection>
        <title>Description</title>
        <para>This help describes how matrix of integers can be handled through the Scilab API.</para>
        <para>There are 2 types of functions which can be used to write in the memory of Scilab.</para>
    </refsection>
    <refsection>
        <title>Create from existing data</title>
        <synopsis>int createMatrixOfInteger8(int _iVar, int _iRows, int _iCols, char* _pcData8)</synopsis>
        <synopsis>int createMatrixOfInteger16(int _iVar, int _iRows, int _iCols, short* _psData16)</synopsis>
        <synopsis>int createMatrixOfInteger32(int _iVar, int _iRows, int _iCols, int* _piData32)</synopsis>
    </refsection>
    <refsection>
        <title>Parameters</title>

        <variablelist>
            <varlistentry>
                <term>_iVar</term>
                <listitem>
                    <para>
                        Position in the Scilab memory where you want to put the variable
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>_iRows</term>
                <listitem>
                    <para>
                        Number of rows of the new variable
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>_iCols</term>
                <listitem>
                    <para>
                        Numbers of columns of the new variable
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_pcData8, _psData16, _piData32</term>
                <listitem>
                    <para>
                        Address of data array (size: _iCols * _iRows)
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Write directly in Scilab memory</title>
        <synopsis>int allocMatrixOfInteger8(int _iVar, int _iRows, int _iCols, char** _pcData8)</synopsis>
        <synopsis>int allocMatrixOfInteger16(int _iVar, int _iRows, int _iCols, short** _psData16)</synopsis>
        <synopsis>int allocMatrixOfInteger32(int _iVar, int _iRows, int _iCols, int** _piData32)</synopsis>
    </refsection>
    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>_iVar</term>
                <listitem>
                    <para>
                        Position in the Scilab memory where you want to put the variable
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_iRows</term>
                <listitem>
                    <para>
                        Number of rows of the new variable
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_iCols</term>
                <listitem>
                    <para>
                        Numbers of columns of the new variable
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_pcData8, _psData16, _piData32</term>
                <listitem>
                    <para>
                        Returns address of data array (size: _iCols * _iRows)
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <!--File_gateway: SCI/modules/core/tests/unit_tests/integer_writing_api.c-->
        <!--File_scilab: SCI/modules/core/tests/unit_tests/integer_writing_api.tst-->
        <!--Lib_name: integer_writing-->
        <!--Func_list: write_integer-->
        <title>Gateway Source</title>
        <programlisting role="code_gateway">
            <![CDATA[
int write_integer(char *fname,unsigned long fname_len)
{
    int i;
    int iRet            = 0;

    //output variable info
    int iRows           = 3;
    int iCols           = 5;

    //[1            2           3           4           5
    // 1000         2000        3000        4000        5000
    // 1000000      2000000     3000000     4000000     5000000]
    int piRef[]         = {1, 1000, 1000000, 2, 2000, 2000000, 3, 3000, 3000000, 4, 4000, 4000000, 5, 5000, 5000000};

    char*   pcData      = NULL;
    short* psData       = NULL;
    int* piData         = NULL;

    //check ouput arguments
    CheckLhs(6,6)

    iRet = allocMatrixOfInteger8(   Rhs + 1, iRows, iCols, &pcData);
    if(iRet)
    {
        return 1;
    }

    iRet = allocMatrixOfInteger16(  Rhs + 2, iRows, iCols, &psData);
    if(iRet)
    {
        return 1;
    }

    iRet = allocMatrixOfInteger32(  Rhs + 3, iRows, iCols, &piData);
    if(iRet)
    {
        return 1;
    }

    //fill new variables
    for(i = 0 ; i < iRows * iCols ; i++)
    {
        //some values are greater than type can accept, in this case value are truncated
        pcData[i] = (char)  piRef[i];
        psData[i] = (short) piRef[i];
        piData[i] = (int)   piRef[i];
    }

    //use same pointer ( pcData, psData, piData ) to create other variable.
    iRet = createMatrixOfInteger8(  Rhs + 4, iRows, iCols, pcData);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfInteger16( Rhs + 5, iRows, iCols, psData);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfInteger32( Rhs + 6, iRows, iCols, piData);
    if(iRet)
    {
        return 1;
    }

    //assign allocated variables to Lhs position
    LhsVar(1) = Rhs + 1;
    LhsVar(2) = Rhs + 2;
    LhsVar(3) = Rhs + 3;
    LhsVar(4) = Rhs + 4;
    LhsVar(5) = Rhs + 5;
    LhsVar(6) = Rhs + 6;
    return 0;
}
        ]]>
        </programlisting>
    </refsection>

    <refsection>
        <title>Scilab test script</title>
        <programlisting role="code_scilab">
            <![CDATA[
ref8 =  int8 ([ 1           2           3           4           5; ..
                -24         -48         -72         -96         -120; ..
                64          -128        -64         0           64]);
            
ref16 = int16([ 1           2           3           4           5; ..
                1000        2000        3000        4000        5000; ..
                16960       -31616      -14656      2304        19264];
            
ref32 = int32([ 1           2           3           4           5; ..
                1000        2000        3000        4000        5000; .. 
                1000000     2000000     3000000     4000000     5000000];

[a8,a16,a32,c8,c16,c32] = write_integer();
if or(a8 <> ref8) | or(c8 <> ref8) then error("failed"), end
if or(a16 <> ref16) | or(c16 <> ref16) then error("failed"), end
if or(a32 <> ref32) | or(c32 <> ref32) then error("failed"), end
            ]]>
        </programlisting>
    </refsection>
</refentry>