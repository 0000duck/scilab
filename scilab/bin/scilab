#!/bin/sh
# Warning : some old versions of sh dont allow inline function definitions
# like do_scilex()... . In this case use a system V sh (sh5)

# Copyright INRIA
# Updated : Sylvestre Ledru 2006

#############################################################################
#                                                                           #
#                       DO NOT MODIFY BELOW THIS LINE                       #
#                                                                           #
#############################################################################

####
#
# Scilab can be installed/used in different ways :
# * ./configure; make install
#    => will install Scilab into /usr/local/ and split files to 
#    /usr/local/bin, /usr/local/share/scilab/, /usr/local/lib/scilab/,
#    /usr/local/include/scilab/
# * ./configure --prefix=/my/dir/; make install
#    => will install Scilab into /usr/local/ and split files to 
#    /my/dir/bin/, /my/dir/share/scilab/, /my/dir/lib/scilab/
#    /my/dir/include/scilab/
# * ./configure; make install prefix=$(DESTDIR)/usr \
#				   bindir=$(DESTDIR)/usr/bin \
#				   datadir=$(DESTDIR)/usr/share/scilab ...
#    Solution used mainly by Linux packagers
#
## First, this script will look for scilab-bin in :
# * If specified, in the $SCI variable
# * Into the scilab/bin/ directory
# * Into the scilab/ directory (if the user is using a source version and 
# scilab has been compiled in this directory)
# * if this file is a simlink to the real one. We browse symlink(s) until we
# find the real "scilab" script file and consider that it is the right 
# directory
# * That is all. Don't hesitate to contact us if you see one missing.
#
###

if test -n "$SCI"; then
	if test ! -d $SCI/modules; then
		echo "Cannot find directory $SCI/modules/ !"
		echo "SCI should point to the root data directory of Scilab"
		exit -1
	fi
fi


OLDPWD=`pwd`

# Use scilab-bin in the current dir if it exists
# If not, then start resolving symlinks until we find scilab-bin
found=0
progname="$0"
curdir=`dirname "$progname"`

progbase=`basename "$progname"`
run_sci="$curdir/scilab-bin"
if test -x "$run_sci"; then # scilab-bin is in the /bin/ directory
	cd "$curdir/../"
	SCI=`pwd`
	SCIBIN=$run_sci
	found=1
else
	run_sci="$curdir/../scilab-bin"
	if test -x "$run_sci"; then # scilab-bin is in the / directory 
		# which is the case in a dev env
		cd "$curdir/../"
		SCI=`pwd`
		SCIBIN=$run_sci
		found=1
	else
		here=`/bin/pwd`
		while test -h "$progname"; do
			bn=`basename "$progname"`
			cd `dirname "$progname"`
			progname=`/bin/ls -l "$bn" | sed -e 's/^.* -> //' `
			if test ! -x "$progname"; then
				break
			fi
			curdir=`dirname "$progname"`
			run_sci="$curdir/bin/scilab-bin"
			if test -x "$run_sci"; then
				cd "$curdir"
				SCI=`pwd`
				SCIBIN=$run_sci
				found=1
				break
			fi
		done
		cd "$here"
	fi
	echo "I think I found Scilab here : $SCI"
fi


if test -x $SCI/bin/scilab-bin; then
	SCILABBIN=$SCI/bin/scilab-bin
	SCI=$SCI/share/scilab/
else
	if test -x $SCI/scilab-bin; then
		# dev env
		SCILABBIN=$SCI/scilab-bin
		DEVENV=1
	else
		echo "Cannot not find scilab-bin ..."
		exit 1
	fi
fi
# should be removed
export SCI

############# JAVA DETECTION ##############
# Basic inspiration from Eclipse 
#
# Scilab is looking for Java in various places with different ways :
# * if JAVA_HOME is specificed, use it
# * Check in 'standard' places we know Java could be installed
# if some are missing, please contact us
# * look in the PATH if there is a java binary
# if it is the case, resolve the symlink and set the JAVA_HOME from it
#
# Once we have JAVA_HOME, we check that native libraries (libjava.so and 
# 2 others) are available
###

# If the user has the variable JAVA_HOME in the ENV
if test -n "$JAVA_HOME" ; then
    echo "Using specified vm: $JAVA_HOME"
    if [ ! -x "$JAVA_HOME/bin/java" ]; then
		echo "Cannot find $JAVA_HOME/bin/java"
        exit 1
    fi
fi

# Browse "default directory" (if it means anything under Unix/Linux) of Java
# to find where it could be !
if test -z "$JAVA_HOME"; then
	JAVA_DEFAULT_DIR="/usr/lib/jvm/java-1.6.0-sun/ /usr/lib/j2se/1.6 /usr/java/jdk1.6.0*/ /usr/java/jdk1.5.0*/ /usr/lib/j2sdk1.6-ibm /usr/lib/jvm/java-1.5.0-sun /usr/lib/j2se/1.5 /usr/lib/j2se/1.4 /usr/lib/j2sdk1.5-ibm /usr/lib/j2sdk1.4-ibm /usr/lib/j2sdk1.5-sun /usr/lib/j2sdk1.4-sun /usr/lib/jvm/java-gcj /usr/lib/kaffe/pthreads"
    for JAVA_HOME in $JAVA_DEFAULT_DIR ; do
		echo -n "Trying to find Java in $JAVA_HOME "
		if [ -x "${JAVA_HOME}/bin/java" ]; then
            export JAVA_HOME
            echo "found"
            break
        else
            echo "not found"
        fi
	done
fi

# JAVA_HOME still haven't been found. Well, we can now try to find it in the path

if test -z "$JAVA_HOME"; then
    PATH_SEPARATOR=:
	as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
	echo "Look the binary java in the PATH. If it is a symlink, try to resolve it"
	for DIR in $PATH; do
		if test -f $DIR/java; then

			_cur=$DIR/java
			# resolve symlink
			while ls -ld "$_cur" 2>/dev/null | grep " -> " >/dev/null; do
				_cur=`ls -ld "$_cur" | sed 's/.* -> //'`
			done
			# symlink resolved to the real file
			
			# Now, create JAVA_HOME
			TMP=`dirname $_cur`
			JAVA_HOME=`dirname $TMP`
			if test ! -z "$JAVA_HOME"; then
				break;
			fi
		fi
	done
	IFS=$as_save_IFS
fi
if test ! -z "$JAVA_HOME"; then
	echo "JAVA_HOME : $JAVA_HOME"

# Manage JRE & JDK because libjava.so and others are stored in the JRE 
	if test -d $JAVA_HOME/jre; then
		JRE_HOME=$JAVA_HOME/jre
	else
		JRE_HOME=$JAVA_HOME
	fi

# Configuring LD_LIBRARY_PATH for libjava.so libhpi.so and libxxxx.so

# Get the proc name matching to the one of the JVM
	case "`uname -m`" in
		i[3-6]86  | ia32 | ia64 | i?86)
        proc=i386
        ;;
		sparc*)
			proc=sparc
			;;
		*)
			proc="`uname -m`"
			;;
	esac

# Check if the lib exists or not (we should manage system where .so is not the 
# ext for library
	LIBJAVA="$JRE_HOME/lib/$proc/libjava.so"
	if test ! -f $LIBJAVA; then
		echo "Cannot find $LIBJAVA"
	else
		export LD_LIBRARY_PATH=$JRE_HOME/lib/$proc/:$JRE_HOME/lib/$proc/server/:$JRE_HOME/lib/$proc/native_threads/:$LD_LIBRARY_PATH
	fi
else
	echo "Have not been able to find any Java VM on this computer. Scilab maybe not be working"
fi
	
####### END OF JAVA ENV DETECTION/SETTING ######


echo "SCI : $SCI"
echo "SCIBIN : $SCIBIN"
echo "SCIDATA : $SCIDATA"
cd $OLDPWD
if test "$DISPLAY" = ""; then
  DISPLAY="unix:0.0"
fi
export DISPLAY

#if test "$PVM_ROOT" = ""; then
#  PVM_ROOT="@PVMROOTR@"
#fi
#export PVM_ROOT

#if test "$PVM_ARCH" = ""; then
#  PVM_ARCH=`$PVM_ROOT/lib/pvmgetarch`
#fi
#export PVM_ARCH

if test "$LD_LIBRARY_PATH" = ""; then
	LD_LIBRARY_PATH=$SCI/bin:$SCI/lib/scilab/
else
	LD_LIBRARY_PATH=$SCI/bin:$SCI/lib/scilab/:$LD_LIBRARY_PATH
fi
export LD_LIBRARY_PATH

#TCL_LIBRARY

#TK_LIBRARY

do_scilex()
{
    PATH=$PATH:$SCI:$SCI/util
    export PATH

    XAPPLRESDIR=$SCI/X11_defaults
    export XAPPLRESDIR

#    tty -s && stty kill '^U' intr '^C' erase '^H' quit '^\' eof '^D' susp '^Z'
    $SCILABBIN $* 
}

do_scilex_now()
{
    PATH=$PATH:$SCI:$SCI/util
    export PATH

    XAPPLRESDIR=$SCI/X11_defaults
    export XAPPLRESDIR

    $SCILABBIN $* 
}

do_help()
{
echo "Usage:"
echo     "scilab <options>"
echo     " "
echo     "      Possible options are:"
echo     "      -args Arguments : passes Arguments to Scilab, This Arguments can be retreived"
echo     "                        by the Scilab function sciargs."
echo     "      -display Display: for use under Xwindow systems to set a specific X server display."
echo     "      -d Display      : equivalent to display Display."
echo     "      -debug          : Start Scilab under gdb (Unix/linux only)."
echo     "      -e Instruction  : execute the scilab instruction given in Instruction argument."
echo     "                        -e and -f options are mutually exclusive."
echo     "      -f File         : execute the scilab script given in File argument."
echo     "                        -e and -f options are mutually exclusive."
echo     "      -l Lang         : set the current language. Lang can be equal to fr or en."
echo     "      -link <objects> : Is used under Unix/linux to produce a local executable code of Scilab"
echo     "                        linked with the additional files given by the user in  <objects>."
echo     "                        the -link option should be used without any other option."
echo     "      -mem N          : set the initial stacksize, for use with -ns option."
echo     "      -nb             : do not display the Scilab banner at starting time."
echo     "      -ns             : do not execute scilab.start startup file."
echo     "      -nouserstartup  : do not execute the user startup files SCIHOME/.scilab or SCIHOME/scilab.ini."
echo     "      -nw             : start Scilab without specialized Scilab Window."
echo     "      -nwni           : start Scilab without user interaction (batch mode)."
echo     "      -nogui          : start Scilab without user GUI (batch mode)."
echo     "      -version        : print product version and exit."
echo     "      --texmacs       : reserved for TeXMacs."
exit
}

do_compile()
{
	umask 002
	rm -f report
	name=`basename $1 .sci`
	echo generating $name.bin
	echo "predef();getf('$name.sci');save('$name.bin');quit"\
	      | $SCILABBIN -ns -nw | sed 1,8d 1>report 2>&1
	if (grep error report 1> /dev/null  2>&1);
	then cat report;echo " " 
	   echo see `pwd`/report for more informations
	   grep libok report>/dev/null; 
	else rm -f report;
	fi
	umask 022
	exit 0
}

do_lib()
{
	umask 002
	rm -f report
	echo "$1=lib('$2/');save('$2/lib',$1);quit"\
	      | $SCILABBIN -ns -nw |sed 1,/--\>/d 1>report 2>&1
	if (grep error report 1> /dev/null  2>&1);
	then cat report;echo " " 
		echo see `pwd`/report for more informations
		grep libok report>/dev/null; 
	else rm -f report;
	fi
	umask 022
	exit 0
}


do_print() 
{
	$SCI/bin/BEpsf $1 $2 
	lpr -P$3 $2.eps
	rm -f $2 $2.eps
}

do_save() 
{
	case $3 in 
           Postscript)
		
                wantedName=$2.eps #add a .eps because BEpsf will do it wrong
                mv $2 $wantedName
                
                $SCI/bin/BEpsf $1 $wantedName
                rm -f $wantedName.temp 1> /dev/null  2>&1
                ;;
          Postscript-Latex)

                wantedEpsName=$2.eps
                newEps=`echo $2 | cut -d . -f1`.eps
                # move the file in case BEpsf will destroy it
                mv $newEps $newEps.scilab.temp 1> /dev/null  2>&1

                wantedTexName=$2.tex
                newTex=`echo $2 | cut -d . -f1`.tex # get the name created by Blatexpr
                # move the file in case BEpsf will destroy it
                mv $newTex $newTex.scilab.temp 1> /dev/null  2>&1

		$SCI/bin/Blatexpr $1 1.0 1.0 $2
                
                if test $newEps != $wantedEpsName ; then
                        mv $newEps $wantedEpsName
                        mv $newEps.scilab.temp $newEps 1> /dev/null  2>&1 #move the temp file back
                fi

                
                if test $newTex != $wantedTexName ; then
                        mv $newTex $wantedTexName
                        mv $newTex.scilab.temp $newTex 1> /dev/null  2>&1 #move the temp file back
                fi
	   	;;
	  Xfig)
		case $1 in
		-portrait)
			mv $2 $2.fig
		;;
		-landscape)
			sed -e "2s/Portrait/Landscape/" $2 >$2.fig
			rm -f $2
		;;
		esac
           	;;
          Gif)
		case $1 in
		-portrait)
			mv $2 $2.gif
		;;
		-landscape)
			mv $2 $2.gif
		;;
		esac
           	;;
	   PPM)
		case $1 in
		-portrait)
			mv $2 $2.ppm
		;;
		-landscape)
			mv $2 $2.ppm
		;;
		esac
           	;;
	esac
}

# calling Scilab with no argument or special cases of calling Scilab
rest="no"
case $# in
    0)
	do_scilex &
        ;;
    2)
        case $1 in
            -comp)
		do_compile $2
                ;;
            -link)
                shift
		$SCI/bin/scilink $SCI $*
                ;;
            -function)
		$SCI/bin/minfopr $SCI $2
		;;
            *)
		rest="yes"
                ;;
        esac
        ;;
    3)
        case $1 in
            -lib)
		do_lib $2 $3
                ;;
            -print_l)
                do_print -landscape $2 $3
                ;;
            -print_p)
                do_print -portrait $2 $3
                ;;
            -save_l)
                do_save -landscape $2 $3
                ;;
            -save_p)
                do_save -portrait $2 $3
                ;;
            -link)
                shift
		$SCI/bin/scilink $SCI $*
                ;;
            *)
		rest="yes"
                ;;
        esac
        ;;
    *)
        case $1 in
            -link)
                shift
		$SCI/bin/scilink $SCI $*
                ;;
            *)
		rest="yes"
                ;;
        esac
        ;;
esac

# really calling Scilab with arguments

sci_args=

if test "$rest" = "yes"; then

  debug=
  now=
  display=
  start_file=
  prevarg=
  language=
  fontname=
  for sciarg 
  do
    # If the previous argument needs an argument, assign it.
    if test -n "$prevarg"; then
      eval "$prevarg=\$sciarg"
      prevarg=
      continue
    fi
    case $sciarg in
      -nogui)
	  sci_args="$sci_args -nogui"
          ;;
      -version)
	  sci_args="$sci_args -version"
          ;;
      -ns)
	  sci_args="$sci_args -ns"
          ;;
      -nb)
	  sci_args="$sci_args -nb"
          ;;
      -debug) 
          DEBUG="-debug"
          ;;
      -nw)
          now="-nw"
	  sci_args="$sci_args -nw"
          ;;
      --texmacs)
          now="-nwni"
          sci_args="$sci_args -nwni --texmacs"
          ;;
      -nwni)
          now="-nwni"
	  sci_args="$sci_args -nwni"
          ;;
      -display|-d)
          prevarg="display"
          ;;
       -f)
          prevarg="start_file"
          ;;
       -l)
          prevarg="language"
          ;;
       -e)
          prevarg="start_exp"
          ;;
       -args)
           prevarg="arguments"
          ;;
       -mem)
           prevarg="mem"
          ;;
		-nouserstartup)
			;;
      *)
          do_help
          ;;
    esac
  done

  if test -n "$display"; then
    sci_args="$sci_args -display $display"
  fi

  if test -n "$start_file"; then
    sci_args="$sci_args -f $start_file"
  fi

  if test -n "$start_exp"; then
    sci_args="$sci_args -e $start_exp"
  fi

  if test -n "$language"; then
    sci_args="$sci_args -l $language"
  fi

  if test -n "$arguments"; then
    sci_args="$sci_args  $arguments"
  fi
  if test -n "$mem"; then
    sci_args="$sci_args -mem  $mem"
  fi
  if test -n "$DEBUG"; then
	  if test -n "$DEVENV"; then
		  echo "Running debug of Scilab  : " $SCI/libtool --mode=execute gdb $SCILABBIN $sci_args
		  $SCI/libtool --mode=execute gdb $SCILABBIN $sci_args
	  else
		  echo "Running debug of Scilab  : " gdb $SCILABBIN $sci_args
		  gdb $SCILABBIN $sci_args
	  fi
  else
    if test -n "$now"; then
        sci_exe="do_scilex_now"
        $sci_exe $sci_args
    else
        sci_exe="do_scilex"
        $sci_exe $sci_args 
    fi
  fi
fi

