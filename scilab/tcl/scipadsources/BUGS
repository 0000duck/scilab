SCIPAD BUGS AND WISHES LIST

Bugs:
-----
-colorization:
 . the regexp for the new class "numbers" is not perfect, e123 or d1 are
   caught as number
 . multiple matrix transposes in the same line are colorized as textquoted, 
   e.g. A=A'+B'
 . line-breaks (..) are not handled for quoted strings colorization

-issues related with non colorizing single quoted text:
  . code lines such as mprintf("%s",'this is a function') brakes the line
    number counting in functions if not properly colorized as textquoted.
  . mprintf('['); is detected as a continued line, and this results in
    wrong line number in function displayed in statusind2

-Ctrl-v copies also inside the find/replace/filename dialogs, but does not
 replace an existing selection. Problem of setting up the proper bindings,
 likely. Note: this happens only on some platforms (Windows is OK).

-Line number finding in functions may provide wrong results in some pathological
 cases of continued lines, namely:
 . "Mixed" continued lines, i.e. a single cont line splitted in many buffer lines,
   some of them containing dots and some other not.
     Example:
        a1={4 ; 5 ;...
            7
            6};..
            disp(a1)
     More tricky example:
        a1=[1;...
            6]
        a2=[ 6; //note that the comment here is legal
             7
            61
             8]
        Line numbers when moving the cursor in a1 are correct.
        But line numbers when moving the cursor in a2 are not correct.
        This is a case of mixed continued lines: some with dots some without,
        in the same file but in different variable declarations
 . Nested brackets or braces in continued lines.
     Example:
        a=[[1,2];
          [3,4]]

-In the debugger, trying to F10 with something like:
    function ...
                    function_name
        instruction
        instruction
    enfunction
 fails. This is due to a bug in tcl/tk itself and will be solved in 8.5
 See: http://www.cs.man.ac.uk/fellowsd-bin/TIP/113.html
 For the time being, the keyword "function" and the function name MUST be
 on the same code line.

-Some shortcuts may not work on certain platforms. E.g. Control-F1 does not on
 at least one Mandrake 10.1 Official Linux. Was also found on a RH8 machine.

-Ctrl-F1 on some characters like " ' - or + does not work (different errors in
 the shell. Problem is partly in sciGUI, and partly in Scipad.

-On Windows, trying to save a file in C:\Documents and Settings\<account>\My Documents
 usually produces a read-only warning and prevents the user from saving there.
 This is Tcl bug 1193497.

-On Windows, opening files and then closing one of them makes the remaining
 ones unselectable in the windows menu. This is Tk bug 1224330.

-When two buffers are opened containing the same function (or function name) to
 debug, then the wrong buffer may be opened to show the active breakpoint

-When nested functions are used with comments, a breakpoint can be set on a
 line just after an endfunction but execution will not stop at this point.
 Workaround: insert an empty line between the line containing endfunction
 and the next breakpointed line - This is Scilab bug 1469 (outside of Scipad)

-On Linux (not on Windows), clicking [x] during a long drop of files (dnd
 of a directory) makes Scilab crash - it might be a dnd bug


Old bugs/whishes which have been hacked but could have been done better:
------------------------------------------------------------------------

- (the text cursor disappears every now and then while moving it around 
  with the arrows, known bug #865 of the linux scilab-tcl combination)
  -- now hacked:  the cursor is always on and red but does not blink,
    for linux (normal blinking for windows).

-the window geometry is now managed in pixels. This is fine for restoring
 exactly the same window geometry as in the previous session, but loses
 some advantages of the previously broken grid management, such as resize
 of the window upon font size changes.

-2nd-button now succeds in importing an X external selection into scipad
 under linux. With one remaining glitch, the insertion cursor zomps back
 to the beginning of the insertion at the end of the process.
 Under windows 2nd-button is ineffective if the selection is external, 
 but has the side effect (with some glitches) to drop at the mouse point the
 selection it is within scipad


Wishes:
-------

-the debugger works well for functions but shell scripts are not supported yet.
 Step by step execution remains to be implemented, but this requires Scilab
 core support.

-default fonts modifiable within the program
 See TIP 213 for a possible implementation (new tk_chooseFont command
 possibly available in Tk 8.5)

-parentheses and brackets get colorized in colors according to their level
 of nesting

-unmatched parentheses are highlighted (e.g. stroke-tru) like in Matlab's 
 editor

-colorization supports different sets of keywords: e.g. for scopes,
 % constants, hardcoded functions, distribution macros, toolbox additions;
 dynamical colorization (the current loaded functions, defined global 
 variables are highlighted properly -
 the list could be read either at scipad startup or resfreshed on
 demand) [now partially implemented for dynamical predefs and library 
 functions]

-highlighting of for--end, while--end, select--end blocks while
 typing, like for parentheses; scope background remains highlighted in a
 background tint (choose a suitable scheme for nested structures), OR,
 block keywords are highlighted in different colors than standard keywords.

-a taylored 3rd-button popup menu (currently it is just the edit menu) - i.e.
 it includes execute selection, comment/uncomment this line, insert/delete
 breakpoints
 Note: a first step to this has been implemented. During a debug session, 
 the popup menu is a debug menu.

-smart indentation (i.e., for automatically indents the next line, end
 automatically indents back, etc)
 Note: proc scipadindent should be removed, since scipad now uses physical
 indentation
 
-"auto smart wrap on": lines exceeding a margin could be truncated at
 word boundaries with .. dots and \n
 
-(customizable?) tool bar
 Note: a first step to this has been implemented in the debugger watch window.
 
-Conditional breakpoints

-make use of the vector argument for setbpt and delbpt to shorten the
 ScilabEval command - this is less needed since long ScilabEvals can
 now be evaluated without errors

-Allow to watch a generic expression (bonus: the expression could be e.g.
 a graphical command, so that an array is *plotted* at each breakpoint)
 Way to go: add a pane with expressions to be executed and result of their
 evaluation displayed in the watch window area (e.g. size(a_matrix,"*"))

-Improve the aesthetics of Scipad (see sciGUI)

-Blink (single or double) quotes. Must find a way to distinguish between 
 opening and closing quotes in proc blinkbrace. This is not that easy since
 these are the same character, therefore the direction to search is difficult
 to determine. Note that there is currently an old proc insquote that is
 never called and could be removed from the Scipad source

-'Matlab' colorization scheme for .m files

-Scipad defines and uses, mostly for the debugger, some variables in order to
 send values to Scipad. All these variables currently start with the prefix 
 db_, in order to reduce the risk of the use of such variable names in Scilab
 for another purpose, e.g. in the function to be debugged. We could use more
 sophisticated things to be absolutely sure that the variable names 
 instantiated by Scipad in not used in Scilab, so that conflicts would 
 always be avoided. For instance, browsing the existing known
 variables and checking for existence, etc. could be used.

-Make printing from Scipad work on Linux and implement it for Windows.
 Try to preserve the colorization in the process.
 Possible references for implementation on a Windows box are:
 http://wiki.tcl.tk/11319
 http://wiki.tcl.tk/9846
 http://pages.infinit.net/cclients/files/tkprint1.1.html
 http://wiki.tcl.tk/2497
 http://aspn.activestate.com/ASPN/Cookbook/Tcl/Recipe/284848
 Tk request 734625 (Output the contents of a text widget to a (PostScript) file)
 Tk request 220817 (Direct Print Support for all widgets)
 http://www.du.edu/~mschwart/tclextensions.html (printer extension)
 http://www.nyx.net/~mschwart/ (printer extension)

-Highlight wrapped lines so that they can be more easily identified.
 Could make use of indentation or other suitable scheme TBD, or add
 some sort of left grey band in which some more information could be
 put (breakpoint pink dot, yellow arrow to show the next instruction
 to be executed like in Visual C++ or Matlab, or wrapped lines sign).

-Block selection, copy/paste, move with dnd, indent/unindent, comment
 and uncomment. See last snaphot in http://www.winedt.com/ for an
 example. Add an option to toggle between line mode (current mode) and
 block mode. In block mode, word wrapping should be disabled. This is
 part of request 179.

-Colorization progressbar. Could be an overlay on the left status area,
 incrementing over the "Wait seconds for loading..." message.

-Add underlined numbers in the Windows menu, as for the File menu.

-The find/replace entries in the dialog could be comboboxes retaining
 the strings previously searched or replaced

-Add an eventual "revert to defaults button" (colors option menu)

-Carefully study whether the debugger would benefit from using editvar
 or browsevar for the watch window variables. Drawbacks:
   . sciGUI is not localized
   . lists cannot be used yet with editvar

-Avoid to destroy and recreate the whole watch window when hiding/displaying
 one of its sub-areas. Would probably require -hide option for panedwindow,
 but this one is only available from Tk 8.5 (TIP #179)

-Make use of the native Tk Find/Replace dialog available from 8.5

-Currently any character typed in the buffer is inserted if there is
 no selection. Add a mode toggled by the Ins key in which characters
 would replace the existing ones. Add a visual indicator of this state.
 Note: this should be manageable in Tk8.4 using a combination of a delete
 and an insert (or perhaps selecting the next character and then puttext)
 but there will be a new text widget subcommand .text replace in Tk 8.5
 that will do it at once and manage the undo/redo stacks at the same time.
 See TIP #155 for details: http://www.cs.man.ac.uk/fellowsd-bin/TIP/155.html

-paned window to allow for viewing two different parts of the text buffer at
 the same time. Would be nice if the output of .text -dump could be feeded
 into another text widget, but it's not currently the case.
 Another (better) approach would be peer text widget as described in TIP #169:
 http://www.tcl.tk/cgi-bin/tct/tip/169.html (this will be available in Tk 8.5)

-paned window with mixed orientations, e.g. a top H pane plus a bottom H pane
 which is itself divided into two V panes

-*maybe* a global undo stack instead of one per buffer
 advantages: can undo at once a dnd from one pane to another one
 drawbacks : big big implementation work...

-currently either only one buffer is seen (maximized), or *all* the buffers
 are seen (tiled). Add the possibility of displaying only some of the opened
 buffers in tile mode.
 If possible, implement the emacs logic: the split command creates a new
 subsplit (a new H or V pane in addition to the current ones); choosing
 which buffer from menu (or in another two dozen other possible ways) you
 display that buffer in the active pane. You switch pane clicking with
 the mouse as if to focus it. Opening a new file displays it in the
 current active pane without creating a new one. Closing the buffer
 leaves what was "under" in some sense: the buffer which was previously
 visible there, or the scratchbuffer, the *message* buffer, or the
 minibuffer, if no other buffer is available. 
 F6/F7 should not ignore hidden buffers but display the next/previous
 buffer of the full list in the current active pane
 Find/Replace in opened buffers should search in all the opened buffers,
 visible or not that they are. The question is, "from the first buffer
 of the list" or "from the current buffer"? Wraparound?

-implement a way to let the user choose which buffer is piled on top of the
 panedwindow and which one is at the bottom. Use the selected one for the
 topmost pane?

-minimal Scipad wm size: Probably it would be wise to make the minimum
 dependent on the number of tiles, so that all the features (menu, title,
 textbuffer, scrollbars, remain visible) - take fontsize into account
 warning: updating minsize on file open or dnd could lead to a very large
 window

-Find/Replace: extend the functionality with a checkbox: "Search in all the
 opened buffers" (disabled when there is only one - think also about the case
 when the buffers are maximized: should switch buffers or should the checkbox
 be disabled?) - warning: search in all opened + in selection
