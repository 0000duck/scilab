/*
a = 1;
b = 1.1;
c = 1.11;
d = 1.111;
e = 1.1111;
f = 1.11111;
g = 1.111111;
h = 1.1111111;
i = 1.11111111;
j = 1.111111111;
k = 1.1111111111;
l = 1.11111111111;
m = 1.111111111111;
n = 1.1111111111111;
o = 1.11111111111111;
p = 1.111111111111111;
q = 1.1111111111111111;
r = 1.11111111111111111;
s = 1.111111111111111111;
t = 1.1111111111111111111;
u = 1.11111111111111111111;
v = 1.111111111111111111111;
w = 1.1111111111111111111111;
x = 1.11111111111111111111111;
y = 112345678.9012345678901234;

z =[-a,f,k,p,u;b,-g,l,q,v;c,h,-m,r,w;d,i,n,-s,x;e,j,o,t,-y]


zz = [a+y*%i,-f+t*%i,k+o*%i,-p+j*%i,u+e*%i;
-b+x*%i,g+s*%i,-l+n*%i,q+i*%i,-v+d*%i;
c+w*%i,-h+r*%i,m+m*%i,-r+h*%i,w+c*%i;
-d+v*%i,i+q*%i,-n+l*%i,s+g*%i,-x+b*%i;
e+u*%i,-j+p*%i,o+k*%i,-t+f*%i,y+a*%i]



//Insertion
//SeeAsVector
a = [1,2,3;4,5,6];
a(4) = 8
a(10) = 12 //error

//matrix insertion
a = [];
a([1,2],[3,4]) = 6 //creation
a([1,2],[2,3]) = 5 //insertion
a([1,2],[4,5]) = 7 //agrandissement

b = [];
b([1,2],[3,4]) = [1 2;3 4] //creation
b([1,2],[2,3]) = [4,3;2,1] //insertion
b([1,2],[4,5]) = [5 6;7 8] //agrandissement

//Extraction
a = [1,2,3;4,5,6;7,8,9];

//SeeAsVector
a(1)
a(6:-1:1)
a(1:6)
a(1:$)

//Matrix
a(2,3)
a($,$)
a([1,2],3)
a([1,3],$)
a([1,3],[1:$])
a([1:$],[1:$])
a([$:-2:1],[$:-3:1])

//TEST ONLY
a = [1,2,3;4,5,6;7,8,9];
a([$:-2:1],[$:-3:1])

a = 1;
b = 0;
c = 0;
if(a) then
	b = 1;
else
	b = 2;
end

a = %f;
if(a) then
	c = 1;
else
	c = 2;
end
a,b,c

a = 3;
b = 0;
while(a)
b = b + 1;
a = a - 1;
end
a,b
*/
/*
a = 1;
a = @a;
b = 0;
b = @b;
c = [0,1];
c = @c;
d = [0;1];
d = @d;
e = [0,1;2,3];

e = @e;
a,b,c,d,e


a = [1,2,3;4,5,6]
a = (a + (-a) * %i)'

a = (2 + %i) * %s
b = 3 * %s
c = $ + $

b = 2;
a = [1,2,3,4];
while(b > 0)
a(1:c) = b;
b = b - 1;
end

//b($) = 8

a = [1,2,3;4,5,6];
a([1:$],[1:$]) = 1:6;


a1 = [1,2,3;4,5,6;7,8,9];
a2 = [%i,2*%i,3*%i;4*%i,5*%i,6*%i;7*%i,8*%i,9*%i];
c = a1 * a1;
d = a1 * a2;
e = a2 * a1;
f = a2 * a2;

a = 2*%s;
b = 2 * [(%s + 2*%i),(%s - 2*%i)];
c = (2 - 4*%i) * [%s,-%s];
d = (2 - 4*%i) * [(%s + 2*%i),(%s - 2*%i)];

a1 = 2*%s + 6;
a2 = (%s + 3 - 4*%i);
b1 = [1,2;3,4];
b2 = [1 + 2*%i,+3-4*%i;-5+6*%i,-7-8*%i];

c = b1 * a1;
d = b1 * a2;
e = b2 * a1;
f = b2 * a2;


a1ref = [38+20*%s,50-24*%s;-83-38*%s,-113+48*%s]
a2ref = [(34-72*%i)+(82+88*%i)*%s,(42-88*%i)+(106-112*%i)*%s;(-61+150*%i)+(-181-196*%i)*%s,(-81+178*%i)+(-241+256*%i)*%s]
a3ref = [(-59+76*%i)+(-30+40*%i)*%s,(-73+100*%i)+(32-48*%i)*%s;(47-166*%i)+(150-76*%i)*%s,(37-226*%i)+(-176+96*%i)*%s]
a4ref = [(87+190*%i)+(-301+32*%i)*%s,(115+242*%i)+(71+372*%i)*%s;(-39-244*%i)+(481-278*%i)*%s,(-43-320*%i)+(-443-546*%i)*%s]

a1 = [1,-2,3;-4,5,-6];
a2 = [1+2*%i,3-4*%i,-5+6*%i;-7-8*%i,9+10*%i,11-12*%i];
b1 = [1 + 2*%s,3-4*%s;-5+6*%s,-7-8*%s;9+10*%s,11-12*%s];
b2 = [(1+2*%i)+(3+4*%i)*%s,+(5+6*%i)+(7-8*%i)*%s;+(9+10*%i)-(11+12*%i)*%s,(13+14*%i)-(15-16*%i)*%s;(17-18*%i)+(19+20*%i)*%s,(21-22*%i)+(23-24*%i)*%s];

c = a1 * b1 - a1ref;
d = a1 * b2 - a2ref;
e = a2 * b1 - a3ref;
f = a2 * b2 - a4ref;
c,d,e,f

c = b1 * a1;
d = b1 * a2;
e = b2 * a1;
f = b2 * a2;
c,d,e,f


a1 = 1 + 2*%s ;
a2 = (1+2*%i) + (3-4*%i)*%s;
b1 = [1,2;3,4];
b2 = [1+2*%i,3-4*%i,-5+6*%i,-7-8*%i];

c = a1 * b1;
d = a1 * b2;
e = a2 * b1;
f = a2 * b2;
c,d,e,f

a1 = [1 + 2*%s,3-4*%s;-5+6*%s,-7-8*%s;9+10*%s,11-12*%s];
a2 = [(1+2*%i)+(3+4*%i)*%s,+(5+6*%i)+(7-8*%i)*%s;+(9+10*%i)-(11+12*%i)*%s,(13+14*%i)-(15-16*%i)*%s;(17-18*%i)+(19+20*%i)*%s,(21-22*%i)+(23-24*%i)*%s];
b1 = 3;
b2 = 1 + 2*%i;
c = a1 * b1;
d = a1 * b2;
e = a2 * b1;
f = a2 * b2;
c,d,e,f



a1 = [1 + 2*%s,3-4*%s;-5+6*%s,-7-8*%s;9+10*%s,11-12*%s];
a2 = [(1+2*%i)+(3+4*%i)*%s,+(5+6*%i)+(7-8*%i)*%s;+(9+10*%i)-(11+12*%i)*%s,(13+14*%i)-(15-16*%i)*%s;(17-18*%i)+(19+20*%i)*%s,(21-22*%i)+(23-24*%i)*%s];
b1 = [1,-2,3;-4,5,-6];
b2 = [1+2*%i,3-4*%i,-5+6*%i;-7-8*%i,9+10*%i,11-12*%i];

c = a1 * b1;
d = a1 * b2;
e = a2 * b1;
f = a2 * b2;
c,d,e,f

a1 = 1 + 2*%s;
a2 = (1+2*%i) + (3-4*%i)*%s;
b1 = [1,2;3,4];
b2 = [1+2*%i,3-4*%i,-5+6*%i,-7-8*%i];

c = a1 * b1;
d = a1 * b2;
e = a2 * b1;
f = a2 * b2;
c,d,e,f
*/
//a = "une chaine d'une longeure de 40 caracteres";
//b = ["1";"12";"123";"1234";"12345"]

//a = [1,2;3,4];
//b = [4,3;2,1];
//c = a/b

/*
//poly pulti scalar
a = %s + 2;
c = a * a

a = (2 + 3 * %i) + (4 - 5 * %i) * %s;
b = %s + 2;
c = a * b
d = b * a

a = (2 + 3 * %i) + (4 - 5 * %i) * %s;
b = a * a
//poly multi scalar * matrix
a1 = %s + 2;
b1 = (2 + 3 * %i) + (4 - 5 * %i) * %s;
c1 = [1 + 2*%s,3-4*%s;-5+6*%s,-7-8*%s;9+10*%s,11-12*%s];
d1 = [(1+2*%i)+(3+4*%i)*%s,+(5+6*%i)+(7-8*%i)*%s;+(9+10*%i)-(11+12*%i)*%s,(13+14*%i)-(15-16*%i)*%s;(17-18*%i)+(19+20*%i)*%s,(21-22*%i)+(23-24*%i)*%s];
e1 = a1 * c1;
f1 = a1 * d1;
g1 = b1 * c1;
h1 = b1 * d1;


//poly multi matrix*scalar
a2 = %s + 2;
b2 = (2 + 3 * %i) + (4 - 5 * %i) * %s;
c2 = [1 + 2*%s,3-4*%s;-5+6*%s,-7-8*%s;9+10*%s,11-12*%s];
d2 = [(1+2*%i)+(3+4*%i)*%s,+(5+6*%i)+(7-8*%i)*%s;+(9+10*%i)-(11+12*%i)*%s,(13+14*%i)-(15-16*%i)*%s;(17-18*%i)+(19+20*%i)*%s,(21-22*%i)+(23-24*%i)*%s];
e2 = c2 * a2;
f2 = d2 * a2;
g2 = c2 * b2;
h2 = d2 * b2;

z1 = e1 - e2;
z2 = f1 - f2;
z3 = g1 - g2;
z4 = h1 - h2;
z1,z2,z3,z4

a = %s
a = %s * %s
a = a * a;
a = a * a;
a = a * a;
z = 8 + %s
z = 8 + %s - 4*%s*%s + 1*%s*%s*%s*%s + 4*a - 6*a*a


a = [10,10];
b = [20,20,20,20];
c = [30,30,30,30,30,30];
d = [a,b;c];
e = [a,b;c;d*4];
f = [e,e*%i];
f = [f,f];
f = [f,f];
f = [f,f];
f = [f,f];
f = [f,f];
f = [f,f];
f = [f,f];
f = [f+f*%i,f+f*%i];
*/

/*
// substraction 
a = 5
b = 2*%i + 4
c = [1, 2 ; 3, 4]
d = [1+2*%i, 3-4*%i ; -5+6*%i, -7-8*%i]

//Matrix - Scalar
c - a
c - b
d - a
d - b

//Scalar - Matrix
a - c
a - d
b - c
b - d

//Matrix - Matrix
c - c
c - d
d - c
d - d


//Addition
a = 5
b = 2*%i + 4
c = [1, 2 ; 3, 4]
d = [1+2*%i, 3-4*%i ; -5+6*%i, -7-8*%i]

//Matrix + Scalar
c + a
c + b
d + a
d + b

//Scalar + Matrix
a + c
a + d
b + c
b + d

//Matrix + Matrix
c + c
c + d
d + c
d + d


a = [%s,2*%s;3*%s,4*%s]
b = 2;
a/b

*/
/*
a = %s;
a = [2 * a - 3 * a * %i + 4, -5 * a + 6 * a * %i - 7];
a = [2 * a - 3 * a * %i + 4 ; -5 * a + 6 * a * %i - 7 ; 8 * a - 9 * a * %i + 10];
b = [1,2;3,4;5,6];
c = a/b
4 / [1,2,3]


//divide poly by double
//scalar / scalar
a1 = 3;
a2 = 3 + 4*%i;
b1 = %s*4*2 + %s*%s*3;
b2 = (3+4*%i)*%s*4*2 + (3+4*%i)*%s*%s*3;
c = b1/a1;
d = b1/a2;
e = b2/a1;
f = b2/a2;
c,d,e,f


//matrix / scalar
a1 = 3;
a2 = 3 + 4*%i;
b1 = [%s, %s;%s*%s*3,%s*4*2 + %s*%s*3];
b2 = [%s, %i*%s ; %s*%s*(3+4*%i),(3+4*%i)*%s*4*2 + (3+4*%i)*%s*%s*3];
c = b1/a1;
d = b1/a2;
e = b2/a1;
f = b2/a2;
c,d,e,f

//scalar / matrix
(%s + 2) / [1, 2, 3]

//double extraction
a = [10,20,30];
b = a(2)

x = 9007199254740994
y = 1 - 1/65536
z = x+y
z-x
*/
/*
a = [1,2,3;4,5,6];
b = a([1,2],[1,3])

a = [1,2,3;4,5,6];
a([2,1],[3,2,1])

*/

//power scalar
//			R ** R
//R ** 1
2.5 ** 1
//R ** 0
2.5 ** 0
//R* ** Z-
2.5 ** (-1)
//0 ** Z-
0 ** (-1)
//R ** Z*+
2.5 ** 2
//R*+ ** R
2.5 ** 2.5
//R*- ** R
(-2.5) ** 2.5
//0 ** R*-
0 ** (-2.5)
//0 ** 0
0 ** 0
//0 ** R*+
0 ** 2.5
//0 ** NaN
0 ** (0/0)
//NaN ** R
(0/0) ** 2.5

//			R ** C
//R* ^ R
2.5 ^ ( 2.5 + 0*%i)
//R* ^ C
2.5 ^ ( 2.5 + 2.5*%i)
//0 ^ (r E R*+ ) & ( c E R )
0 ** ( 2.5 + 2.5*%i)
//0 ^ (r E R*- ) & ( c E R )
0 ** ( -2.5 + 2.5*%i)
//0 ^ (r = 0 ) & ( c E R )
0 ** ( 2.5*%i )

//			C ** R
//C ^ 0
(2.5+2.5*%i) ^ 0
//C ^ Z*-
(2.5+2.5*%i) ^ (-2)
//C ^ Z*+
(2.5+2.5*%i) ^ 2
//C ^ R
(2.5+2.5*%i) ^ 2.5
//0 ^ R*+
(0+0*%i) ^ 2.5
//0 ^ R*-
(0+0*%i) ^ (-2.5)
//0 ^ 0
(0+0*%i) ^ 0


//			C ** C
//C ^ R
(2.5+2.5*%i) ^ (2.5+0*%i)
//C ^ C
(2.5+2.5*%i) ^ (2.5+2.5*%i)
//0 ^ C
(0+0*%i) ^ (2.5+2.5*%i)


//power scalar ^ matrix

//			R ^ [R]
a = [2.5, -2.5; 0, 0/0];
b = [1,0;-1,2];
c = a(1) ** b;
d = a(2) ** b;
e = a(3) ** b;
f = a(4) ** b;
c,d,e,f


//			R ** [C]
a = [2.5,0,-2.5, 0/0];
b = [2.5 + 2.5*%i, 2.5+2.5*%i; -2.5+2.5*%i, 2.5*%i];
2.5 ** a
c = a(1) ** b
d = a(2) ** b
e = a(3) ** b
f = a(4) ** b
c,d,e,f

//			C ** [R]

